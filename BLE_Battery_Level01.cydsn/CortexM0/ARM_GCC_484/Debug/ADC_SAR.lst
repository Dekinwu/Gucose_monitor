ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ADC_SAR.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	ADC_SAR_initVar
  18              		.bss
  19              		.type	ADC_SAR_initVar, %object
  20              		.size	ADC_SAR_initVar, 1
  21              	ADC_SAR_initVar:
  22 0000 00       		.space	1
  23              		.comm	ADC_SAR_offset,2,4
  24              		.comm	ADC_SAR_countsPer10Volt,4,4
  25              		.section	.rodata
  26              		.align	2
  27              		.type	ADC_SAR_channelsConfig, %object
  28              		.size	ADC_SAR_channelsConfig, 4
  29              	ADC_SAR_channelsConfig:
  30 0000 00000000 		.space	4
  31              		.section	.text.ADC_SAR_Start,"ax",%progbits
  32              		.align	2
  33              		.global	ADC_SAR_Start
  34              		.code	16
  35              		.thumb_func
  36              		.type	ADC_SAR_Start, %function
  37              	ADC_SAR_Start:
  38              	.LFB2:
  39              		.file 1 ".\\Generated_Source\\PSoC4\\ADC_SAR.c"
   1:.\Generated_Source\PSoC4/ADC_SAR.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/ADC_SAR.c **** * File Name: ADC_SAR.c
   3:.\Generated_Source\PSoC4/ADC_SAR.c **** * Version 2.0
   4:.\Generated_Source\PSoC4/ADC_SAR.c **** *
   5:.\Generated_Source\PSoC4/ADC_SAR.c **** * Description:
   6:.\Generated_Source\PSoC4/ADC_SAR.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:.\Generated_Source\PSoC4/ADC_SAR.c **** *  Approximation ADC Component Component.
   8:.\Generated_Source\PSoC4/ADC_SAR.c **** *
   9:.\Generated_Source\PSoC4/ADC_SAR.c **** * Note:
  10:.\Generated_Source\PSoC4/ADC_SAR.c **** *
  11:.\Generated_Source\PSoC4/ADC_SAR.c **** ********************************************************************************
  12:.\Generated_Source\PSoC4/ADC_SAR.c **** * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  13:.\Generated_Source\PSoC4/ADC_SAR.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:.\Generated_Source\PSoC4/ADC_SAR.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:.\Generated_Source\PSoC4/ADC_SAR.c **** * the software package with which this file was provided.
  16:.\Generated_Source\PSoC4/ADC_SAR.c **** *******************************************************************************/
  17:.\Generated_Source\PSoC4/ADC_SAR.c **** 
  18:.\Generated_Source\PSoC4/ADC_SAR.c **** #include "ADC_SAR.h"
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 2


  19:.\Generated_Source\PSoC4/ADC_SAR.c **** 
  20:.\Generated_Source\PSoC4/ADC_SAR.c **** 
  21:.\Generated_Source\PSoC4/ADC_SAR.c **** /***************************************
  22:.\Generated_Source\PSoC4/ADC_SAR.c **** * Global data allocation
  23:.\Generated_Source\PSoC4/ADC_SAR.c **** ***************************************/
  24:.\Generated_Source\PSoC4/ADC_SAR.c **** uint8 ADC_SAR_initVar = 0u;
  25:.\Generated_Source\PSoC4/ADC_SAR.c **** volatile int16 ADC_SAR_offset[ADC_SAR_TOTAL_CHANNELS_NUM];
  26:.\Generated_Source\PSoC4/ADC_SAR.c **** volatile int32 ADC_SAR_countsPer10Volt[ADC_SAR_TOTAL_CHANNELS_NUM];   /* Gain compensation */
  27:.\Generated_Source\PSoC4/ADC_SAR.c **** 
  28:.\Generated_Source\PSoC4/ADC_SAR.c **** 
  29:.\Generated_Source\PSoC4/ADC_SAR.c **** /***************************************
  30:.\Generated_Source\PSoC4/ADC_SAR.c **** * Local data allocation
  31:.\Generated_Source\PSoC4/ADC_SAR.c **** ***************************************/
  32:.\Generated_Source\PSoC4/ADC_SAR.c **** /* Channels configuration generated by customiser */
  33:.\Generated_Source\PSoC4/ADC_SAR.c **** static const uint32 CYCODE ADC_SAR_channelsConfig[] = { 0x00000000u };
  34:.\Generated_Source\PSoC4/ADC_SAR.c **** 
  35:.\Generated_Source\PSoC4/ADC_SAR.c **** 
  36:.\Generated_Source\PSoC4/ADC_SAR.c **** /*******************************************************************************
  37:.\Generated_Source\PSoC4/ADC_SAR.c **** * Function Name: ADC_SAR_Start
  38:.\Generated_Source\PSoC4/ADC_SAR.c **** ********************************************************************************
  39:.\Generated_Source\PSoC4/ADC_SAR.c **** *
  40:.\Generated_Source\PSoC4/ADC_SAR.c **** * Summary:
  41:.\Generated_Source\PSoC4/ADC_SAR.c **** *  Performs all required initialization for this component
  42:.\Generated_Source\PSoC4/ADC_SAR.c **** *  and enables the power. The power will be set to the appropriate
  43:.\Generated_Source\PSoC4/ADC_SAR.c **** *  power based on the clock frequency.
  44:.\Generated_Source\PSoC4/ADC_SAR.c **** *
  45:.\Generated_Source\PSoC4/ADC_SAR.c **** * Parameters:
  46:.\Generated_Source\PSoC4/ADC_SAR.c **** *  None.
  47:.\Generated_Source\PSoC4/ADC_SAR.c **** *
  48:.\Generated_Source\PSoC4/ADC_SAR.c **** * Return:
  49:.\Generated_Source\PSoC4/ADC_SAR.c **** *  None.
  50:.\Generated_Source\PSoC4/ADC_SAR.c **** *
  51:.\Generated_Source\PSoC4/ADC_SAR.c **** * Global variables:
  52:.\Generated_Source\PSoC4/ADC_SAR.c **** *  The ADC_SAR_initVar variable is used to indicate when/if initial
  53:.\Generated_Source\PSoC4/ADC_SAR.c **** *  configuration of this component has happened. The variable is initialized to
  54:.\Generated_Source\PSoC4/ADC_SAR.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  55:.\Generated_Source\PSoC4/ADC_SAR.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  56:.\Generated_Source\PSoC4/ADC_SAR.c **** *  ADC_SAR_Start() routine.
  57:.\Generated_Source\PSoC4/ADC_SAR.c **** *  If re-initialization of the component is required the variable should be set
  58:.\Generated_Source\PSoC4/ADC_SAR.c **** *  to zero before call of ADC_SAR_Start() routine, or the user may call
  59:.\Generated_Source\PSoC4/ADC_SAR.c **** *  ADC_SAR_Init() and ADC_SAR_Enable() as done in the
  60:.\Generated_Source\PSoC4/ADC_SAR.c **** *  ADC_SAR_Start() routine.
  61:.\Generated_Source\PSoC4/ADC_SAR.c **** *
  62:.\Generated_Source\PSoC4/ADC_SAR.c **** *******************************************************************************/
  63:.\Generated_Source\PSoC4/ADC_SAR.c **** void ADC_SAR_Start(void)
  64:.\Generated_Source\PSoC4/ADC_SAR.c **** {
  40              		.loc 1 64 0
  41              		.cfi_startproc
  42 0000 80B5     		push	{r7, lr}
  43              		.cfi_def_cfa_offset 8
  44              		.cfi_offset 7, -8
  45              		.cfi_offset 14, -4
  46 0002 00AF     		add	r7, sp, #0
  47              		.cfi_def_cfa_register 7
  65:.\Generated_Source\PSoC4/ADC_SAR.c ****     /* If not Initialized then initialize all required hardware and software */
  66:.\Generated_Source\PSoC4/ADC_SAR.c ****     if(ADC_SAR_initVar == 0u)
  48              		.loc 1 66 0
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 3


  49 0004 064B     		ldr	r3, .L3
  50 0006 1B78     		ldrb	r3, [r3]
  51 0008 002B     		cmp	r3, #0
  52 000a 04D1     		bne	.L2
  67:.\Generated_Source\PSoC4/ADC_SAR.c ****     {
  68:.\Generated_Source\PSoC4/ADC_SAR.c ****         ADC_SAR_Init();
  53              		.loc 1 68 0
  54 000c FFF7FEFF 		bl	ADC_SAR_Init
  69:.\Generated_Source\PSoC4/ADC_SAR.c ****         ADC_SAR_initVar = 1u;
  55              		.loc 1 69 0
  56 0010 034B     		ldr	r3, .L3
  57 0012 0122     		mov	r2, #1
  58 0014 1A70     		strb	r2, [r3]
  59              	.L2:
  70:.\Generated_Source\PSoC4/ADC_SAR.c ****     }
  71:.\Generated_Source\PSoC4/ADC_SAR.c ****     ADC_SAR_Enable();
  60              		.loc 1 71 0
  61 0016 FFF7FEFF 		bl	ADC_SAR_Enable
  72:.\Generated_Source\PSoC4/ADC_SAR.c **** }
  62              		.loc 1 72 0
  63 001a BD46     		mov	sp, r7
  64              		@ sp needed
  65 001c 80BD     		pop	{r7, pc}
  66              	.L4:
  67 001e C046     		.align	2
  68              	.L3:
  69 0020 00000000 		.word	ADC_SAR_initVar
  70              		.cfi_endproc
  71              	.LFE2:
  72              		.size	ADC_SAR_Start, .-ADC_SAR_Start
  73              		.section	.text.ADC_SAR_Init,"ax",%progbits
  74              		.align	2
  75              		.global	ADC_SAR_Init
  76              		.code	16
  77              		.thumb_func
  78              		.type	ADC_SAR_Init, %function
  79              	ADC_SAR_Init:
  80              	.LFB3:
  73:.\Generated_Source\PSoC4/ADC_SAR.c **** 
  74:.\Generated_Source\PSoC4/ADC_SAR.c **** 
  75:.\Generated_Source\PSoC4/ADC_SAR.c **** /*******************************************************************************
  76:.\Generated_Source\PSoC4/ADC_SAR.c **** * Function Name: ADC_SAR_Init
  77:.\Generated_Source\PSoC4/ADC_SAR.c **** ********************************************************************************
  78:.\Generated_Source\PSoC4/ADC_SAR.c **** *
  79:.\Generated_Source\PSoC4/ADC_SAR.c **** * Summary:
  80:.\Generated_Source\PSoC4/ADC_SAR.c **** *  Initialize component's parameters to the parameters set by user in the
  81:.\Generated_Source\PSoC4/ADC_SAR.c **** *  customizer of the component placed onto schematic. Usually called in
  82:.\Generated_Source\PSoC4/ADC_SAR.c **** *  ADC_SAR_Start().
  83:.\Generated_Source\PSoC4/ADC_SAR.c **** *
  84:.\Generated_Source\PSoC4/ADC_SAR.c **** * Parameters:
  85:.\Generated_Source\PSoC4/ADC_SAR.c **** *  None.
  86:.\Generated_Source\PSoC4/ADC_SAR.c **** *
  87:.\Generated_Source\PSoC4/ADC_SAR.c **** * Return:
  88:.\Generated_Source\PSoC4/ADC_SAR.c **** *  None.
  89:.\Generated_Source\PSoC4/ADC_SAR.c **** *
  90:.\Generated_Source\PSoC4/ADC_SAR.c **** * Global variables:
  91:.\Generated_Source\PSoC4/ADC_SAR.c **** *  The ADC_SAR_offset variable is initialized.
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 4


  92:.\Generated_Source\PSoC4/ADC_SAR.c **** *
  93:.\Generated_Source\PSoC4/ADC_SAR.c **** *******************************************************************************/
  94:.\Generated_Source\PSoC4/ADC_SAR.c **** void ADC_SAR_Init(void)
  95:.\Generated_Source\PSoC4/ADC_SAR.c **** {
  81              		.loc 1 95 0
  82              		.cfi_startproc
  83 0000 90B5     		push	{r4, r7, lr}
  84              		.cfi_def_cfa_offset 12
  85              		.cfi_offset 4, -12
  86              		.cfi_offset 7, -8
  87              		.cfi_offset 14, -4
  88 0002 85B0     		sub	sp, sp, #20
  89              		.cfi_def_cfa_offset 32
  90 0004 00AF     		add	r7, sp, #0
  91              		.cfi_def_cfa_register 7
  96:.\Generated_Source\PSoC4/ADC_SAR.c ****     uint32 chNum;
  97:.\Generated_Source\PSoC4/ADC_SAR.c ****     uint32 tmpRegVal;
  98:.\Generated_Source\PSoC4/ADC_SAR.c ****     int32 counts;
  99:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 100:.\Generated_Source\PSoC4/ADC_SAR.c ****     #if(ADC_SAR_TOTAL_CHANNELS_NUM > 1u)
 101:.\Generated_Source\PSoC4/ADC_SAR.c ****         static const uint8 CYCODE ADC_SAR_InputsPlacement[] =
 102:.\Generated_Source\PSoC4/ADC_SAR.c ****         {
 103:.\Generated_Source\PSoC4/ADC_SAR.c ****             (uint8)(ADC_SAR_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 104:.\Generated_Source\PSoC4/ADC_SAR.c ****             (uint8)ADC_SAR_cy_psoc4_sarmux_8__CH_0_PIN
 105:.\Generated_Source\PSoC4/ADC_SAR.c ****             ,(uint8)(ADC_SAR_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 106:.\Generated_Source\PSoC4/ADC_SAR.c ****              (uint8)ADC_SAR_cy_psoc4_sarmux_8__CH_1_PIN
 107:.\Generated_Source\PSoC4/ADC_SAR.c ****             #if(ADC_SAR_TOTAL_CHANNELS_NUM > 2u)
 108:.\Generated_Source\PSoC4/ADC_SAR.c ****                 ,(uint8)(ADC_SAR_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 109:.\Generated_Source\PSoC4/ADC_SAR.c ****                  (uint8)ADC_SAR_cy_psoc4_sarmux_8__CH_2_PIN
 110:.\Generated_Source\PSoC4/ADC_SAR.c ****             #endif /* End ADC_SAR_TOTAL_CHANNELS_NUM > 2u */
 111:.\Generated_Source\PSoC4/ADC_SAR.c ****             #if(ADC_SAR_TOTAL_CHANNELS_NUM > 3u)
 112:.\Generated_Source\PSoC4/ADC_SAR.c ****                 ,(uint8)(ADC_SAR_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 113:.\Generated_Source\PSoC4/ADC_SAR.c ****                  (uint8)ADC_SAR_cy_psoc4_sarmux_8__CH_3_PIN
 114:.\Generated_Source\PSoC4/ADC_SAR.c ****             #endif /* End ADC_SAR_TOTAL_CHANNELS_NUM > 3u */
 115:.\Generated_Source\PSoC4/ADC_SAR.c ****             #if(ADC_SAR_TOTAL_CHANNELS_NUM > 4u)
 116:.\Generated_Source\PSoC4/ADC_SAR.c ****                 ,(uint8)(ADC_SAR_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 117:.\Generated_Source\PSoC4/ADC_SAR.c ****                  (uint8)ADC_SAR_cy_psoc4_sarmux_8__CH_4_PIN
 118:.\Generated_Source\PSoC4/ADC_SAR.c ****             #endif /* End ADC_SAR_TOTAL_CHANNELS_NUM > 4u */
 119:.\Generated_Source\PSoC4/ADC_SAR.c ****             #if(ADC_SAR_TOTAL_CHANNELS_NUM > 5u)
 120:.\Generated_Source\PSoC4/ADC_SAR.c ****                 ,(uint8)(ADC_SAR_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 121:.\Generated_Source\PSoC4/ADC_SAR.c ****                  (uint8)ADC_SAR_cy_psoc4_sarmux_8__CH_5_PIN
 122:.\Generated_Source\PSoC4/ADC_SAR.c ****             #endif /* End ADC_SAR_TOTAL_CHANNELS_NUM > 5u */
 123:.\Generated_Source\PSoC4/ADC_SAR.c ****             #if(ADC_SAR_TOTAL_CHANNELS_NUM > 6u)
 124:.\Generated_Source\PSoC4/ADC_SAR.c ****                 ,(uint8)(ADC_SAR_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 125:.\Generated_Source\PSoC4/ADC_SAR.c ****                  (uint8)ADC_SAR_cy_psoc4_sarmux_8__CH_6_PIN
 126:.\Generated_Source\PSoC4/ADC_SAR.c ****             #endif /* End ADC_SAR_TOTAL_CHANNELS_NUM > 6u */
 127:.\Generated_Source\PSoC4/ADC_SAR.c ****             #if(ADC_SAR_TOTAL_CHANNELS_NUM > 7u)
 128:.\Generated_Source\PSoC4/ADC_SAR.c ****                 ,(uint8)(ADC_SAR_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 129:.\Generated_Source\PSoC4/ADC_SAR.c ****                  (uint8)ADC_SAR_cy_psoc4_sarmux_8__CH_7_PIN
 130:.\Generated_Source\PSoC4/ADC_SAR.c ****             #endif /* End ADC_SAR_TOTAL_CHANNELS_NUM > 7u */
 131:.\Generated_Source\PSoC4/ADC_SAR.c ****             #if(ADC_SAR_TOTAL_CHANNELS_NUM > 8u)
 132:.\Generated_Source\PSoC4/ADC_SAR.c ****                 ,(uint8)(ADC_SAR_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 133:.\Generated_Source\PSoC4/ADC_SAR.c ****                  (uint8)ADC_SAR_cy_psoc4_sarmux_8__CH_8_PIN
 134:.\Generated_Source\PSoC4/ADC_SAR.c ****             #endif /* End ADC_SAR_TOTAL_CHANNELS_NUM > 8u */
 135:.\Generated_Source\PSoC4/ADC_SAR.c ****         };
 136:.\Generated_Source\PSoC4/ADC_SAR.c ****     #endif /* End ADC_SAR_TOTAL_CHANNELS_NUM > 1u */
 137:.\Generated_Source\PSoC4/ADC_SAR.c **** 
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 5


 138:.\Generated_Source\PSoC4/ADC_SAR.c ****     #if(ADC_SAR_IRQ_REMOVE == 0u)
 139:.\Generated_Source\PSoC4/ADC_SAR.c ****         /* Start and set interrupt vector */
 140:.\Generated_Source\PSoC4/ADC_SAR.c ****         CyIntSetPriority(ADC_SAR_INTC_NUMBER, ADC_SAR_INTC_PRIOR_NUMBER);
  92              		.loc 1 140 0
  93 0006 0F20     		mov	r0, #15
  94 0008 0321     		mov	r1, #3
  95 000a FFF7FEFF 		bl	CyIntSetPriority
 141:.\Generated_Source\PSoC4/ADC_SAR.c ****         (void)CyIntSetVector(ADC_SAR_INTC_NUMBER, &ADC_SAR_ISR);
  96              		.loc 1 141 0
  97 000e 4F4B     		ldr	r3, .L15
  98 0010 0F20     		mov	r0, #15
  99 0012 191C     		mov	r1, r3
 100 0014 FFF7FEFF 		bl	CyIntSetVector
 142:.\Generated_Source\PSoC4/ADC_SAR.c ****     #endif   /* End ADC_SAR_IRQ_REMOVE */
 143:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 144:.\Generated_Source\PSoC4/ADC_SAR.c ****     /* Init SAR and MUX registers */
 145:.\Generated_Source\PSoC4/ADC_SAR.c ****     ADC_SAR_SAR_CHAN_EN_REG = ADC_SAR_DEFAULT_EN_CHANNELS;
 101              		.loc 1 145 0
 102 0018 4D4B     		ldr	r3, .L15+4
 103 001a 0122     		mov	r2, #1
 104 001c 1A60     		str	r2, [r3]
 146:.\Generated_Source\PSoC4/ADC_SAR.c ****     ADC_SAR_SAR_CTRL_REG = ADC_SAR_DEFAULT_CTRL_REG_CFG;
 105              		.loc 1 146 0
 106 001e 4D4B     		ldr	r3, .L15+8
 107 0020 4D4A     		ldr	r2, .L15+12
 108 0022 1A60     		str	r2, [r3]
 147:.\Generated_Source\PSoC4/ADC_SAR.c ****     ADC_SAR_SAR_SAMPLE_CTRL_REG = ADC_SAR_DEFAULT_SAMPLE_CTRL_REG_CFG;
 109              		.loc 1 147 0
 110 0024 4D4B     		ldr	r3, .L15+16
 111 0026 4E4A     		ldr	r2, .L15+20
 112 0028 1A60     		str	r2, [r3]
 148:.\Generated_Source\PSoC4/ADC_SAR.c ****     ADC_SAR_SAR_RANGE_THRES_REG = ADC_SAR_DEFAULT_RANGE_THRES_REG_CFG;
 113              		.loc 1 148 0
 114 002a 4E4B     		ldr	r3, .L15+24
 115 002c 4E4A     		ldr	r2, .L15+28
 116 002e 1A60     		str	r2, [r3]
 149:.\Generated_Source\PSoC4/ADC_SAR.c ****     ADC_SAR_SAR_RANGE_COND_REG  = ADC_SAR_COMPARE_MODE;
 117              		.loc 1 149 0
 118 0030 4E4B     		ldr	r3, .L15+32
 119 0032 0022     		mov	r2, #0
 120 0034 1A60     		str	r2, [r3]
 150:.\Generated_Source\PSoC4/ADC_SAR.c ****     ADC_SAR_SAR_SAMPLE_TIME01_REG = ADC_SAR_DEFAULT_SAMPLE_TIME01_REG_CFG;
 121              		.loc 1 150 0
 122 0036 4E4B     		ldr	r3, .L15+36
 123 0038 4E4A     		ldr	r2, .L15+40
 124 003a 1A60     		str	r2, [r3]
 151:.\Generated_Source\PSoC4/ADC_SAR.c ****     ADC_SAR_SAR_SAMPLE_TIME23_REG = ADC_SAR_DEFAULT_SAMPLE_TIME23_REG_CFG;
 125              		.loc 1 151 0
 126 003c 4E4B     		ldr	r3, .L15+44
 127 003e 4D4A     		ldr	r2, .L15+40
 128 0040 1A60     		str	r2, [r3]
 152:.\Generated_Source\PSoC4/ADC_SAR.c ****     
 153:.\Generated_Source\PSoC4/ADC_SAR.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
 154:.\Generated_Source\PSoC4/ADC_SAR.c ****     #if(ADC_SAR_DEFAULT_MUX_SWITCH0 != 0u)
 155:.\Generated_Source\PSoC4/ADC_SAR.c ****         ADC_SAR_MUX_SWITCH0_REG |= ADC_SAR_DEFAULT_MUX_SWITCH0;
 129              		.loc 1 155 0
 130 0042 4E4B     		ldr	r3, .L15+48
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 6


 131 0044 4D4A     		ldr	r2, .L15+48
 132 0046 1268     		ldr	r2, [r2]
 133 0048 8021     		mov	r1, #128
 134 004a 4902     		lsl	r1, r1, #9
 135 004c 0A43     		orr	r2, r1
 136 004e 1A60     		str	r2, [r3]
 156:.\Generated_Source\PSoC4/ADC_SAR.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 157:.\Generated_Source\PSoC4/ADC_SAR.c ****         #if(ADC_SAR_TOTAL_CHANNELS_NUM > 1u)
 158:.\Generated_Source\PSoC4/ADC_SAR.c ****             ADC_SAR_MUX_SWITCH_HW_CTRL_REG |= ADC_SAR_DEFAULT_MUX_SWITCH0;
 159:.\Generated_Source\PSoC4/ADC_SAR.c ****         #endif /* ADC_SAR_TOTAL_CHANNELS_NUM > 1u */
 160:.\Generated_Source\PSoC4/ADC_SAR.c ****     #endif /*ADC_SAR_CHANNELS_MODE !=0 */
 161:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 162:.\Generated_Source\PSoC4/ADC_SAR.c ****     ADC_SAR_SAR_SATURATE_INTR_MASK_REG = 0u;
 137              		.loc 1 162 0
 138 0050 4B4B     		ldr	r3, .L15+52
 139 0052 0022     		mov	r2, #0
 140 0054 1A60     		str	r2, [r3]
 163:.\Generated_Source\PSoC4/ADC_SAR.c ****     ADC_SAR_SAR_RANGE_INTR_MASK_REG = 0u;
 141              		.loc 1 163 0
 142 0056 4B4B     		ldr	r3, .L15+56
 143 0058 0022     		mov	r2, #0
 144 005a 1A60     		str	r2, [r3]
 164:.\Generated_Source\PSoC4/ADC_SAR.c ****     ADC_SAR_SAR_INTR_MASK_REG = ADC_SAR_SAR_INTR_MASK;
 145              		.loc 1 164 0
 146 005c 4A4B     		ldr	r3, .L15+60
 147 005e 0122     		mov	r2, #1
 148 0060 1A60     		str	r2, [r3]
 165:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 166:.\Generated_Source\PSoC4/ADC_SAR.c ****     #if(ADC_SAR_CY_SAR_IP_VER == ADC_SAR_CY_SAR_IP_PSOC4)
 167:.\Generated_Source\PSoC4/ADC_SAR.c ****         ADC_SAR_ANA_TRIM_REG = ADC_SAR_TRIM_COEF;
 168:.\Generated_Source\PSoC4/ADC_SAR.c ****     #endif /* (ADC_SAR_CY_SAR_IP_VER == ADC_SAR_CY_SAR_IP_PSOC4) */
 169:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 170:.\Generated_Source\PSoC4/ADC_SAR.c ****     /* Read and modify default configuration based on characterization */
 171:.\Generated_Source\PSoC4/ADC_SAR.c ****     tmpRegVal = ADC_SAR_SAR_DFT_CTRL_REG;
 149              		.loc 1 171 0
 150 0062 4A4B     		ldr	r3, .L15+64
 151 0064 1B68     		ldr	r3, [r3]
 152 0066 7B60     		str	r3, [r7, #4]
 172:.\Generated_Source\PSoC4/ADC_SAR.c ****     tmpRegVal &= (uint32)~ADC_SAR_DCEN;
 153              		.loc 1 172 0
 154 0068 7A68     		ldr	r2, [r7, #4]
 155 006a 494B     		ldr	r3, .L15+68
 156 006c 1340     		and	r3, r2
 157 006e 7B60     		str	r3, [r7, #4]
 173:.\Generated_Source\PSoC4/ADC_SAR.c ****     
 174:.\Generated_Source\PSoC4/ADC_SAR.c ****     #if(ADC_SAR_CY_SAR_IP_VER == ADC_SAR_CY_SAR_IP_PSOC4)
 175:.\Generated_Source\PSoC4/ADC_SAR.c ****         #if(ADC_SAR_NOMINAL_CLOCK_FREQ > (ADC_SAR_MAX_FREQUENCY / 2))
 176:.\Generated_Source\PSoC4/ADC_SAR.c ****             tmpRegVal |= ADC_SAR_SEL_CSEL_DFT_CHAR;
 177:.\Generated_Source\PSoC4/ADC_SAR.c ****         #else  /* clock speed < 9 Mhz */
 178:.\Generated_Source\PSoC4/ADC_SAR.c ****             tmpRegVal |= ADC_SAR_DLY_INC;
 179:.\Generated_Source\PSoC4/ADC_SAR.c ****         #endif /* clock speed > 9 Mhz */
 180:.\Generated_Source\PSoC4/ADC_SAR.c ****     #else
 181:.\Generated_Source\PSoC4/ADC_SAR.c ****         #if ((ADC_SAR_DEFAULT_VREF_SEL == ADC_SAR__INTERNAL1024) || \
 182:.\Generated_Source\PSoC4/ADC_SAR.c ****              (ADC_SAR_DEFAULT_VREF_SEL == ADC_SAR__INTERNALVREF))
 183:.\Generated_Source\PSoC4/ADC_SAR.c ****             tmpRegVal |= ADC_SAR_DLY_INC;
 184:.\Generated_Source\PSoC4/ADC_SAR.c ****         #else
 185:.\Generated_Source\PSoC4/ADC_SAR.c ****             tmpRegVal |= ADC_SAR_DCEN;
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 7


 158              		.loc 1 185 0
 159 0070 7B68     		ldr	r3, [r7, #4]
 160 0072 8022     		mov	r2, #128
 161 0074 9205     		lsl	r2, r2, #22
 162 0076 1343     		orr	r3, r2
 163 0078 7B60     		str	r3, [r7, #4]
 186:.\Generated_Source\PSoC4/ADC_SAR.c ****             tmpRegVal &= (uint32)~ADC_SAR_DLY_INC;
 164              		.loc 1 186 0
 165 007a 7B68     		ldr	r3, [r7, #4]
 166 007c 0122     		mov	r2, #1
 167 007e 9343     		bic	r3, r2
 168 0080 7B60     		str	r3, [r7, #4]
 187:.\Generated_Source\PSoC4/ADC_SAR.c ****         #endif /* ((ADC_SAR_DEFAULT_VREF_SEL == ADC_SAR__INTERNAL1024) || \
 188:.\Generated_Source\PSoC4/ADC_SAR.c ****                    (ADC_SAR_DEFAULT_VREF_SEL == ADC_SAR__INTERNALVREF)) */
 189:.\Generated_Source\PSoC4/ADC_SAR.c ****     #endif /* (ADC_SAR_CY_SAR_IP_VER == ADC_SAR_CY_SAR_IP_PSOC4) */
 190:.\Generated_Source\PSoC4/ADC_SAR.c ****     
 191:.\Generated_Source\PSoC4/ADC_SAR.c ****     ADC_SAR_SAR_DFT_CTRL_REG = tmpRegVal;
 169              		.loc 1 191 0
 170 0082 424B     		ldr	r3, .L15+64
 171 0084 7A68     		ldr	r2, [r7, #4]
 172 0086 1A60     		str	r2, [r3]
 192:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 193:.\Generated_Source\PSoC4/ADC_SAR.c ****     #if(ADC_SAR_MAX_RESOLUTION != ADC_SAR_RESOLUTION_12)
 194:.\Generated_Source\PSoC4/ADC_SAR.c ****         ADC_SAR_WOUNDING_REG = ADC_SAR_ALT_WOUNDING;
 195:.\Generated_Source\PSoC4/ADC_SAR.c ****     #endif /* ADC_SAR_MAX_RESOLUTION != ADC_SAR_RESOLUTION_12 */
 196:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 197:.\Generated_Source\PSoC4/ADC_SAR.c ****     for(chNum = 0u; chNum < ADC_SAR_TOTAL_CHANNELS_NUM; chNum++)
 173              		.loc 1 197 0
 174 0088 0023     		mov	r3, #0
 175 008a FB60     		str	r3, [r7, #12]
 176 008c 58E0     		b	.L6
 177              	.L14:
 198:.\Generated_Source\PSoC4/ADC_SAR.c ****     {
 199:.\Generated_Source\PSoC4/ADC_SAR.c ****         tmpRegVal = (ADC_SAR_channelsConfig[chNum] & ADC_SAR_CHANNEL_CONFIG_MASK);
 178              		.loc 1 199 0
 179 008e 0022     		mov	r2, #0
 180 0090 DC23     		mov	r3, #220
 181 0092 9B01     		lsl	r3, r3, #6
 182 0094 1340     		and	r3, r2
 183 0096 7B60     		str	r3, [r7, #4]
 200:.\Generated_Source\PSoC4/ADC_SAR.c ****         #if(ADC_SAR_TOTAL_CHANNELS_NUM > 1u)
 201:.\Generated_Source\PSoC4/ADC_SAR.c ****             tmpRegVal |= ADC_SAR_InputsPlacement[chNum];
 202:.\Generated_Source\PSoC4/ADC_SAR.c ****         #endif /* End ADC_SAR_TOTAL_CHANNELS_NUM > 1u */
 203:.\Generated_Source\PSoC4/ADC_SAR.c ****         
 204:.\Generated_Source\PSoC4/ADC_SAR.c ****         
 205:.\Generated_Source\PSoC4/ADC_SAR.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 206:.\Generated_Source\PSoC4/ADC_SAR.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 207:.\Generated_Source\PSoC4/ADC_SAR.c ****         *  (0) and 8-bit (1) resolution.
 208:.\Generated_Source\PSoC4/ADC_SAR.c ****         */
 209:.\Generated_Source\PSoC4/ADC_SAR.c ****         #if((ADC_SAR_MAX_RESOLUTION != ADC_SAR_RESOLUTION_12) && \
 210:.\Generated_Source\PSoC4/ADC_SAR.c ****             (ADC_SAR_ALT_WOUNDING == ADC_SAR_WOUNDING_10BIT))
 211:.\Generated_Source\PSoC4/ADC_SAR.c ****             tmpRegVal &= (uint32)(~ADC_SAR_ALT_RESOLUTION_ON);
 212:.\Generated_Source\PSoC4/ADC_SAR.c ****         #endif /* ADC_SAR_MAX_RESOLUTION != ADC_SAR_RESOLUTION_12 */
 213:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 214:.\Generated_Source\PSoC4/ADC_SAR.c ****         #if(ADC_SAR_INJ_CHANNEL_ENABLED)
 215:.\Generated_Source\PSoC4/ADC_SAR.c ****         if(chNum < ADC_SAR_SEQUENCED_CHANNELS_NUM)
 216:.\Generated_Source\PSoC4/ADC_SAR.c ****         #endif /* ADC_SAR_INJ_CHANNEL_ENABLED */
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 8


 217:.\Generated_Source\PSoC4/ADC_SAR.c ****         {
 218:.\Generated_Source\PSoC4/ADC_SAR.c ****             CY_SET_REG32((reg32 *)(ADC_SAR_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRegVal);
 184              		.loc 1 218 0
 185 0098 FB68     		ldr	r3, [r7, #12]
 186 009a 9B00     		lsl	r3, r3, #2
 187 009c 3D4A     		ldr	r2, .L15+72
 188 009e 9B18     		add	r3, r3, r2
 189 00a0 7A68     		ldr	r2, [r7, #4]
 190 00a2 1A60     		str	r2, [r3]
 219:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 220:.\Generated_Source\PSoC4/ADC_SAR.c ****             if((ADC_SAR_channelsConfig[chNum] & ADC_SAR_IS_SATURATE_EN_MASK) != 0u)
 191              		.loc 1 220 0
 192 00a4 0022     		mov	r2, #0
 193 00a6 0123     		mov	r3, #1
 194 00a8 1340     		and	r3, r2
 195 00aa 0AD0     		beq	.L7
 221:.\Generated_Source\PSoC4/ADC_SAR.c ****             {
 222:.\Generated_Source\PSoC4/ADC_SAR.c ****                 ADC_SAR_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 196              		.loc 1 222 0
 197 00ac 344B     		ldr	r3, .L15+52
 198 00ae 344A     		ldr	r2, .L15+52
 199 00b0 1168     		ldr	r1, [r2]
 200 00b2 FA68     		ldr	r2, [r7, #12]
 201 00b4 0120     		mov	r0, #1
 202 00b6 041C     		mov	r4, r0
 203 00b8 9440     		lsl	r4, r4, r2
 204 00ba 221C     		mov	r2, r4
 205 00bc 92B2     		uxth	r2, r2
 206 00be 0A43     		orr	r2, r1
 207 00c0 1A60     		str	r2, [r3]
 208              	.L7:
 223:.\Generated_Source\PSoC4/ADC_SAR.c ****             }
 224:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 225:.\Generated_Source\PSoC4/ADC_SAR.c ****             if((ADC_SAR_channelsConfig[chNum] & ADC_SAR_IS_RANGE_CTRL_EN_MASK) != 0u)
 209              		.loc 1 225 0
 210 00c2 0022     		mov	r2, #0
 211 00c4 0223     		mov	r3, #2
 212 00c6 1340     		and	r3, r2
 213 00c8 0AD0     		beq	.L8
 226:.\Generated_Source\PSoC4/ADC_SAR.c ****             {
 227:.\Generated_Source\PSoC4/ADC_SAR.c ****                 ADC_SAR_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 214              		.loc 1 227 0
 215 00ca 2E4B     		ldr	r3, .L15+56
 216 00cc 2D4A     		ldr	r2, .L15+56
 217 00ce 1168     		ldr	r1, [r2]
 218 00d0 FA68     		ldr	r2, [r7, #12]
 219 00d2 0120     		mov	r0, #1
 220 00d4 041C     		mov	r4, r0
 221 00d6 9440     		lsl	r4, r4, r2
 222 00d8 221C     		mov	r2, r4
 223 00da 92B2     		uxth	r2, r2
 224 00dc 0A43     		orr	r2, r1
 225 00de 1A60     		str	r2, [r3]
 226              	.L8:
 228:.\Generated_Source\PSoC4/ADC_SAR.c ****             }
 229:.\Generated_Source\PSoC4/ADC_SAR.c ****         }
 230:.\Generated_Source\PSoC4/ADC_SAR.c ****         #if(ADC_SAR_INJ_CHANNEL_ENABLED)
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 9


 231:.\Generated_Source\PSoC4/ADC_SAR.c ****             else
 232:.\Generated_Source\PSoC4/ADC_SAR.c ****             {
 233:.\Generated_Source\PSoC4/ADC_SAR.c ****                 CY_SET_REG32(ADC_SAR_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | ADC_SAR_INJ_TAILGATING);
 234:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 235:.\Generated_Source\PSoC4/ADC_SAR.c ****                 if((ADC_SAR_channelsConfig[chNum] & ADC_SAR_IS_SATURATE_EN_MASK) != 0u)
 236:.\Generated_Source\PSoC4/ADC_SAR.c ****                 {
 237:.\Generated_Source\PSoC4/ADC_SAR.c ****                     ADC_SAR_SAR_INTR_MASK_REG |= ADC_SAR_INJ_SATURATE_MASK;
 238:.\Generated_Source\PSoC4/ADC_SAR.c ****                 }
 239:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 240:.\Generated_Source\PSoC4/ADC_SAR.c ****                 if((ADC_SAR_channelsConfig[chNum] & ADC_SAR_IS_RANGE_CTRL_EN_MASK) != 0u)
 241:.\Generated_Source\PSoC4/ADC_SAR.c ****                 {
 242:.\Generated_Source\PSoC4/ADC_SAR.c ****                     ADC_SAR_SAR_INTR_MASK_REG |= ADC_SAR_INJ_RANGE_MASK;
 243:.\Generated_Source\PSoC4/ADC_SAR.c ****                 }
 244:.\Generated_Source\PSoC4/ADC_SAR.c ****             }
 245:.\Generated_Source\PSoC4/ADC_SAR.c ****         #endif /* ADC_SAR_INJ_CHANNEL_ENABLED */
 246:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 247:.\Generated_Source\PSoC4/ADC_SAR.c ****         if((ADC_SAR_channelsConfig[chNum] & ADC_SAR_ALT_RESOLUTION_ON) != 0u)
 227              		.loc 1 247 0
 228 00e0 0022     		mov	r2, #0
 229 00e2 8023     		mov	r3, #128
 230 00e4 9B00     		lsl	r3, r3, #2
 231 00e6 1340     		and	r3, r2
 232 00e8 03D0     		beq	.L9
 248:.\Generated_Source\PSoC4/ADC_SAR.c ****         {
 249:.\Generated_Source\PSoC4/ADC_SAR.c ****                counts = (int32)ADC_SAR_DEFAULT_MAX_WRK_ALT;
 233              		.loc 1 249 0
 234 00ea 8023     		mov	r3, #128
 235 00ec 5B00     		lsl	r3, r3, #1
 236 00ee BB60     		str	r3, [r7, #8]
 237 00f0 02E0     		b	.L10
 238              	.L9:
 250:.\Generated_Source\PSoC4/ADC_SAR.c ****         }
 251:.\Generated_Source\PSoC4/ADC_SAR.c ****         else
 252:.\Generated_Source\PSoC4/ADC_SAR.c ****         {
 253:.\Generated_Source\PSoC4/ADC_SAR.c ****                counts = (int32)ADC_SAR_SAR_WRK_MAX_12BIT;
 239              		.loc 1 253 0
 240 00f2 8023     		mov	r3, #128
 241 00f4 5B01     		lsl	r3, r3, #5
 242 00f6 BB60     		str	r3, [r7, #8]
 243              	.L10:
 254:.\Generated_Source\PSoC4/ADC_SAR.c ****         }
 255:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 256:.\Generated_Source\PSoC4/ADC_SAR.c ****         if((ADC_SAR_channelsConfig[chNum] & ADC_SAR_DIFFERENTIAL_EN) == 0u)
 244              		.loc 1 256 0
 245 00f8 0022     		mov	r2, #0
 246 00fa 8023     		mov	r3, #128
 247 00fc 5B00     		lsl	r3, r3, #1
 248 00fe 1340     		and	r3, r2
 249 0100 05D1     		bne	.L11
 257:.\Generated_Source\PSoC4/ADC_SAR.c ****         {
 258:.\Generated_Source\PSoC4/ADC_SAR.c ****             #if((ADC_SAR_DEFAULT_SE_RESULT_FORMAT_SEL == ADC_SAR__FSIGNED) && \
 259:.\Generated_Source\PSoC4/ADC_SAR.c ****                 (ADC_SAR_DEFAULT_NEG_INPUT_SEL == ADC_SAR__VREF))
 260:.\Generated_Source\PSoC4/ADC_SAR.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 261:.\Generated_Source\PSoC4/ADC_SAR.c ****                 ADC_SAR_offset[chNum] = (int16)(counts / -2);
 262:.\Generated_Source\PSoC4/ADC_SAR.c ****             #else
 263:.\Generated_Source\PSoC4/ADC_SAR.c ****                 ADC_SAR_offset[chNum] = 0;
 250              		.loc 1 263 0
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 10


 251 0102 254B     		ldr	r3, .L15+76
 252 0104 FA68     		ldr	r2, [r7, #12]
 253 0106 5200     		lsl	r2, r2, #1
 254 0108 0021     		mov	r1, #0
 255 010a D152     		strh	r1, [r2, r3]
 256 010c 04E0     		b	.L12
 257              	.L11:
 264:.\Generated_Source\PSoC4/ADC_SAR.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC_SAR__FSIGNED */
 265:.\Generated_Source\PSoC4/ADC_SAR.c ****         }
 266:.\Generated_Source\PSoC4/ADC_SAR.c ****         else    /* Differential channel */
 267:.\Generated_Source\PSoC4/ADC_SAR.c ****         {
 268:.\Generated_Source\PSoC4/ADC_SAR.c ****             #if(ADC_SAR_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC_SAR__FUNSIGNED)
 269:.\Generated_Source\PSoC4/ADC_SAR.c ****                 /* Set offset to the half scale to convert results to signed format */
 270:.\Generated_Source\PSoC4/ADC_SAR.c ****                 ADC_SAR_offset[chNum] = (int16)(counts / 2);
 271:.\Generated_Source\PSoC4/ADC_SAR.c ****             #else
 272:.\Generated_Source\PSoC4/ADC_SAR.c ****                 ADC_SAR_offset[chNum] = 0;
 258              		.loc 1 272 0
 259 010e 224B     		ldr	r3, .L15+76
 260 0110 FA68     		ldr	r2, [r7, #12]
 261 0112 5200     		lsl	r2, r2, #1
 262 0114 0021     		mov	r1, #0
 263 0116 D152     		strh	r1, [r2, r3]
 264              	.L12:
 273:.\Generated_Source\PSoC4/ADC_SAR.c ****             #endif /* end ADC_SAR_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC_SAR__FUNSIGNED */
 274:.\Generated_Source\PSoC4/ADC_SAR.c ****         }
 275:.\Generated_Source\PSoC4/ADC_SAR.c ****         /* Calculate gain in counts per 10 volts with rounding */
 276:.\Generated_Source\PSoC4/ADC_SAR.c ****         ADC_SAR_countsPer10Volt[chNum] = (int16)(((counts * ADC_SAR_10MV_COUNTS) +
 265              		.loc 1 276 0
 266 0118 BB68     		ldr	r3, [r7, #8]
 267 011a 204A     		ldr	r2, .L15+80
 268 011c 5343     		mul	r3, r2
 269 011e 8022     		mov	r2, #128
 270 0120 D200     		lsl	r2, r2, #3
 271 0122 9B18     		add	r3, r3, r2
 277:.\Generated_Source\PSoC4/ADC_SAR.c ****                             ADC_SAR_DEFAULT_VREF_MV_VALUE) / (ADC_SAR_DEFAULT_VREF_MV_VALUE * 2));
 272              		.loc 1 277 0
 273 0124 002B     		cmp	r3, #0
 274 0126 01DA     		bge	.L13
 275 0128 1D4C     		ldr	r4, .L15+84
 276 012a 1B19     		add	r3, r3, r4
 277              	.L13:
 278 012c DB12     		asr	r3, r3, #11
 276:.\Generated_Source\PSoC4/ADC_SAR.c ****         ADC_SAR_countsPer10Volt[chNum] = (int16)(((counts * ADC_SAR_10MV_COUNTS) +
 279              		.loc 1 276 0
 280 012e 9BB2     		uxth	r3, r3
 281 0130 19B2     		sxth	r1, r3
 282 0132 1C4B     		ldr	r3, .L15+88
 283 0134 FA68     		ldr	r2, [r7, #12]
 284 0136 9200     		lsl	r2, r2, #2
 285 0138 D150     		str	r1, [r2, r3]
 197:.\Generated_Source\PSoC4/ADC_SAR.c ****     for(chNum = 0u; chNum < ADC_SAR_TOTAL_CHANNELS_NUM; chNum++)
 286              		.loc 1 197 0
 287 013a FB68     		ldr	r3, [r7, #12]
 288 013c 0133     		add	r3, r3, #1
 289 013e FB60     		str	r3, [r7, #12]
 290              	.L6:
 197:.\Generated_Source\PSoC4/ADC_SAR.c ****     for(chNum = 0u; chNum < ADC_SAR_TOTAL_CHANNELS_NUM; chNum++)
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 11


 291              		.loc 1 197 0 is_stmt 0 discriminator 1
 292 0140 FB68     		ldr	r3, [r7, #12]
 293 0142 002B     		cmp	r3, #0
 294 0144 A3D0     		beq	.L14
 278:.\Generated_Source\PSoC4/ADC_SAR.c ****     }
 279:.\Generated_Source\PSoC4/ADC_SAR.c **** }
 295              		.loc 1 279 0 is_stmt 1
 296 0146 BD46     		mov	sp, r7
 297 0148 05B0     		add	sp, sp, #20
 298              		@ sp needed
 299 014a 90BD     		pop	{r4, r7, pc}
 300              	.L16:
 301              		.align	2
 302              	.L15:
 303 014c 00000000 		.word	ADC_SAR_ISR
 304 0150 20003A40 		.word	1077542944
 305 0154 00003A40 		.word	1077542912
 306 0158 C0020051 		.word	1358955200
 307 015c 04003A40 		.word	1077542916
 308 0160 8C000080 		.word	-2147483508
 309 0164 18003A40 		.word	1077542936
 310 0168 0000FF07 		.word	134152192
 311 016c 1C003A40 		.word	1077542940
 312 0170 10003A40 		.word	1077542928
 313 0174 04000400 		.word	262148
 314 0178 14003A40 		.word	1077542932
 315 017c 00033A40 		.word	1077543680
 316 0180 28023A40 		.word	1077543464
 317 0184 38023A40 		.word	1077543480
 318 0188 18023A40 		.word	1077543448
 319 018c 30003A40 		.word	1077542960
 320 0190 FFFFFFDF 		.word	-536870913
 321 0194 80003A40 		.word	1077543040
 322 0198 00000000 		.word	ADC_SAR_offset
 323 019c 10270000 		.word	10000
 324 01a0 FF070000 		.word	2047
 325 01a4 00000000 		.word	ADC_SAR_countsPer10Volt
 326              		.cfi_endproc
 327              	.LFE3:
 328              		.size	ADC_SAR_Init, .-ADC_SAR_Init
 329              		.section	.text.ADC_SAR_Enable,"ax",%progbits
 330              		.align	2
 331              		.global	ADC_SAR_Enable
 332              		.code	16
 333              		.thumb_func
 334              		.type	ADC_SAR_Enable, %function
 335              	ADC_SAR_Enable:
 336              	.LFB4:
 280:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 281:.\Generated_Source\PSoC4/ADC_SAR.c **** /*******************************************************************************
 282:.\Generated_Source\PSoC4/ADC_SAR.c **** * Function Name: ADC_SAR_1_Enable
 283:.\Generated_Source\PSoC4/ADC_SAR.c **** ********************************************************************************
 284:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 285:.\Generated_Source\PSoC4/ADC_SAR.c **** * Summary:
 286:.\Generated_Source\PSoC4/ADC_SAR.c **** *  Enables the clock and analog power for SAR ADC.
 287:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 288:.\Generated_Source\PSoC4/ADC_SAR.c **** * Parameters:
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 12


 289:.\Generated_Source\PSoC4/ADC_SAR.c **** *  None.
 290:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 291:.\Generated_Source\PSoC4/ADC_SAR.c **** * Return:
 292:.\Generated_Source\PSoC4/ADC_SAR.c **** *  None.
 293:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 294:.\Generated_Source\PSoC4/ADC_SAR.c **** *******************************************************************************/
 295:.\Generated_Source\PSoC4/ADC_SAR.c **** void ADC_SAR_Enable(void)
 296:.\Generated_Source\PSoC4/ADC_SAR.c **** {
 337              		.loc 1 296 0
 338              		.cfi_startproc
 339 0000 80B5     		push	{r7, lr}
 340              		.cfi_def_cfa_offset 8
 341              		.cfi_offset 7, -8
 342              		.cfi_offset 14, -4
 343 0002 00AF     		add	r7, sp, #0
 344              		.cfi_def_cfa_register 7
 297:.\Generated_Source\PSoC4/ADC_SAR.c ****     if (0u == (ADC_SAR_SAR_CTRL_REG & ADC_SAR_ENABLE))
 345              		.loc 1 297 0
 346 0004 0A4B     		ldr	r3, .L20
 347 0006 1B68     		ldr	r3, [r3]
 348 0008 002B     		cmp	r3, #0
 349 000a 0EDB     		blt	.L17
 298:.\Generated_Source\PSoC4/ADC_SAR.c ****     {
 299:.\Generated_Source\PSoC4/ADC_SAR.c ****         #if(ADC_SAR_CY_SAR_IP_VER != ADC_SAR_CY_SAR_IP_PSOC4)
 300:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 301:.\Generated_Source\PSoC4/ADC_SAR.c ****             while (0u != (ADC_SAR_SAR_STATUS_REG & ADC_SAR_STATUS_BUSY))
 350              		.loc 1 301 0
 351 000c C046     		mov	r8, r8
 352              	.L19:
 353              		.loc 1 301 0 is_stmt 0 discriminator 1
 354 000e 094B     		ldr	r3, .L20+4
 355 0010 1B68     		ldr	r3, [r3]
 356 0012 002B     		cmp	r3, #0
 357 0014 FBDB     		blt	.L19
 302:.\Generated_Source\PSoC4/ADC_SAR.c ****             {
 303:.\Generated_Source\PSoC4/ADC_SAR.c ****                 /* wait for SAR to go idle for to avoid deadlock */
 304:.\Generated_Source\PSoC4/ADC_SAR.c ****             }
 305:.\Generated_Source\PSoC4/ADC_SAR.c ****         #endif /* (ADC_SAR_CY_SAR_IP_VER != ADC_SAR_CY_SAR_IP_PSOC4) */
 306:.\Generated_Source\PSoC4/ADC_SAR.c ****         
 307:.\Generated_Source\PSoC4/ADC_SAR.c ****         ADC_SAR_SAR_CTRL_REG |= ADC_SAR_ENABLE;
 358              		.loc 1 307 0 is_stmt 1
 359 0016 064B     		ldr	r3, .L20
 360 0018 054A     		ldr	r2, .L20
 361 001a 1268     		ldr	r2, [r2]
 362 001c 8021     		mov	r1, #128
 363 001e 0906     		lsl	r1, r1, #24
 364 0020 0A43     		orr	r2, r1
 365 0022 1A60     		str	r2, [r3]
 308:.\Generated_Source\PSoC4/ADC_SAR.c ****         
 309:.\Generated_Source\PSoC4/ADC_SAR.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
 310:.\Generated_Source\PSoC4/ADC_SAR.c ****         CyDelayUs(ADC_SAR_10US_DELAY);         
 366              		.loc 1 310 0
 367 0024 0A20     		mov	r0, #10
 368 0026 FFF7FEFF 		bl	CyDelayUs
 369              	.L17:
 311:.\Generated_Source\PSoC4/ADC_SAR.c ****     }
 312:.\Generated_Source\PSoC4/ADC_SAR.c **** }
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 13


 370              		.loc 1 312 0
 371 002a BD46     		mov	sp, r7
 372              		@ sp needed
 373 002c 80BD     		pop	{r7, pc}
 374              	.L21:
 375 002e C046     		.align	2
 376              	.L20:
 377 0030 00003A40 		.word	1077542912
 378 0034 08023A40 		.word	1077543432
 379              		.cfi_endproc
 380              	.LFE4:
 381              		.size	ADC_SAR_Enable, .-ADC_SAR_Enable
 382              		.section	.text.ADC_SAR_Stop,"ax",%progbits
 383              		.align	2
 384              		.global	ADC_SAR_Stop
 385              		.code	16
 386              		.thumb_func
 387              		.type	ADC_SAR_Stop, %function
 388              	ADC_SAR_Stop:
 389              	.LFB5:
 313:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 314:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 315:.\Generated_Source\PSoC4/ADC_SAR.c **** /*******************************************************************************
 316:.\Generated_Source\PSoC4/ADC_SAR.c **** * Function Name: ADC_SAR_Stop
 317:.\Generated_Source\PSoC4/ADC_SAR.c **** ********************************************************************************
 318:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 319:.\Generated_Source\PSoC4/ADC_SAR.c **** * Summary:
 320:.\Generated_Source\PSoC4/ADC_SAR.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 321:.\Generated_Source\PSoC4/ADC_SAR.c **** *  mode.
 322:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 323:.\Generated_Source\PSoC4/ADC_SAR.c **** * Parameters:
 324:.\Generated_Source\PSoC4/ADC_SAR.c **** *  None.
 325:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 326:.\Generated_Source\PSoC4/ADC_SAR.c **** * Return:
 327:.\Generated_Source\PSoC4/ADC_SAR.c **** *  None.
 328:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 329:.\Generated_Source\PSoC4/ADC_SAR.c **** *******************************************************************************/
 330:.\Generated_Source\PSoC4/ADC_SAR.c **** void ADC_SAR_Stop(void)
 331:.\Generated_Source\PSoC4/ADC_SAR.c **** {
 390              		.loc 1 331 0
 391              		.cfi_startproc
 392 0000 80B5     		push	{r7, lr}
 393              		.cfi_def_cfa_offset 8
 394              		.cfi_offset 7, -8
 395              		.cfi_offset 14, -4
 396 0002 00AF     		add	r7, sp, #0
 397              		.cfi_def_cfa_register 7
 332:.\Generated_Source\PSoC4/ADC_SAR.c ****     ADC_SAR_SAR_CTRL_REG &= (uint32)~ADC_SAR_ENABLE;
 398              		.loc 1 332 0
 399 0004 034B     		ldr	r3, .L23
 400 0006 034A     		ldr	r2, .L23
 401 0008 1268     		ldr	r2, [r2]
 402 000a 5200     		lsl	r2, r2, #1
 403 000c 5208     		lsr	r2, r2, #1
 404 000e 1A60     		str	r2, [r3]
 333:.\Generated_Source\PSoC4/ADC_SAR.c **** }
 405              		.loc 1 333 0
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 14


 406 0010 BD46     		mov	sp, r7
 407              		@ sp needed
 408 0012 80BD     		pop	{r7, pc}
 409              	.L24:
 410              		.align	2
 411              	.L23:
 412 0014 00003A40 		.word	1077542912
 413              		.cfi_endproc
 414              	.LFE5:
 415              		.size	ADC_SAR_Stop, .-ADC_SAR_Stop
 416              		.section	.text.ADC_SAR_StartConvert,"ax",%progbits
 417              		.align	2
 418              		.global	ADC_SAR_StartConvert
 419              		.code	16
 420              		.thumb_func
 421              		.type	ADC_SAR_StartConvert, %function
 422              	ADC_SAR_StartConvert:
 423              	.LFB6:
 334:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 335:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 336:.\Generated_Source\PSoC4/ADC_SAR.c **** /*******************************************************************************
 337:.\Generated_Source\PSoC4/ADC_SAR.c **** * Function Name: ADC_SAR_StartConvert
 338:.\Generated_Source\PSoC4/ADC_SAR.c **** ********************************************************************************
 339:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 340:.\Generated_Source\PSoC4/ADC_SAR.c **** * Summary:
 341:.\Generated_Source\PSoC4/ADC_SAR.c **** *  Description:
 342:.\Generated_Source\PSoC4/ADC_SAR.c **** *  For free running mode, this API starts the conversion process and it
 343:.\Generated_Source\PSoC4/ADC_SAR.c **** *  runs continuously.
 344:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 345:.\Generated_Source\PSoC4/ADC_SAR.c **** *  In a triggered mode, this routine triggers every conversion by
 346:.\Generated_Source\PSoC4/ADC_SAR.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 347:.\Generated_Source\PSoC4/ADC_SAR.c **** *  every conversion has to start by this API.
 348:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 349:.\Generated_Source\PSoC4/ADC_SAR.c **** * Parameters:
 350:.\Generated_Source\PSoC4/ADC_SAR.c **** *  None.
 351:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 352:.\Generated_Source\PSoC4/ADC_SAR.c **** * Return:
 353:.\Generated_Source\PSoC4/ADC_SAR.c **** *  None.
 354:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 355:.\Generated_Source\PSoC4/ADC_SAR.c **** *******************************************************************************/
 356:.\Generated_Source\PSoC4/ADC_SAR.c **** void ADC_SAR_StartConvert(void)
 357:.\Generated_Source\PSoC4/ADC_SAR.c **** {
 424              		.loc 1 357 0
 425              		.cfi_startproc
 426 0000 80B5     		push	{r7, lr}
 427              		.cfi_def_cfa_offset 8
 428              		.cfi_offset 7, -8
 429              		.cfi_offset 14, -4
 430 0002 00AF     		add	r7, sp, #0
 431              		.cfi_def_cfa_register 7
 358:.\Generated_Source\PSoC4/ADC_SAR.c ****     #if(ADC_SAR_DEFAULT_SAMPLE_MODE_SEL == ADC_SAR__FREERUNNING)
 359:.\Generated_Source\PSoC4/ADC_SAR.c ****         ADC_SAR_SAR_SAMPLE_CTRL_REG |= ADC_SAR_CONTINUOUS_EN;
 432              		.loc 1 359 0
 433 0004 044B     		ldr	r3, .L26
 434 0006 044A     		ldr	r2, .L26
 435 0008 1268     		ldr	r2, [r2]
 436 000a 8021     		mov	r1, #128
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 15


 437 000c 4902     		lsl	r1, r1, #9
 438 000e 0A43     		orr	r2, r1
 439 0010 1A60     		str	r2, [r3]
 360:.\Generated_Source\PSoC4/ADC_SAR.c ****     #else /* Firmware trigger */
 361:.\Generated_Source\PSoC4/ADC_SAR.c ****         ADC_SAR_SAR_START_CTRL_REG = ADC_SAR_FW_TRIGGER;
 362:.\Generated_Source\PSoC4/ADC_SAR.c ****     #endif /* End ADC_SAR_DEFAULT_SAMPLE_MODE == ADC_SAR__FREERUNNING */
 363:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 364:.\Generated_Source\PSoC4/ADC_SAR.c **** }
 440              		.loc 1 364 0
 441 0012 BD46     		mov	sp, r7
 442              		@ sp needed
 443 0014 80BD     		pop	{r7, pc}
 444              	.L27:
 445 0016 C046     		.align	2
 446              	.L26:
 447 0018 04003A40 		.word	1077542916
 448              		.cfi_endproc
 449              	.LFE6:
 450              		.size	ADC_SAR_StartConvert, .-ADC_SAR_StartConvert
 451              		.section	.text.ADC_SAR_StopConvert,"ax",%progbits
 452              		.align	2
 453              		.global	ADC_SAR_StopConvert
 454              		.code	16
 455              		.thumb_func
 456              		.type	ADC_SAR_StopConvert, %function
 457              	ADC_SAR_StopConvert:
 458              	.LFB7:
 365:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 366:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 367:.\Generated_Source\PSoC4/ADC_SAR.c **** /*******************************************************************************
 368:.\Generated_Source\PSoC4/ADC_SAR.c **** * Function Name: ADC_SAR_StopConvert
 369:.\Generated_Source\PSoC4/ADC_SAR.c **** ********************************************************************************
 370:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 371:.\Generated_Source\PSoC4/ADC_SAR.c **** * Summary:
 372:.\Generated_Source\PSoC4/ADC_SAR.c **** *  Forces the ADC to stop all conversions.
 373:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 374:.\Generated_Source\PSoC4/ADC_SAR.c **** * Parameters:
 375:.\Generated_Source\PSoC4/ADC_SAR.c **** *  None.
 376:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 377:.\Generated_Source\PSoC4/ADC_SAR.c **** * Return:
 378:.\Generated_Source\PSoC4/ADC_SAR.c **** *  None.
 379:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 380:.\Generated_Source\PSoC4/ADC_SAR.c **** *******************************************************************************/
 381:.\Generated_Source\PSoC4/ADC_SAR.c **** void ADC_SAR_StopConvert(void)
 382:.\Generated_Source\PSoC4/ADC_SAR.c **** {
 459              		.loc 1 382 0
 460              		.cfi_startproc
 461 0000 80B5     		push	{r7, lr}
 462              		.cfi_def_cfa_offset 8
 463              		.cfi_offset 7, -8
 464              		.cfi_offset 14, -4
 465 0002 00AF     		add	r7, sp, #0
 466              		.cfi_def_cfa_register 7
 383:.\Generated_Source\PSoC4/ADC_SAR.c ****     #if(ADC_SAR_DEFAULT_SAMPLE_MODE_SEL == ADC_SAR__FREERUNNING)
 384:.\Generated_Source\PSoC4/ADC_SAR.c ****         ADC_SAR_SAR_SAMPLE_CTRL_REG &= (uint32)(~ADC_SAR_CONTINUOUS_EN);
 467              		.loc 1 384 0
 468 0004 034B     		ldr	r3, .L29
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 16


 469 0006 034A     		ldr	r2, .L29
 470 0008 1168     		ldr	r1, [r2]
 471 000a 034A     		ldr	r2, .L29+4
 472 000c 0A40     		and	r2, r1
 473 000e 1A60     		str	r2, [r3]
 385:.\Generated_Source\PSoC4/ADC_SAR.c ****     #endif /* ADC_SAR_DEFAULT_SAMPLE_MODE == ADC_SAR__FREERUNNING */
 386:.\Generated_Source\PSoC4/ADC_SAR.c **** }
 474              		.loc 1 386 0
 475 0010 BD46     		mov	sp, r7
 476              		@ sp needed
 477 0012 80BD     		pop	{r7, pc}
 478              	.L30:
 479              		.align	2
 480              	.L29:
 481 0014 04003A40 		.word	1077542916
 482 0018 FFFFFEFF 		.word	-65537
 483              		.cfi_endproc
 484              	.LFE7:
 485              		.size	ADC_SAR_StopConvert, .-ADC_SAR_StopConvert
 486              		.section	.text.ADC_SAR_IsEndConversion,"ax",%progbits
 487              		.align	2
 488              		.global	ADC_SAR_IsEndConversion
 489              		.code	16
 490              		.thumb_func
 491              		.type	ADC_SAR_IsEndConversion, %function
 492              	ADC_SAR_IsEndConversion:
 493              	.LFB8:
 387:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 388:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 389:.\Generated_Source\PSoC4/ADC_SAR.c **** /*******************************************************************************
 390:.\Generated_Source\PSoC4/ADC_SAR.c **** * Function Name: ADC_SAR_IsEndConversion
 391:.\Generated_Source\PSoC4/ADC_SAR.c **** ********************************************************************************
 392:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 393:.\Generated_Source\PSoC4/ADC_SAR.c **** * Summary:
 394:.\Generated_Source\PSoC4/ADC_SAR.c **** *  Description: Checks for ADC end of conversion for the case one
 395:.\Generated_Source\PSoC4/ADC_SAR.c **** *  channel and end of scan for the case of multiple channels. It acts
 396:.\Generated_Source\PSoC4/ADC_SAR.c **** *  as a software version of the EOC. This function provides the
 397:.\Generated_Source\PSoC4/ADC_SAR.c **** *  programmer with two options. In one mode this function
 398:.\Generated_Source\PSoC4/ADC_SAR.c **** *  immediately returns with the conversion status. In the other mode,
 399:.\Generated_Source\PSoC4/ADC_SAR.c **** *  the function does not return (blocking) until the conversion has
 400:.\Generated_Source\PSoC4/ADC_SAR.c **** *  completed.
 401:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 402:.\Generated_Source\PSoC4/ADC_SAR.c **** * Parameters:
 403:.\Generated_Source\PSoC4/ADC_SAR.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 404:.\Generated_Source\PSoC4/ADC_SAR.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 405:.\Generated_Source\PSoC4/ADC_SAR.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 406:.\Generated_Source\PSoC4/ADC_SAR.c **** *                              for injection channel
 407:.\Generated_Source\PSoC4/ADC_SAR.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 408:.\Generated_Source\PSoC4/ADC_SAR.c **** *                              channel conversion
 409:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 410:.\Generated_Source\PSoC4/ADC_SAR.c **** * Return:
 411:.\Generated_Source\PSoC4/ADC_SAR.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 412:.\Generated_Source\PSoC4/ADC_SAR.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 413:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 414:.\Generated_Source\PSoC4/ADC_SAR.c **** *******************************************************************************/
 415:.\Generated_Source\PSoC4/ADC_SAR.c **** uint32 ADC_SAR_IsEndConversion(uint32 retMode)
 416:.\Generated_Source\PSoC4/ADC_SAR.c **** {
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 17


 494              		.loc 1 416 0
 495              		.cfi_startproc
 496 0000 80B5     		push	{r7, lr}
 497              		.cfi_def_cfa_offset 8
 498              		.cfi_offset 7, -8
 499              		.cfi_offset 14, -4
 500 0002 84B0     		sub	sp, sp, #16
 501              		.cfi_def_cfa_offset 24
 502 0004 00AF     		add	r7, sp, #0
 503              		.cfi_def_cfa_register 7
 504 0006 7860     		str	r0, [r7, #4]
 417:.\Generated_Source\PSoC4/ADC_SAR.c ****     uint32 status = 0u;
 505              		.loc 1 417 0
 506 0008 0023     		mov	r3, #0
 507 000a FB60     		str	r3, [r7, #12]
 418:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 419:.\Generated_Source\PSoC4/ADC_SAR.c ****     if((retMode & (ADC_SAR_RETURN_STATUS | ADC_SAR_WAIT_FOR_RESULT)) != 0u)
 508              		.loc 1 419 0
 509 000c 7A68     		ldr	r2, [r7, #4]
 510 000e 0323     		mov	r3, #3
 511 0010 1340     		and	r3, r2
 512 0012 11D0     		beq	.L32
 513              	.L34:
 420:.\Generated_Source\PSoC4/ADC_SAR.c ****     {
 421:.\Generated_Source\PSoC4/ADC_SAR.c ****         do
 422:.\Generated_Source\PSoC4/ADC_SAR.c ****         {
 423:.\Generated_Source\PSoC4/ADC_SAR.c ****             status = ADC_SAR_SAR_INTR_REG & ADC_SAR_EOS_MASK;
 514              		.loc 1 423 0 discriminator 1
 515 0014 0B4B     		ldr	r3, .L36
 516 0016 1A68     		ldr	r2, [r3]
 517 0018 0123     		mov	r3, #1
 518 001a 1340     		and	r3, r2
 519 001c FB60     		str	r3, [r7, #12]
 424:.\Generated_Source\PSoC4/ADC_SAR.c ****         }while((status == 0u) && ((retMode & ADC_SAR_WAIT_FOR_RESULT) != 0u));
 520              		.loc 1 424 0 discriminator 1
 521 001e FB68     		ldr	r3, [r7, #12]
 522 0020 002B     		cmp	r3, #0
 523 0022 03D1     		bne	.L33
 524 0024 7A68     		ldr	r2, [r7, #4]
 525 0026 0223     		mov	r3, #2
 526 0028 1340     		and	r3, r2
 527 002a F3D1     		bne	.L34
 528              	.L33:
 425:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 426:.\Generated_Source\PSoC4/ADC_SAR.c ****         if(status != 0u)
 529              		.loc 1 426 0
 530 002c FB68     		ldr	r3, [r7, #12]
 531 002e 002B     		cmp	r3, #0
 532 0030 02D0     		beq	.L32
 427:.\Generated_Source\PSoC4/ADC_SAR.c ****         {
 428:.\Generated_Source\PSoC4/ADC_SAR.c ****             /* Clear EOS bit */
 429:.\Generated_Source\PSoC4/ADC_SAR.c ****             ADC_SAR_SAR_INTR_REG = ADC_SAR_EOS_MASK;
 533              		.loc 1 429 0
 534 0032 044B     		ldr	r3, .L36
 535 0034 0122     		mov	r2, #1
 536 0036 1A60     		str	r2, [r3]
 537              	.L32:
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 18


 430:.\Generated_Source\PSoC4/ADC_SAR.c ****         }
 431:.\Generated_Source\PSoC4/ADC_SAR.c ****     }
 432:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 433:.\Generated_Source\PSoC4/ADC_SAR.c ****     #if(ADC_SAR_INJ_CHANNEL_ENABLED)
 434:.\Generated_Source\PSoC4/ADC_SAR.c ****         if((retMode & (ADC_SAR_RETURN_STATUS_INJ | ADC_SAR_WAIT_FOR_RESULT_INJ)) != 0u)
 435:.\Generated_Source\PSoC4/ADC_SAR.c ****         {
 436:.\Generated_Source\PSoC4/ADC_SAR.c ****             do
 437:.\Generated_Source\PSoC4/ADC_SAR.c ****             {
 438:.\Generated_Source\PSoC4/ADC_SAR.c ****                 status |= ADC_SAR_SAR_INTR_REG & ADC_SAR_INJ_EOC_MASK;
 439:.\Generated_Source\PSoC4/ADC_SAR.c ****             }while(((status & ADC_SAR_INJ_EOC_MASK) == 0u) &&
 440:.\Generated_Source\PSoC4/ADC_SAR.c ****                    ((retMode & ADC_SAR_WAIT_FOR_RESULT_INJ) != 0u));
 441:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 442:.\Generated_Source\PSoC4/ADC_SAR.c ****             if((status & ADC_SAR_INJ_EOC_MASK) != 0u)
 443:.\Generated_Source\PSoC4/ADC_SAR.c ****             {
 444:.\Generated_Source\PSoC4/ADC_SAR.c ****                 /* Clear Injection EOS bit */
 445:.\Generated_Source\PSoC4/ADC_SAR.c ****                 ADC_SAR_SAR_INTR_REG = ADC_SAR_INJ_EOC_MASK;
 446:.\Generated_Source\PSoC4/ADC_SAR.c ****             }
 447:.\Generated_Source\PSoC4/ADC_SAR.c ****         }
 448:.\Generated_Source\PSoC4/ADC_SAR.c ****     #endif /* ADC_SAR_INJ_CHANNEL_ENABLED */
 449:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 450:.\Generated_Source\PSoC4/ADC_SAR.c ****     return (status);
 538              		.loc 1 450 0
 539 0038 FB68     		ldr	r3, [r7, #12]
 451:.\Generated_Source\PSoC4/ADC_SAR.c **** }
 540              		.loc 1 451 0
 541 003a 181C     		mov	r0, r3
 542 003c BD46     		mov	sp, r7
 543 003e 04B0     		add	sp, sp, #16
 544              		@ sp needed
 545 0040 80BD     		pop	{r7, pc}
 546              	.L37:
 547 0042 C046     		.align	2
 548              	.L36:
 549 0044 10023A40 		.word	1077543440
 550              		.cfi_endproc
 551              	.LFE8:
 552              		.size	ADC_SAR_IsEndConversion, .-ADC_SAR_IsEndConversion
 553              		.section	.text.ADC_SAR_GetResult16,"ax",%progbits
 554              		.align	2
 555              		.global	ADC_SAR_GetResult16
 556              		.code	16
 557              		.thumb_func
 558              		.type	ADC_SAR_GetResult16, %function
 559              	ADC_SAR_GetResult16:
 560              	.LFB9:
 452:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 453:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 454:.\Generated_Source\PSoC4/ADC_SAR.c **** /*******************************************************************************
 455:.\Generated_Source\PSoC4/ADC_SAR.c **** * Function Name: ADC_SAR_GetResult16
 456:.\Generated_Source\PSoC4/ADC_SAR.c **** ********************************************************************************
 457:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 458:.\Generated_Source\PSoC4/ADC_SAR.c **** * Summary:
 459:.\Generated_Source\PSoC4/ADC_SAR.c **** *  Gets the data available in the SAR DATA register.
 460:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 461:.\Generated_Source\PSoC4/ADC_SAR.c **** * Parameters:
 462:.\Generated_Source\PSoC4/ADC_SAR.c **** *  chan: The ADC channel in which to return the result. The first channel
 463:.\Generated_Source\PSoC4/ADC_SAR.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 19


 464:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 465:.\Generated_Source\PSoC4/ADC_SAR.c **** * Return:
 466:.\Generated_Source\PSoC4/ADC_SAR.c **** *  Returns converted data as a signed 16-bit integer
 467:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 468:.\Generated_Source\PSoC4/ADC_SAR.c **** *******************************************************************************/
 469:.\Generated_Source\PSoC4/ADC_SAR.c **** int16 ADC_SAR_GetResult16(uint32 chan)
 470:.\Generated_Source\PSoC4/ADC_SAR.c **** {
 561              		.loc 1 470 0
 562              		.cfi_startproc
 563 0000 80B5     		push	{r7, lr}
 564              		.cfi_def_cfa_offset 8
 565              		.cfi_offset 7, -8
 566              		.cfi_offset 14, -4
 567 0002 84B0     		sub	sp, sp, #16
 568              		.cfi_def_cfa_offset 24
 569 0004 00AF     		add	r7, sp, #0
 570              		.cfi_def_cfa_register 7
 571 0006 7860     		str	r0, [r7, #4]
 471:.\Generated_Source\PSoC4/ADC_SAR.c ****     uint32 result;
 472:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 473:.\Generated_Source\PSoC4/ADC_SAR.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 474:.\Generated_Source\PSoC4/ADC_SAR.c ****     CYASSERT(chan < ADC_SAR_TOTAL_CHANNELS_NUM);
 572              		.loc 1 474 0
 573 0008 7B68     		ldr	r3, [r7, #4]
 574 000a 002B     		cmp	r3, #0
 575 000c 02D0     		beq	.L39
 576              		.loc 1 474 0 is_stmt 0 discriminator 1
 577 000e 0020     		mov	r0, #0
 578 0010 FFF7FEFF 		bl	CyHalt
 579              	.L39:
 475:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 476:.\Generated_Source\PSoC4/ADC_SAR.c ****     if(chan < ADC_SAR_SEQUENCED_CHANNELS_NUM)
 580              		.loc 1 476 0 is_stmt 1
 581 0014 7B68     		ldr	r3, [r7, #4]
 582 0016 002B     		cmp	r3, #0
 583 0018 08D1     		bne	.L40
 477:.\Generated_Source\PSoC4/ADC_SAR.c ****     {
 478:.\Generated_Source\PSoC4/ADC_SAR.c ****         result = CY_GET_REG32((reg32 *)(ADC_SAR_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) &
 584              		.loc 1 478 0
 585 001a 7B68     		ldr	r3, [r7, #4]
 586 001c 9B00     		lsl	r3, r3, #2
 587 001e 084A     		ldr	r2, .L43
 588 0020 9B18     		add	r3, r3, r2
 589 0022 1B68     		ldr	r3, [r3]
 590 0024 1B04     		lsl	r3, r3, #16
 591 0026 1B0C     		lsr	r3, r3, #16
 592 0028 FB60     		str	r3, [r7, #12]
 593 002a 01E0     		b	.L41
 594              	.L40:
 479:.\Generated_Source\PSoC4/ADC_SAR.c ****                 ADC_SAR_RESULT_MASK;
 480:.\Generated_Source\PSoC4/ADC_SAR.c ****     }
 481:.\Generated_Source\PSoC4/ADC_SAR.c ****     else
 482:.\Generated_Source\PSoC4/ADC_SAR.c ****     {
 483:.\Generated_Source\PSoC4/ADC_SAR.c ****         #if(ADC_SAR_INJ_CHANNEL_ENABLED)
 484:.\Generated_Source\PSoC4/ADC_SAR.c ****             result = ADC_SAR_SAR_INJ_RESULT_REG & ADC_SAR_RESULT_MASK;
 485:.\Generated_Source\PSoC4/ADC_SAR.c ****         #else
 486:.\Generated_Source\PSoC4/ADC_SAR.c ****             result = 0u;
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 20


 595              		.loc 1 486 0
 596 002c 0023     		mov	r3, #0
 597 002e FB60     		str	r3, [r7, #12]
 598              	.L41:
 487:.\Generated_Source\PSoC4/ADC_SAR.c ****         #endif /* ADC_SAR_INJ_CHANNEL_ENABLED */
 488:.\Generated_Source\PSoC4/ADC_SAR.c ****     }
 489:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 490:.\Generated_Source\PSoC4/ADC_SAR.c ****     return ( (int16)result );
 599              		.loc 1 490 0
 600 0030 FB68     		ldr	r3, [r7, #12]
 601 0032 9BB2     		uxth	r3, r3
 602 0034 1BB2     		sxth	r3, r3
 491:.\Generated_Source\PSoC4/ADC_SAR.c **** }
 603              		.loc 1 491 0
 604 0036 181C     		mov	r0, r3
 605 0038 BD46     		mov	sp, r7
 606 003a 04B0     		add	sp, sp, #16
 607              		@ sp needed
 608 003c 80BD     		pop	{r7, pc}
 609              	.L44:
 610 003e C046     		.align	2
 611              	.L43:
 612 0040 80013A40 		.word	1077543296
 613              		.cfi_endproc
 614              	.LFE9:
 615              		.size	ADC_SAR_GetResult16, .-ADC_SAR_GetResult16
 616              		.section	.text.ADC_SAR_SetChanMask,"ax",%progbits
 617              		.align	2
 618              		.global	ADC_SAR_SetChanMask
 619              		.code	16
 620              		.thumb_func
 621              		.type	ADC_SAR_SetChanMask, %function
 622              	ADC_SAR_SetChanMask:
 623              	.LFB10:
 492:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 493:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 494:.\Generated_Source\PSoC4/ADC_SAR.c **** /*******************************************************************************
 495:.\Generated_Source\PSoC4/ADC_SAR.c **** * Function Name: ADC_SAR_SetChanMask
 496:.\Generated_Source\PSoC4/ADC_SAR.c **** ********************************************************************************
 497:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 498:.\Generated_Source\PSoC4/ADC_SAR.c **** * Summary:
 499:.\Generated_Source\PSoC4/ADC_SAR.c **** *  Sets the channel enable mask.
 500:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 501:.\Generated_Source\PSoC4/ADC_SAR.c **** * Parameters:
 502:.\Generated_Source\PSoC4/ADC_SAR.c **** *  mask: Sets which channels that will be
 503:.\Generated_Source\PSoC4/ADC_SAR.c **** *  scanned. Setting bits for channels that do not exist will have no
 504:.\Generated_Source\PSoC4/ADC_SAR.c **** *  effect. For example, if only 6 channels were enabled, setting a
 505:.\Generated_Source\PSoC4/ADC_SAR.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 506:.\Generated_Source\PSoC4/ADC_SAR.c **** *  This API will not enable the injection channel.
 507:.\Generated_Source\PSoC4/ADC_SAR.c **** *  Examples: If the component is setup to sequence through 8
 508:.\Generated_Source\PSoC4/ADC_SAR.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 509:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 510:.\Generated_Source\PSoC4/ADC_SAR.c **** * Return:
 511:.\Generated_Source\PSoC4/ADC_SAR.c **** *  None.
 512:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 513:.\Generated_Source\PSoC4/ADC_SAR.c **** *******************************************************************************/
 514:.\Generated_Source\PSoC4/ADC_SAR.c **** void ADC_SAR_SetChanMask(uint32 mask)
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 21


 515:.\Generated_Source\PSoC4/ADC_SAR.c **** {
 624              		.loc 1 515 0
 625              		.cfi_startproc
 626 0000 80B5     		push	{r7, lr}
 627              		.cfi_def_cfa_offset 8
 628              		.cfi_offset 7, -8
 629              		.cfi_offset 14, -4
 630 0002 82B0     		sub	sp, sp, #8
 631              		.cfi_def_cfa_offset 16
 632 0004 00AF     		add	r7, sp, #0
 633              		.cfi_def_cfa_register 7
 634 0006 7860     		str	r0, [r7, #4]
 516:.\Generated_Source\PSoC4/ADC_SAR.c ****     ADC_SAR_SAR_CHAN_EN_REG = mask & ADC_SAR_MAX_CHANNELS_EN_MASK;
 635              		.loc 1 516 0
 636 0008 034B     		ldr	r3, .L46
 637 000a 7968     		ldr	r1, [r7, #4]
 638 000c 0122     		mov	r2, #1
 639 000e 0A40     		and	r2, r1
 640 0010 1A60     		str	r2, [r3]
 517:.\Generated_Source\PSoC4/ADC_SAR.c **** }
 641              		.loc 1 517 0
 642 0012 BD46     		mov	sp, r7
 643 0014 02B0     		add	sp, sp, #8
 644              		@ sp needed
 645 0016 80BD     		pop	{r7, pc}
 646              	.L47:
 647              		.align	2
 648              	.L46:
 649 0018 20003A40 		.word	1077542944
 650              		.cfi_endproc
 651              	.LFE10:
 652              		.size	ADC_SAR_SetChanMask, .-ADC_SAR_SetChanMask
 653              		.section	.text.ADC_SAR_SetLowLimit,"ax",%progbits
 654              		.align	2
 655              		.global	ADC_SAR_SetLowLimit
 656              		.code	16
 657              		.thumb_func
 658              		.type	ADC_SAR_SetLowLimit, %function
 659              	ADC_SAR_SetLowLimit:
 660              	.LFB11:
 518:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 519:.\Generated_Source\PSoC4/ADC_SAR.c **** #if(ADC_SAR_INJ_CHANNEL_ENABLED)
 520:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 521:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 522:.\Generated_Source\PSoC4/ADC_SAR.c ****     /*******************************************************************************
 523:.\Generated_Source\PSoC4/ADC_SAR.c ****     * Function Name: ADC_SAR_EnableInjection
 524:.\Generated_Source\PSoC4/ADC_SAR.c ****     ********************************************************************************
 525:.\Generated_Source\PSoC4/ADC_SAR.c ****     *
 526:.\Generated_Source\PSoC4/ADC_SAR.c ****     * Summary:
 527:.\Generated_Source\PSoC4/ADC_SAR.c ****     *  Enables the injection channel for the next scan only.
 528:.\Generated_Source\PSoC4/ADC_SAR.c ****     *
 529:.\Generated_Source\PSoC4/ADC_SAR.c ****     * Parameters:
 530:.\Generated_Source\PSoC4/ADC_SAR.c ****     *  None.
 531:.\Generated_Source\PSoC4/ADC_SAR.c ****     *
 532:.\Generated_Source\PSoC4/ADC_SAR.c ****     * Return:
 533:.\Generated_Source\PSoC4/ADC_SAR.c ****     *  None.
 534:.\Generated_Source\PSoC4/ADC_SAR.c ****     *
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 22


 535:.\Generated_Source\PSoC4/ADC_SAR.c ****     *******************************************************************************/
 536:.\Generated_Source\PSoC4/ADC_SAR.c ****     void ADC_SAR_EnableInjection(void)
 537:.\Generated_Source\PSoC4/ADC_SAR.c ****     {
 538:.\Generated_Source\PSoC4/ADC_SAR.c ****         ADC_SAR_SAR_INJ_CHAN_CONFIG_REG |= ADC_SAR_INJ_CHAN_EN;
 539:.\Generated_Source\PSoC4/ADC_SAR.c ****     }
 540:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 541:.\Generated_Source\PSoC4/ADC_SAR.c **** #endif /* ADC_SAR_INJ_CHANNEL_ENABLED */
 542:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 543:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 544:.\Generated_Source\PSoC4/ADC_SAR.c **** /*******************************************************************************
 545:.\Generated_Source\PSoC4/ADC_SAR.c **** * Function Name: ADC_SAR_SetLowLimit
 546:.\Generated_Source\PSoC4/ADC_SAR.c **** ********************************************************************************
 547:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 548:.\Generated_Source\PSoC4/ADC_SAR.c **** * Summary:
 549:.\Generated_Source\PSoC4/ADC_SAR.c **** *  Sets the low limit parameter for a limit condition.
 550:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 551:.\Generated_Source\PSoC4/ADC_SAR.c **** * Parameters:
 552:.\Generated_Source\PSoC4/ADC_SAR.c **** *  lowLimit: The low limit for a limit condition.
 553:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 554:.\Generated_Source\PSoC4/ADC_SAR.c **** * Return:
 555:.\Generated_Source\PSoC4/ADC_SAR.c **** *  None.
 556:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 557:.\Generated_Source\PSoC4/ADC_SAR.c **** *******************************************************************************/
 558:.\Generated_Source\PSoC4/ADC_SAR.c **** void ADC_SAR_SetLowLimit(uint32 lowLimit)
 559:.\Generated_Source\PSoC4/ADC_SAR.c **** {
 661              		.loc 1 559 0
 662              		.cfi_startproc
 663 0000 80B5     		push	{r7, lr}
 664              		.cfi_def_cfa_offset 8
 665              		.cfi_offset 7, -8
 666              		.cfi_offset 14, -4
 667 0002 82B0     		sub	sp, sp, #8
 668              		.cfi_def_cfa_offset 16
 669 0004 00AF     		add	r7, sp, #0
 670              		.cfi_def_cfa_register 7
 671 0006 7860     		str	r0, [r7, #4]
 560:.\Generated_Source\PSoC4/ADC_SAR.c ****     ADC_SAR_SAR_RANGE_THRES_REG &= (uint32)(~ADC_SAR_RANGE_LOW_MASK);
 672              		.loc 1 560 0
 673 0008 084B     		ldr	r3, .L49
 674 000a 084A     		ldr	r2, .L49
 675 000c 1268     		ldr	r2, [r2]
 676 000e 120C     		lsr	r2, r2, #16
 677 0010 1204     		lsl	r2, r2, #16
 678 0012 1A60     		str	r2, [r3]
 561:.\Generated_Source\PSoC4/ADC_SAR.c ****     ADC_SAR_SAR_RANGE_THRES_REG |= lowLimit & ADC_SAR_RANGE_LOW_MASK;
 679              		.loc 1 561 0
 680 0014 054B     		ldr	r3, .L49
 681 0016 054A     		ldr	r2, .L49
 682 0018 1168     		ldr	r1, [r2]
 683 001a 7A68     		ldr	r2, [r7, #4]
 684 001c 1204     		lsl	r2, r2, #16
 685 001e 120C     		lsr	r2, r2, #16
 686 0020 0A43     		orr	r2, r1
 687 0022 1A60     		str	r2, [r3]
 562:.\Generated_Source\PSoC4/ADC_SAR.c **** }
 688              		.loc 1 562 0
 689 0024 BD46     		mov	sp, r7
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 23


 690 0026 02B0     		add	sp, sp, #8
 691              		@ sp needed
 692 0028 80BD     		pop	{r7, pc}
 693              	.L50:
 694 002a C046     		.align	2
 695              	.L49:
 696 002c 18003A40 		.word	1077542936
 697              		.cfi_endproc
 698              	.LFE11:
 699              		.size	ADC_SAR_SetLowLimit, .-ADC_SAR_SetLowLimit
 700              		.section	.text.ADC_SAR_SetHighLimit,"ax",%progbits
 701              		.align	2
 702              		.global	ADC_SAR_SetHighLimit
 703              		.code	16
 704              		.thumb_func
 705              		.type	ADC_SAR_SetHighLimit, %function
 706              	ADC_SAR_SetHighLimit:
 707              	.LFB12:
 563:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 564:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 565:.\Generated_Source\PSoC4/ADC_SAR.c **** /*******************************************************************************
 566:.\Generated_Source\PSoC4/ADC_SAR.c **** * Function Name: ADC_SAR_SetHighLimit
 567:.\Generated_Source\PSoC4/ADC_SAR.c **** ********************************************************************************
 568:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 569:.\Generated_Source\PSoC4/ADC_SAR.c **** * Summary:
 570:.\Generated_Source\PSoC4/ADC_SAR.c **** *  Sets the low limit parameter for a limit condition.
 571:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 572:.\Generated_Source\PSoC4/ADC_SAR.c **** * Parameters:
 573:.\Generated_Source\PSoC4/ADC_SAR.c **** *  highLimit: The high limit for a limit condition.
 574:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 575:.\Generated_Source\PSoC4/ADC_SAR.c **** * Return:
 576:.\Generated_Source\PSoC4/ADC_SAR.c **** *  None.
 577:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 578:.\Generated_Source\PSoC4/ADC_SAR.c **** *******************************************************************************/
 579:.\Generated_Source\PSoC4/ADC_SAR.c **** void ADC_SAR_SetHighLimit(uint32 highLimit)
 580:.\Generated_Source\PSoC4/ADC_SAR.c **** {
 708              		.loc 1 580 0
 709              		.cfi_startproc
 710 0000 80B5     		push	{r7, lr}
 711              		.cfi_def_cfa_offset 8
 712              		.cfi_offset 7, -8
 713              		.cfi_offset 14, -4
 714 0002 82B0     		sub	sp, sp, #8
 715              		.cfi_def_cfa_offset 16
 716 0004 00AF     		add	r7, sp, #0
 717              		.cfi_def_cfa_register 7
 718 0006 7860     		str	r0, [r7, #4]
 581:.\Generated_Source\PSoC4/ADC_SAR.c ****     ADC_SAR_SAR_RANGE_THRES_REG &= (uint32)(~ADC_SAR_RANGE_HIGH_MASK);
 719              		.loc 1 581 0
 720 0008 074B     		ldr	r3, .L52
 721 000a 074A     		ldr	r2, .L52
 722 000c 1268     		ldr	r2, [r2]
 723 000e 1204     		lsl	r2, r2, #16
 724 0010 120C     		lsr	r2, r2, #16
 725 0012 1A60     		str	r2, [r3]
 582:.\Generated_Source\PSoC4/ADC_SAR.c ****     ADC_SAR_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_SAR_RANGE_HIGH_OFFSET);
 726              		.loc 1 582 0
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 24


 727 0014 044B     		ldr	r3, .L52
 728 0016 044A     		ldr	r2, .L52
 729 0018 1168     		ldr	r1, [r2]
 730 001a 7A68     		ldr	r2, [r7, #4]
 731 001c 1204     		lsl	r2, r2, #16
 732 001e 0A43     		orr	r2, r1
 733 0020 1A60     		str	r2, [r3]
 583:.\Generated_Source\PSoC4/ADC_SAR.c **** }
 734              		.loc 1 583 0
 735 0022 BD46     		mov	sp, r7
 736 0024 02B0     		add	sp, sp, #8
 737              		@ sp needed
 738 0026 80BD     		pop	{r7, pc}
 739              	.L53:
 740              		.align	2
 741              	.L52:
 742 0028 18003A40 		.word	1077542936
 743              		.cfi_endproc
 744              	.LFE12:
 745              		.size	ADC_SAR_SetHighLimit, .-ADC_SAR_SetHighLimit
 746              		.section	.text.ADC_SAR_SetLimitMask,"ax",%progbits
 747              		.align	2
 748              		.global	ADC_SAR_SetLimitMask
 749              		.code	16
 750              		.thumb_func
 751              		.type	ADC_SAR_SetLimitMask, %function
 752              	ADC_SAR_SetLimitMask:
 753              	.LFB13:
 584:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 585:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 586:.\Generated_Source\PSoC4/ADC_SAR.c **** /*******************************************************************************
 587:.\Generated_Source\PSoC4/ADC_SAR.c **** * Function Name: ADC_SAR_SetLimitMask
 588:.\Generated_Source\PSoC4/ADC_SAR.c **** ********************************************************************************
 589:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 590:.\Generated_Source\PSoC4/ADC_SAR.c **** * Summary:
 591:.\Generated_Source\PSoC4/ADC_SAR.c **** *  Sets the channel limit condition mask.
 592:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 593:.\Generated_Source\PSoC4/ADC_SAR.c **** * Parameters:
 594:.\Generated_Source\PSoC4/ADC_SAR.c **** *  mask: Sets which channels that may cause a
 595:.\Generated_Source\PSoC4/ADC_SAR.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 596:.\Generated_Source\PSoC4/ADC_SAR.c **** *  will have no effect. For example, if only 6 channels were enabled,
 597:.\Generated_Source\PSoC4/ADC_SAR.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 598:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 599:.\Generated_Source\PSoC4/ADC_SAR.c **** * Return:
 600:.\Generated_Source\PSoC4/ADC_SAR.c **** *  None.
 601:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 602:.\Generated_Source\PSoC4/ADC_SAR.c **** *******************************************************************************/
 603:.\Generated_Source\PSoC4/ADC_SAR.c **** void ADC_SAR_SetLimitMask(uint32 mask)
 604:.\Generated_Source\PSoC4/ADC_SAR.c **** {
 754              		.loc 1 604 0
 755              		.cfi_startproc
 756 0000 80B5     		push	{r7, lr}
 757              		.cfi_def_cfa_offset 8
 758              		.cfi_offset 7, -8
 759              		.cfi_offset 14, -4
 760 0002 82B0     		sub	sp, sp, #8
 761              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 25


 762 0004 00AF     		add	r7, sp, #0
 763              		.cfi_def_cfa_register 7
 764 0006 7860     		str	r0, [r7, #4]
 605:.\Generated_Source\PSoC4/ADC_SAR.c ****     ADC_SAR_SAR_RANGE_INTR_MASK_REG = mask & ADC_SAR_MAX_CHANNELS_EN_MASK;
 765              		.loc 1 605 0
 766 0008 034B     		ldr	r3, .L55
 767 000a 7968     		ldr	r1, [r7, #4]
 768 000c 0122     		mov	r2, #1
 769 000e 0A40     		and	r2, r1
 770 0010 1A60     		str	r2, [r3]
 606:.\Generated_Source\PSoC4/ADC_SAR.c **** }
 771              		.loc 1 606 0
 772 0012 BD46     		mov	sp, r7
 773 0014 02B0     		add	sp, sp, #8
 774              		@ sp needed
 775 0016 80BD     		pop	{r7, pc}
 776              	.L56:
 777              		.align	2
 778              	.L55:
 779 0018 38023A40 		.word	1077543480
 780              		.cfi_endproc
 781              	.LFE13:
 782              		.size	ADC_SAR_SetLimitMask, .-ADC_SAR_SetLimitMask
 783              		.section	.text.ADC_SAR_SetSatMask,"ax",%progbits
 784              		.align	2
 785              		.global	ADC_SAR_SetSatMask
 786              		.code	16
 787              		.thumb_func
 788              		.type	ADC_SAR_SetSatMask, %function
 789              	ADC_SAR_SetSatMask:
 790              	.LFB14:
 607:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 608:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 609:.\Generated_Source\PSoC4/ADC_SAR.c **** /*******************************************************************************
 610:.\Generated_Source\PSoC4/ADC_SAR.c **** * Function Name: ADC_SAR_SetSatMask
 611:.\Generated_Source\PSoC4/ADC_SAR.c **** ********************************************************************************
 612:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 613:.\Generated_Source\PSoC4/ADC_SAR.c **** * Summary:
 614:.\Generated_Source\PSoC4/ADC_SAR.c **** *  Sets the channel saturation event mask.
 615:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 616:.\Generated_Source\PSoC4/ADC_SAR.c **** * Parameters:
 617:.\Generated_Source\PSoC4/ADC_SAR.c **** *  mask: Sets which channels that may cause a
 618:.\Generated_Source\PSoC4/ADC_SAR.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 619:.\Generated_Source\PSoC4/ADC_SAR.c **** *  will have no effect. For example, if only 8 channels were enabled,
 620:.\Generated_Source\PSoC4/ADC_SAR.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 621:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 622:.\Generated_Source\PSoC4/ADC_SAR.c **** * Return:
 623:.\Generated_Source\PSoC4/ADC_SAR.c **** *  None.
 624:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 625:.\Generated_Source\PSoC4/ADC_SAR.c **** *******************************************************************************/
 626:.\Generated_Source\PSoC4/ADC_SAR.c **** void ADC_SAR_SetSatMask(uint32 mask)
 627:.\Generated_Source\PSoC4/ADC_SAR.c **** {
 791              		.loc 1 627 0
 792              		.cfi_startproc
 793 0000 80B5     		push	{r7, lr}
 794              		.cfi_def_cfa_offset 8
 795              		.cfi_offset 7, -8
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 26


 796              		.cfi_offset 14, -4
 797 0002 82B0     		sub	sp, sp, #8
 798              		.cfi_def_cfa_offset 16
 799 0004 00AF     		add	r7, sp, #0
 800              		.cfi_def_cfa_register 7
 801 0006 7860     		str	r0, [r7, #4]
 628:.\Generated_Source\PSoC4/ADC_SAR.c ****     ADC_SAR_SAR_SATURATE_INTR_MASK_REG = mask & ADC_SAR_MAX_CHANNELS_EN_MASK;
 802              		.loc 1 628 0
 803 0008 034B     		ldr	r3, .L58
 804 000a 7968     		ldr	r1, [r7, #4]
 805 000c 0122     		mov	r2, #1
 806 000e 0A40     		and	r2, r1
 807 0010 1A60     		str	r2, [r3]
 629:.\Generated_Source\PSoC4/ADC_SAR.c **** }
 808              		.loc 1 629 0
 809 0012 BD46     		mov	sp, r7
 810 0014 02B0     		add	sp, sp, #8
 811              		@ sp needed
 812 0016 80BD     		pop	{r7, pc}
 813              	.L59:
 814              		.align	2
 815              	.L58:
 816 0018 28023A40 		.word	1077543464
 817              		.cfi_endproc
 818              	.LFE14:
 819              		.size	ADC_SAR_SetSatMask, .-ADC_SAR_SetSatMask
 820              		.section	.text.ADC_SAR_SetOffset,"ax",%progbits
 821              		.align	2
 822              		.global	ADC_SAR_SetOffset
 823              		.code	16
 824              		.thumb_func
 825              		.type	ADC_SAR_SetOffset, %function
 826              	ADC_SAR_SetOffset:
 827              	.LFB15:
 630:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 631:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 632:.\Generated_Source\PSoC4/ADC_SAR.c **** /*******************************************************************************
 633:.\Generated_Source\PSoC4/ADC_SAR.c **** * Function Name: ADC_SAR_SetOffset
 634:.\Generated_Source\PSoC4/ADC_SAR.c **** ********************************************************************************
 635:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 636:.\Generated_Source\PSoC4/ADC_SAR.c **** * Summary:
 637:.\Generated_Source\PSoC4/ADC_SAR.c **** *   Description: Sets the ADC offset which is used by the functions
 638:.\Generated_Source\PSoC4/ADC_SAR.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 639:.\Generated_Source\PSoC4/ADC_SAR.c **** *   to substract the offset from the given reading
 640:.\Generated_Source\PSoC4/ADC_SAR.c **** *   before calculating the voltage conversion.
 641:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 642:.\Generated_Source\PSoC4/ADC_SAR.c **** * Parameters:
 643:.\Generated_Source\PSoC4/ADC_SAR.c **** *  chan: ADC channel number.
 644:.\Generated_Source\PSoC4/ADC_SAR.c **** *  offset: This value is a measured value when the
 645:.\Generated_Source\PSoC4/ADC_SAR.c **** *          inputs are shorted or connected to the same input voltage.
 646:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 647:.\Generated_Source\PSoC4/ADC_SAR.c **** * Return:
 648:.\Generated_Source\PSoC4/ADC_SAR.c **** *  None.
 649:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 650:.\Generated_Source\PSoC4/ADC_SAR.c **** * Global variables:
 651:.\Generated_Source\PSoC4/ADC_SAR.c **** *  ADC_SAR_Offset:  Modified to set the user provided offset.
 652:.\Generated_Source\PSoC4/ADC_SAR.c **** *
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 27


 653:.\Generated_Source\PSoC4/ADC_SAR.c **** *******************************************************************************/
 654:.\Generated_Source\PSoC4/ADC_SAR.c **** void ADC_SAR_SetOffset(uint32 chan, int16 offset)
 655:.\Generated_Source\PSoC4/ADC_SAR.c **** {
 828              		.loc 1 655 0
 829              		.cfi_startproc
 830 0000 80B5     		push	{r7, lr}
 831              		.cfi_def_cfa_offset 8
 832              		.cfi_offset 7, -8
 833              		.cfi_offset 14, -4
 834 0002 82B0     		sub	sp, sp, #8
 835              		.cfi_def_cfa_offset 16
 836 0004 00AF     		add	r7, sp, #0
 837              		.cfi_def_cfa_register 7
 838 0006 7860     		str	r0, [r7, #4]
 839 0008 0A1C     		mov	r2, r1
 840 000a BB1C     		add	r3, r7, #2
 841 000c 1A80     		strh	r2, [r3]
 656:.\Generated_Source\PSoC4/ADC_SAR.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 657:.\Generated_Source\PSoC4/ADC_SAR.c ****     CYASSERT(chan < ADC_SAR_TOTAL_CHANNELS_NUM);
 842              		.loc 1 657 0
 843 000e 7B68     		ldr	r3, [r7, #4]
 844 0010 002B     		cmp	r3, #0
 845 0012 02D0     		beq	.L61
 846              		.loc 1 657 0 is_stmt 0 discriminator 1
 847 0014 0020     		mov	r0, #0
 848 0016 FFF7FEFF 		bl	CyHalt
 849              	.L61:
 658:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 659:.\Generated_Source\PSoC4/ADC_SAR.c ****     ADC_SAR_offset[chan] = offset;
 850              		.loc 1 659 0 is_stmt 1
 851 001a 044B     		ldr	r3, .L62
 852 001c 7A68     		ldr	r2, [r7, #4]
 853 001e 5200     		lsl	r2, r2, #1
 854 0020 B91C     		add	r1, r7, #2
 855 0022 0988     		ldrh	r1, [r1]
 856 0024 D152     		strh	r1, [r2, r3]
 660:.\Generated_Source\PSoC4/ADC_SAR.c **** }
 857              		.loc 1 660 0
 858 0026 BD46     		mov	sp, r7
 859 0028 02B0     		add	sp, sp, #8
 860              		@ sp needed
 861 002a 80BD     		pop	{r7, pc}
 862              	.L63:
 863              		.align	2
 864              	.L62:
 865 002c 00000000 		.word	ADC_SAR_offset
 866              		.cfi_endproc
 867              	.LFE15:
 868              		.size	ADC_SAR_SetOffset, .-ADC_SAR_SetOffset
 869              		.section	.text.ADC_SAR_SetGain,"ax",%progbits
 870              		.align	2
 871              		.global	ADC_SAR_SetGain
 872              		.code	16
 873              		.thumb_func
 874              		.type	ADC_SAR_SetGain, %function
 875              	ADC_SAR_SetGain:
 876              	.LFB16:
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 28


 661:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 662:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 663:.\Generated_Source\PSoC4/ADC_SAR.c **** /*******************************************************************************
 664:.\Generated_Source\PSoC4/ADC_SAR.c **** * Function Name: ADC_SAR_SetGain
 665:.\Generated_Source\PSoC4/ADC_SAR.c **** ********************************************************************************
 666:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 667:.\Generated_Source\PSoC4/ADC_SAR.c **** * Summary:
 668:.\Generated_Source\PSoC4/ADC_SAR.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 669:.\Generated_Source\PSoC4/ADC_SAR.c **** *  conversion functions below. This value is set by default by the
 670:.\Generated_Source\PSoC4/ADC_SAR.c **** *  reference and input range settings. It should only be used to further
 671:.\Generated_Source\PSoC4/ADC_SAR.c **** *  calibrate the ADC with a known input or if an external reference is
 672:.\Generated_Source\PSoC4/ADC_SAR.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 673:.\Generated_Source\PSoC4/ADC_SAR.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 674:.\Generated_Source\PSoC4/ADC_SAR.c **** *  conversion between ADC counts and voltage.
 675:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 676:.\Generated_Source\PSoC4/ADC_SAR.c **** * Parameters:
 677:.\Generated_Source\PSoC4/ADC_SAR.c **** *  chan: ADC channel number.
 678:.\Generated_Source\PSoC4/ADC_SAR.c **** *  adcGain: ADC gain in counts per 10 volts.
 679:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 680:.\Generated_Source\PSoC4/ADC_SAR.c **** * Return:
 681:.\Generated_Source\PSoC4/ADC_SAR.c **** *  None.
 682:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 683:.\Generated_Source\PSoC4/ADC_SAR.c **** * Global variables:
 684:.\Generated_Source\PSoC4/ADC_SAR.c **** *  ADC_SAR_CountsPer10Volt:  modified to set the ADC gain in counts
 685:.\Generated_Source\PSoC4/ADC_SAR.c **** *   per 10 volt.
 686:.\Generated_Source\PSoC4/ADC_SAR.c **** *
 687:.\Generated_Source\PSoC4/ADC_SAR.c **** *******************************************************************************/
 688:.\Generated_Source\PSoC4/ADC_SAR.c **** void ADC_SAR_SetGain(uint32 chan, int32 adcGain)
 689:.\Generated_Source\PSoC4/ADC_SAR.c **** {
 877              		.loc 1 689 0
 878              		.cfi_startproc
 879 0000 80B5     		push	{r7, lr}
 880              		.cfi_def_cfa_offset 8
 881              		.cfi_offset 7, -8
 882              		.cfi_offset 14, -4
 883 0002 82B0     		sub	sp, sp, #8
 884              		.cfi_def_cfa_offset 16
 885 0004 00AF     		add	r7, sp, #0
 886              		.cfi_def_cfa_register 7
 887 0006 7860     		str	r0, [r7, #4]
 888 0008 3960     		str	r1, [r7]
 690:.\Generated_Source\PSoC4/ADC_SAR.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 691:.\Generated_Source\PSoC4/ADC_SAR.c ****     CYASSERT(chan < ADC_SAR_TOTAL_CHANNELS_NUM);
 889              		.loc 1 691 0
 890 000a 7B68     		ldr	r3, [r7, #4]
 891 000c 002B     		cmp	r3, #0
 892 000e 02D0     		beq	.L65
 893              		.loc 1 691 0 is_stmt 0 discriminator 1
 894 0010 0020     		mov	r0, #0
 895 0012 FFF7FEFF 		bl	CyHalt
 896              	.L65:
 692:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 693:.\Generated_Source\PSoC4/ADC_SAR.c ****     ADC_SAR_countsPer10Volt[chan] = adcGain;
 897              		.loc 1 693 0 is_stmt 1
 898 0016 044B     		ldr	r3, .L66
 899 0018 7A68     		ldr	r2, [r7, #4]
 900 001a 9200     		lsl	r2, r2, #2
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 29


 901 001c 3968     		ldr	r1, [r7]
 902 001e D150     		str	r1, [r2, r3]
 694:.\Generated_Source\PSoC4/ADC_SAR.c **** }
 903              		.loc 1 694 0
 904 0020 BD46     		mov	sp, r7
 905 0022 02B0     		add	sp, sp, #8
 906              		@ sp needed
 907 0024 80BD     		pop	{r7, pc}
 908              	.L67:
 909 0026 C046     		.align	2
 910              	.L66:
 911 0028 00000000 		.word	ADC_SAR_countsPer10Volt
 912              		.cfi_endproc
 913              	.LFE16:
 914              		.size	ADC_SAR_SetGain, .-ADC_SAR_SetGain
 915              		.global	__aeabi_idiv
 916              		.section	.text.ADC_SAR_CountsTo_mVolts,"ax",%progbits
 917              		.align	2
 918              		.global	ADC_SAR_CountsTo_mVolts
 919              		.code	16
 920              		.thumb_func
 921              		.type	ADC_SAR_CountsTo_mVolts, %function
 922              	ADC_SAR_CountsTo_mVolts:
 923              	.LFB17:
 695:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 696:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 697:.\Generated_Source\PSoC4/ADC_SAR.c **** #if(ADC_SAR_DEFAULT_JUSTIFICATION_SEL == ADC_SAR__RIGHT)
 698:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 699:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 700:.\Generated_Source\PSoC4/ADC_SAR.c ****     /*******************************************************************************
 701:.\Generated_Source\PSoC4/ADC_SAR.c ****     * Function Name: ADC_SAR_CountsTo_mVolts
 702:.\Generated_Source\PSoC4/ADC_SAR.c ****     ********************************************************************************
 703:.\Generated_Source\PSoC4/ADC_SAR.c ****     *
 704:.\Generated_Source\PSoC4/ADC_SAR.c ****     * Summary:
 705:.\Generated_Source\PSoC4/ADC_SAR.c ****     *  This function converts ADC counts to mVolts
 706:.\Generated_Source\PSoC4/ADC_SAR.c ****     *  This function is not available when left data format justification selected.
 707:.\Generated_Source\PSoC4/ADC_SAR.c ****     *
 708:.\Generated_Source\PSoC4/ADC_SAR.c ****     * Parameters:
 709:.\Generated_Source\PSoC4/ADC_SAR.c ****     *  chan: The ADC channel number.
 710:.\Generated_Source\PSoC4/ADC_SAR.c ****     *  adcCounts: Result from the ADC conversion
 711:.\Generated_Source\PSoC4/ADC_SAR.c ****     *
 712:.\Generated_Source\PSoC4/ADC_SAR.c ****     * Return:
 713:.\Generated_Source\PSoC4/ADC_SAR.c ****     *  Results in mVolts
 714:.\Generated_Source\PSoC4/ADC_SAR.c ****     *
 715:.\Generated_Source\PSoC4/ADC_SAR.c ****     * Global variables:
 716:.\Generated_Source\PSoC4/ADC_SAR.c ****     *  ADC_SAR_countsPer10Volt:  used to convert ADC counts to mVolts.
 717:.\Generated_Source\PSoC4/ADC_SAR.c ****     *  ADC_SAR_Offset:  Used as the offset while converting ADC counts
 718:.\Generated_Source\PSoC4/ADC_SAR.c ****     *   to mVolts.
 719:.\Generated_Source\PSoC4/ADC_SAR.c ****     *
 720:.\Generated_Source\PSoC4/ADC_SAR.c ****     *******************************************************************************/
 721:.\Generated_Source\PSoC4/ADC_SAR.c ****     int16 ADC_SAR_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 722:.\Generated_Source\PSoC4/ADC_SAR.c ****     {
 924              		.loc 1 722 0
 925              		.cfi_startproc
 926 0000 80B5     		push	{r7, lr}
 927              		.cfi_def_cfa_offset 8
 928              		.cfi_offset 7, -8
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 30


 929              		.cfi_offset 14, -4
 930 0002 84B0     		sub	sp, sp, #16
 931              		.cfi_def_cfa_offset 24
 932 0004 00AF     		add	r7, sp, #0
 933              		.cfi_def_cfa_register 7
 934 0006 7860     		str	r0, [r7, #4]
 935 0008 0A1C     		mov	r2, r1
 936 000a BB1C     		add	r3, r7, #2
 937 000c 1A80     		strh	r2, [r3]
 723:.\Generated_Source\PSoC4/ADC_SAR.c ****         int16 mVolts;
 724:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 725:.\Generated_Source\PSoC4/ADC_SAR.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 726:.\Generated_Source\PSoC4/ADC_SAR.c ****         CYASSERT(chan < ADC_SAR_TOTAL_CHANNELS_NUM);
 938              		.loc 1 726 0
 939 000e 7B68     		ldr	r3, [r7, #4]
 940 0010 002B     		cmp	r3, #0
 941 0012 02D0     		beq	.L69
 942              		.loc 1 726 0 is_stmt 0 discriminator 1
 943 0014 0020     		mov	r0, #0
 944 0016 FFF7FEFF 		bl	CyHalt
 945              	.L69:
 727:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 728:.\Generated_Source\PSoC4/ADC_SAR.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 729:.\Generated_Source\PSoC4/ADC_SAR.c ****         #if(ADC_SAR_DEFAULT_AVG_MODE == ADC_SAR__ACCUMULATE)
 730:.\Generated_Source\PSoC4/ADC_SAR.c ****             if((ADC_SAR_channelsConfig[chan] & ADC_SAR_AVERAGING_EN) != 0u)
 731:.\Generated_Source\PSoC4/ADC_SAR.c ****             {
 732:.\Generated_Source\PSoC4/ADC_SAR.c ****                 adcCounts /= ADC_SAR_DEFAULT_AVG_SAMPLES_DIV;
 733:.\Generated_Source\PSoC4/ADC_SAR.c ****             }
 734:.\Generated_Source\PSoC4/ADC_SAR.c ****         #endif /* ADC_SAR_DEFAULT_AVG_MODE == ADC_SAR__ACCUMULATE */
 735:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 736:.\Generated_Source\PSoC4/ADC_SAR.c ****         /* Subtract ADC offset */
 737:.\Generated_Source\PSoC4/ADC_SAR.c ****         adcCounts -= ADC_SAR_offset[chan];
 946              		.loc 1 737 0 is_stmt 1
 947 001a BB1C     		add	r3, r7, #2
 948 001c 1A88     		ldrh	r2, [r3]
 949 001e 1E4B     		ldr	r3, .L75
 950 0020 7968     		ldr	r1, [r7, #4]
 951 0022 4900     		lsl	r1, r1, #1
 952 0024 CB5A     		ldrh	r3, [r1, r3]
 953 0026 9BB2     		uxth	r3, r3
 954 0028 9BB2     		uxth	r3, r3
 955 002a D31A     		sub	r3, r2, r3
 956 002c 9AB2     		uxth	r2, r3
 957 002e BB1C     		add	r3, r7, #2
 958 0030 1A80     		strh	r2, [r3]
 738:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 739:.\Generated_Source\PSoC4/ADC_SAR.c ****         mVolts = (int16)((((int32)adcCounts * ADC_SAR_10MV_COUNTS) + ( (adcCounts > 0) ?
 959              		.loc 1 739 0
 960 0032 BB1C     		add	r3, r7, #2
 961 0034 0021     		mov	r1, #0
 962 0036 5B5E     		ldrsh	r3, [r3, r1]
 963 0038 184A     		ldr	r2, .L75+4
 964 003a 5A43     		mul	r2, r3
 740:.\Generated_Source\PSoC4/ADC_SAR.c ****                  (ADC_SAR_countsPer10Volt[chan] / 2) : (-(ADC_SAR_countsPer10Volt[chan] / 2)) ))
 965              		.loc 1 740 0
 966 003c BB1C     		add	r3, r7, #2
 967 003e 0021     		mov	r1, #0
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 31


 968 0040 5B5E     		ldrsh	r3, [r3, r1]
 969 0042 002B     		cmp	r3, #0
 970 0044 08DD     		ble	.L70
 971              		.loc 1 740 0 is_stmt 0 discriminator 1
 972 0046 164B     		ldr	r3, .L75+8
 973 0048 7968     		ldr	r1, [r7, #4]
 974 004a 8900     		lsl	r1, r1, #2
 975 004c CB58     		ldr	r3, [r1, r3]
 976 004e 002B     		cmp	r3, #0
 977 0050 00DA     		bge	.L71
 978 0052 0133     		add	r3, r3, #1
 979              	.L71:
 980 0054 5B10     		asr	r3, r3, #1
 981 0056 08E0     		b	.L72
 982              	.L70:
 983              		.loc 1 740 0 discriminator 2
 984 0058 114B     		ldr	r3, .L75+8
 985 005a 7968     		ldr	r1, [r7, #4]
 986 005c 8900     		lsl	r1, r1, #2
 987 005e CB58     		ldr	r3, [r1, r3]
 988 0060 002B     		cmp	r3, #0
 989 0062 00DA     		bge	.L73
 990 0064 0133     		add	r3, r3, #1
 991              	.L73:
 992 0066 5B10     		asr	r3, r3, #1
 993 0068 5B42     		neg	r3, r3
 994              	.L72:
 739:.\Generated_Source\PSoC4/ADC_SAR.c ****         mVolts = (int16)((((int32)adcCounts * ADC_SAR_10MV_COUNTS) + ( (adcCounts > 0) ?
 995              		.loc 1 739 0 is_stmt 1
 996 006a D218     		add	r2, r2, r3
 741:.\Generated_Source\PSoC4/ADC_SAR.c ****                  / ADC_SAR_countsPer10Volt[chan]);
 997              		.loc 1 741 0
 998 006c 0C4B     		ldr	r3, .L75+8
 999 006e 7968     		ldr	r1, [r7, #4]
 1000 0070 8900     		lsl	r1, r1, #2
 1001 0072 CB58     		ldr	r3, [r1, r3]
 1002 0074 101C     		mov	r0, r2
 1003 0076 191C     		mov	r1, r3
 1004 0078 FFF7FEFF 		bl	__aeabi_idiv
 1005 007c 031C     		mov	r3, r0
 1006 007e 1A1C     		mov	r2, r3
 739:.\Generated_Source\PSoC4/ADC_SAR.c ****         mVolts = (int16)((((int32)adcCounts * ADC_SAR_10MV_COUNTS) + ( (adcCounts > 0) ?
 1007              		.loc 1 739 0
 1008 0080 3B1C     		mov	r3, r7
 1009 0082 0E33     		add	r3, r3, #14
 1010 0084 1A80     		strh	r2, [r3]
 742:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 743:.\Generated_Source\PSoC4/ADC_SAR.c ****         return( mVolts );
 1011              		.loc 1 743 0
 1012 0086 3B1C     		mov	r3, r7
 1013 0088 0E33     		add	r3, r3, #14
 1014 008a 1B88     		ldrh	r3, [r3]
 1015 008c 1BB2     		sxth	r3, r3
 744:.\Generated_Source\PSoC4/ADC_SAR.c ****     }
 1016              		.loc 1 744 0
 1017 008e 181C     		mov	r0, r3
 1018 0090 BD46     		mov	sp, r7
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 32


 1019 0092 04B0     		add	sp, sp, #16
 1020              		@ sp needed
 1021 0094 80BD     		pop	{r7, pc}
 1022              	.L76:
 1023 0096 C046     		.align	2
 1024              	.L75:
 1025 0098 00000000 		.word	ADC_SAR_offset
 1026 009c 10270000 		.word	10000
 1027 00a0 00000000 		.word	ADC_SAR_countsPer10Volt
 1028              		.cfi_endproc
 1029              	.LFE17:
 1030              		.size	ADC_SAR_CountsTo_mVolts, .-ADC_SAR_CountsTo_mVolts
 1031              		.global	__aeabi_lmul
 1032              		.global	__aeabi_ldivmod
 1033              		.section	.text.ADC_SAR_CountsTo_uVolts,"ax",%progbits
 1034              		.align	2
 1035              		.global	ADC_SAR_CountsTo_uVolts
 1036              		.code	16
 1037              		.thumb_func
 1038              		.type	ADC_SAR_CountsTo_uVolts, %function
 1039              	ADC_SAR_CountsTo_uVolts:
 1040              	.LFB18:
 745:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 746:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 747:.\Generated_Source\PSoC4/ADC_SAR.c ****     /*******************************************************************************
 748:.\Generated_Source\PSoC4/ADC_SAR.c ****     * Function Name: ADC_SAR_CountsTo_uVolts
 749:.\Generated_Source\PSoC4/ADC_SAR.c ****     ********************************************************************************
 750:.\Generated_Source\PSoC4/ADC_SAR.c ****     *
 751:.\Generated_Source\PSoC4/ADC_SAR.c ****     * Summary:
 752:.\Generated_Source\PSoC4/ADC_SAR.c ****     *  This function converts ADC counts to micro Volts
 753:.\Generated_Source\PSoC4/ADC_SAR.c ****     *  This function is not available when left data format justification selected.
 754:.\Generated_Source\PSoC4/ADC_SAR.c ****     *
 755:.\Generated_Source\PSoC4/ADC_SAR.c ****     * Parameters:
 756:.\Generated_Source\PSoC4/ADC_SAR.c ****     *  chan: The ADC channel number.
 757:.\Generated_Source\PSoC4/ADC_SAR.c ****     *  adcCounts: Result from the ADC conversion
 758:.\Generated_Source\PSoC4/ADC_SAR.c ****     *
 759:.\Generated_Source\PSoC4/ADC_SAR.c ****     * Return:
 760:.\Generated_Source\PSoC4/ADC_SAR.c ****     *  Results in uVolts
 761:.\Generated_Source\PSoC4/ADC_SAR.c ****     *
 762:.\Generated_Source\PSoC4/ADC_SAR.c ****     * Global variables:
 763:.\Generated_Source\PSoC4/ADC_SAR.c ****     *  ADC_SAR_countsPer10Volt:  used to convert ADC counts to uVolts.
 764:.\Generated_Source\PSoC4/ADC_SAR.c ****     *  ADC_SAR_Offset:  Used as the offset while converting ADC counts
 765:.\Generated_Source\PSoC4/ADC_SAR.c ****     *   to mVolts.
 766:.\Generated_Source\PSoC4/ADC_SAR.c ****     *
 767:.\Generated_Source\PSoC4/ADC_SAR.c ****     * Theory:
 768:.\Generated_Source\PSoC4/ADC_SAR.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 769:.\Generated_Source\PSoC4/ADC_SAR.c ****     *  number in the conversion to uVolts and at the same time not loose
 770:.\Generated_Source\PSoC4/ADC_SAR.c ****     *  resolution.
 771:.\Generated_Source\PSoC4/ADC_SAR.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 772:.\Generated_Source\PSoC4/ADC_SAR.c ****     *  on 10 million and later divide on gain in counts per 10V.
 773:.\Generated_Source\PSoC4/ADC_SAR.c ****     *
 774:.\Generated_Source\PSoC4/ADC_SAR.c ****     *******************************************************************************/
 775:.\Generated_Source\PSoC4/ADC_SAR.c ****     int32 ADC_SAR_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 776:.\Generated_Source\PSoC4/ADC_SAR.c ****     {
 1041              		.loc 1 776 0
 1042              		.cfi_startproc
 1043 0000 B0B5     		push	{r4, r5, r7, lr}
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 33


 1044              		.cfi_def_cfa_offset 16
 1045              		.cfi_offset 4, -16
 1046              		.cfi_offset 5, -12
 1047              		.cfi_offset 7, -8
 1048              		.cfi_offset 14, -4
 1049 0002 86B0     		sub	sp, sp, #24
 1050              		.cfi_def_cfa_offset 40
 1051 0004 00AF     		add	r7, sp, #0
 1052              		.cfi_def_cfa_register 7
 1053 0006 F860     		str	r0, [r7, #12]
 1054 0008 0A1C     		mov	r2, r1
 1055 000a 3B1C     		mov	r3, r7
 1056 000c 0A33     		add	r3, r3, #10
 1057 000e 1A80     		strh	r2, [r3]
 777:.\Generated_Source\PSoC4/ADC_SAR.c ****         int64 uVolts;
 778:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 779:.\Generated_Source\PSoC4/ADC_SAR.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 780:.\Generated_Source\PSoC4/ADC_SAR.c ****         CYASSERT(chan < ADC_SAR_TOTAL_CHANNELS_NUM);
 1058              		.loc 1 780 0
 1059 0010 FB68     		ldr	r3, [r7, #12]
 1060 0012 002B     		cmp	r3, #0
 1061 0014 02D0     		beq	.L78
 1062              		.loc 1 780 0 is_stmt 0 discriminator 1
 1063 0016 0020     		mov	r0, #0
 1064 0018 FFF7FEFF 		bl	CyHalt
 1065              	.L78:
 781:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 782:.\Generated_Source\PSoC4/ADC_SAR.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 783:.\Generated_Source\PSoC4/ADC_SAR.c ****         #if(ADC_SAR_DEFAULT_AVG_MODE == ADC_SAR__ACCUMULATE)
 784:.\Generated_Source\PSoC4/ADC_SAR.c ****             if((ADC_SAR_channelsConfig[chan] & ADC_SAR_AVERAGING_EN) != 0u)
 785:.\Generated_Source\PSoC4/ADC_SAR.c ****             {
 786:.\Generated_Source\PSoC4/ADC_SAR.c ****                 adcCounts /= ADC_SAR_DEFAULT_AVG_SAMPLES_DIV;
 787:.\Generated_Source\PSoC4/ADC_SAR.c ****             }
 788:.\Generated_Source\PSoC4/ADC_SAR.c ****         #endif /* ADC_SAR_DEFAULT_AVG_MODE == ADC_SAR__ACCUMULATE */
 789:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 790:.\Generated_Source\PSoC4/ADC_SAR.c ****         /* Subtract ADC offset */
 791:.\Generated_Source\PSoC4/ADC_SAR.c ****         adcCounts -= ADC_SAR_offset[chan];
 1066              		.loc 1 791 0 is_stmt 1
 1067 001c 3B1C     		mov	r3, r7
 1068 001e 0A33     		add	r3, r3, #10
 1069 0020 1A88     		ldrh	r2, [r3]
 1070 0022 1B4B     		ldr	r3, .L80+8
 1071 0024 F968     		ldr	r1, [r7, #12]
 1072 0026 4900     		lsl	r1, r1, #1
 1073 0028 CB5A     		ldrh	r3, [r1, r3]
 1074 002a 9BB2     		uxth	r3, r3
 1075 002c 9BB2     		uxth	r3, r3
 1076 002e D31A     		sub	r3, r2, r3
 1077 0030 9AB2     		uxth	r2, r3
 1078 0032 3B1C     		mov	r3, r7
 1079 0034 0A33     		add	r3, r3, #10
 1080 0036 1A80     		strh	r2, [r3]
 792:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 793:.\Generated_Source\PSoC4/ADC_SAR.c ****         uVolts = ((int64)adcCounts * ADC_SAR_10UV_COUNTS) / ADC_SAR_countsPer10Volt[chan];
 1081              		.loc 1 793 0
 1082 0038 3B1C     		mov	r3, r7
 1083 003a 0A33     		add	r3, r3, #10
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 34


 1084 003c 1B88     		ldrh	r3, [r3]
 1085 003e 1BB2     		sxth	r3, r3
 1086 0040 3B60     		str	r3, [r7]
 1087 0042 DB17     		asr	r3, r3, #31
 1088 0044 7B60     		str	r3, [r7, #4]
 1089 0046 3868     		ldr	r0, [r7]
 1090 0048 7968     		ldr	r1, [r7, #4]
 1091 004a 104B     		ldr	r3, .L80+4
 1092 004c 0E4A     		ldr	r2, .L80
 1093 004e FFF7FEFF 		bl	__aeabi_lmul
 1094 0052 021C     		mov	r2, r0
 1095 0054 0B1C     		mov	r3, r1
 1096 0056 0F49     		ldr	r1, .L80+12
 1097 0058 F868     		ldr	r0, [r7, #12]
 1098 005a 8000     		lsl	r0, r0, #2
 1099 005c 4158     		ldr	r1, [r0, r1]
 1100 005e 0C1C     		mov	r4, r1
 1101 0060 C917     		asr	r1, r1, #31
 1102 0062 0D1C     		mov	r5, r1
 1103 0064 101C     		mov	r0, r2
 1104 0066 191C     		mov	r1, r3
 1105 0068 221C     		mov	r2, r4
 1106 006a 2B1C     		mov	r3, r5
 1107 006c FFF7FEFF 		bl	__aeabi_ldivmod
 1108 0070 031C     		mov	r3, r0
 1109 0072 0C1C     		mov	r4, r1
 1110 0074 3B61     		str	r3, [r7, #16]
 1111 0076 7C61     		str	r4, [r7, #20]
 794:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 795:.\Generated_Source\PSoC4/ADC_SAR.c ****         return( (int32)uVolts );
 1112              		.loc 1 795 0
 1113 0078 3B69     		ldr	r3, [r7, #16]
 796:.\Generated_Source\PSoC4/ADC_SAR.c ****     }
 1114              		.loc 1 796 0
 1115 007a 181C     		mov	r0, r3
 1116 007c BD46     		mov	sp, r7
 1117 007e 06B0     		add	sp, sp, #24
 1118              		@ sp needed
 1119 0080 B0BD     		pop	{r4, r5, r7, pc}
 1120              	.L81:
 1121 0082 C046C046 		.align	3
 1121      C046
 1122              	.L80:
 1123 0088 80969800 		.word	10000000
 1124 008c 00000000 		.word	0
 1125 0090 00000000 		.word	ADC_SAR_offset
 1126 0094 00000000 		.word	ADC_SAR_countsPer10Volt
 1127              		.cfi_endproc
 1128              	.LFE18:
 1129              		.size	ADC_SAR_CountsTo_uVolts, .-ADC_SAR_CountsTo_uVolts
 1130              		.global	__aeabi_i2f
 1131              		.global	__aeabi_fmul
 1132              		.global	__aeabi_fdiv
 1133              		.section	.text.ADC_SAR_CountsTo_Volts,"ax",%progbits
 1134              		.align	2
 1135              		.global	ADC_SAR_CountsTo_Volts
 1136              		.code	16
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 35


 1137              		.thumb_func
 1138              		.type	ADC_SAR_CountsTo_Volts, %function
 1139              	ADC_SAR_CountsTo_Volts:
 1140              	.LFB19:
 797:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 798:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 799:.\Generated_Source\PSoC4/ADC_SAR.c ****     /*******************************************************************************
 800:.\Generated_Source\PSoC4/ADC_SAR.c ****     * Function Name: ADC_SAR_CountsTo_Volts
 801:.\Generated_Source\PSoC4/ADC_SAR.c ****     ********************************************************************************
 802:.\Generated_Source\PSoC4/ADC_SAR.c ****     *
 803:.\Generated_Source\PSoC4/ADC_SAR.c ****     * Summary:
 804:.\Generated_Source\PSoC4/ADC_SAR.c ****     *  Converts the ADC output to Volts as a floating point number.
 805:.\Generated_Source\PSoC4/ADC_SAR.c ****     *  This function is not available when left data format justification selected.
 806:.\Generated_Source\PSoC4/ADC_SAR.c ****     *
 807:.\Generated_Source\PSoC4/ADC_SAR.c ****     * Parameters:
 808:.\Generated_Source\PSoC4/ADC_SAR.c ****     *  chan: The ADC channel number.
 809:.\Generated_Source\PSoC4/ADC_SAR.c ****     *  Result from the ADC conversion
 810:.\Generated_Source\PSoC4/ADC_SAR.c ****     *
 811:.\Generated_Source\PSoC4/ADC_SAR.c ****     * Return:
 812:.\Generated_Source\PSoC4/ADC_SAR.c ****     *  Results in Volts
 813:.\Generated_Source\PSoC4/ADC_SAR.c ****     *
 814:.\Generated_Source\PSoC4/ADC_SAR.c ****     * Global variables:
 815:.\Generated_Source\PSoC4/ADC_SAR.c ****     *  ADC_SAR_countsPer10Volt:  used to convert ADC counts to Volts.
 816:.\Generated_Source\PSoC4/ADC_SAR.c ****     *  ADC_SAR_Offset:  Used as the offset while converting ADC counts
 817:.\Generated_Source\PSoC4/ADC_SAR.c ****     *   to mVolts.
 818:.\Generated_Source\PSoC4/ADC_SAR.c ****     *
 819:.\Generated_Source\PSoC4/ADC_SAR.c ****     *******************************************************************************/
 820:.\Generated_Source\PSoC4/ADC_SAR.c ****     float32 ADC_SAR_CountsTo_Volts(uint32 chan, int16 adcCounts)
 821:.\Generated_Source\PSoC4/ADC_SAR.c ****     {
 1141              		.loc 1 821 0
 1142              		.cfi_startproc
 1143 0000 90B5     		push	{r4, r7, lr}
 1144              		.cfi_def_cfa_offset 12
 1145              		.cfi_offset 4, -12
 1146              		.cfi_offset 7, -8
 1147              		.cfi_offset 14, -4
 1148 0002 85B0     		sub	sp, sp, #20
 1149              		.cfi_def_cfa_offset 32
 1150 0004 00AF     		add	r7, sp, #0
 1151              		.cfi_def_cfa_register 7
 1152 0006 7860     		str	r0, [r7, #4]
 1153 0008 0A1C     		mov	r2, r1
 1154 000a BB1C     		add	r3, r7, #2
 1155 000c 1A80     		strh	r2, [r3]
 822:.\Generated_Source\PSoC4/ADC_SAR.c ****         float32 volts;
 823:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 824:.\Generated_Source\PSoC4/ADC_SAR.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 825:.\Generated_Source\PSoC4/ADC_SAR.c ****         CYASSERT(chan < ADC_SAR_TOTAL_CHANNELS_NUM);
 1156              		.loc 1 825 0
 1157 000e 7B68     		ldr	r3, [r7, #4]
 1158 0010 002B     		cmp	r3, #0
 1159 0012 02D0     		beq	.L83
 1160              		.loc 1 825 0 is_stmt 0 discriminator 1
 1161 0014 0020     		mov	r0, #0
 1162 0016 FFF7FEFF 		bl	CyHalt
 1163              	.L83:
 826:.\Generated_Source\PSoC4/ADC_SAR.c **** 
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 36


 827:.\Generated_Source\PSoC4/ADC_SAR.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 828:.\Generated_Source\PSoC4/ADC_SAR.c ****         #if(ADC_SAR_DEFAULT_AVG_MODE == ADC_SAR__ACCUMULATE)
 829:.\Generated_Source\PSoC4/ADC_SAR.c ****             if((ADC_SAR_channelsConfig[chan] & ADC_SAR_AVERAGING_EN) != 0u)
 830:.\Generated_Source\PSoC4/ADC_SAR.c ****             {
 831:.\Generated_Source\PSoC4/ADC_SAR.c ****                 adcCounts /= ADC_SAR_DEFAULT_AVG_SAMPLES_DIV;
 832:.\Generated_Source\PSoC4/ADC_SAR.c ****             }
 833:.\Generated_Source\PSoC4/ADC_SAR.c ****         #endif /* ADC_SAR_DEFAULT_AVG_MODE == ADC_SAR__ACCUMULATE */
 834:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 835:.\Generated_Source\PSoC4/ADC_SAR.c ****         /* Subtract ADC offset */
 836:.\Generated_Source\PSoC4/ADC_SAR.c ****         adcCounts -= ADC_SAR_offset[chan];
 1164              		.loc 1 836 0 is_stmt 1
 1165 001a BB1C     		add	r3, r7, #2
 1166 001c 1A88     		ldrh	r2, [r3]
 1167 001e 154B     		ldr	r3, .L85
 1168 0020 7968     		ldr	r1, [r7, #4]
 1169 0022 4900     		lsl	r1, r1, #1
 1170 0024 CB5A     		ldrh	r3, [r1, r3]
 1171 0026 9BB2     		uxth	r3, r3
 1172 0028 9BB2     		uxth	r3, r3
 1173 002a D31A     		sub	r3, r2, r3
 1174 002c 9AB2     		uxth	r2, r3
 1175 002e BB1C     		add	r3, r7, #2
 1176 0030 1A80     		strh	r2, [r3]
 837:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 838:.\Generated_Source\PSoC4/ADC_SAR.c ****         volts = ((float32)adcCounts * ADC_SAR_10V_COUNTS) / (float32)ADC_SAR_countsPer10Volt[chan];
 1177              		.loc 1 838 0
 1178 0032 BB1C     		add	r3, r7, #2
 1179 0034 0022     		mov	r2, #0
 1180 0036 9B5E     		ldrsh	r3, [r3, r2]
 1181 0038 181C     		mov	r0, r3
 1182 003a FFF7FEFF 		bl	__aeabi_i2f
 1183 003e 031C     		add	r3, r0, #0
 1184 0040 181C     		add	r0, r3, #0
 1185 0042 0D49     		ldr	r1, .L85+4
 1186 0044 FFF7FEFF 		bl	__aeabi_fmul
 1187 0048 031C     		add	r3, r0, #0
 1188 004a 1C1C     		add	r4, r3, #0
 1189 004c 0B4B     		ldr	r3, .L85+8
 1190 004e 7A68     		ldr	r2, [r7, #4]
 1191 0050 9200     		lsl	r2, r2, #2
 1192 0052 D358     		ldr	r3, [r2, r3]
 1193 0054 181C     		mov	r0, r3
 1194 0056 FFF7FEFF 		bl	__aeabi_i2f
 1195 005a 031C     		add	r3, r0, #0
 1196 005c 201C     		add	r0, r4, #0
 1197 005e 191C     		add	r1, r3, #0
 1198 0060 FFF7FEFF 		bl	__aeabi_fdiv
 1199 0064 031C     		add	r3, r0, #0
 1200 0066 FB60     		str	r3, [r7, #12]
 839:.\Generated_Source\PSoC4/ADC_SAR.c **** 
 840:.\Generated_Source\PSoC4/ADC_SAR.c ****         return( volts );
 1201              		.loc 1 840 0
 1202 0068 FB68     		ldr	r3, [r7, #12]
 841:.\Generated_Source\PSoC4/ADC_SAR.c ****     }
 1203              		.loc 1 841 0
 1204 006a 181C     		add	r0, r3, #0
 1205 006c BD46     		mov	sp, r7
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 37


 1206 006e 05B0     		add	sp, sp, #20
 1207              		@ sp needed
 1208 0070 90BD     		pop	{r4, r7, pc}
 1209              	.L86:
 1210 0072 C046     		.align	2
 1211              	.L85:
 1212 0074 00000000 		.word	ADC_SAR_offset
 1213 0078 00002041 		.word	1092616192
 1214 007c 00000000 		.word	ADC_SAR_countsPer10Volt
 1215              		.cfi_endproc
 1216              	.LFE19:
 1217              		.size	ADC_SAR_CountsTo_Volts, .-ADC_SAR_CountsTo_Volts
 1218              		.text
 1219              	.Letext0:
 1220              		.file 2 ".\\Generated_Source\\PSoC4\\cytypes.h"
 1221              		.section	.debug_info,"",%progbits
 1222              	.Ldebug_info0:
 1223 0000 70040000 		.4byte	0x470
 1224 0004 0400     		.2byte	0x4
 1225 0006 00000000 		.4byte	.Ldebug_abbrev0
 1226 000a 04       		.byte	0x4
 1227 000b 01       		.uleb128 0x1
 1228 000c CF000000 		.4byte	.LASF59
 1229 0010 01       		.byte	0x1
 1230 0011 73010000 		.4byte	.LASF60
 1231 0015 F2020000 		.4byte	.LASF61
 1232 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1233 001d 00000000 		.4byte	0
 1234 0021 00000000 		.4byte	.Ldebug_line0
 1235 0025 02       		.uleb128 0x2
 1236 0026 01       		.byte	0x1
 1237 0027 06       		.byte	0x6
 1238 0028 7F030000 		.4byte	.LASF0
 1239 002c 02       		.uleb128 0x2
 1240 002d 01       		.byte	0x1
 1241 002e 08       		.byte	0x8
 1242 002f 4B010000 		.4byte	.LASF1
 1243 0033 02       		.uleb128 0x2
 1244 0034 02       		.byte	0x2
 1245 0035 05       		.byte	0x5
 1246 0036 3F030000 		.4byte	.LASF2
 1247 003a 02       		.uleb128 0x2
 1248 003b 02       		.byte	0x2
 1249 003c 07       		.byte	0x7
 1250 003d 7F000000 		.4byte	.LASF3
 1251 0041 02       		.uleb128 0x2
 1252 0042 04       		.byte	0x4
 1253 0043 05       		.byte	0x5
 1254 0044 5F030000 		.4byte	.LASF4
 1255 0048 02       		.uleb128 0x2
 1256 0049 04       		.byte	0x4
 1257 004a 07       		.byte	0x7
 1258 004b 24020000 		.4byte	.LASF5
 1259 004f 02       		.uleb128 0x2
 1260 0050 08       		.byte	0x8
 1261 0051 05       		.byte	0x5
 1262 0052 D1020000 		.4byte	.LASF6
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 38


 1263 0056 02       		.uleb128 0x2
 1264 0057 08       		.byte	0x8
 1265 0058 07       		.byte	0x7
 1266 0059 4A020000 		.4byte	.LASF7
 1267 005d 03       		.uleb128 0x3
 1268 005e 04       		.byte	0x4
 1269 005f 05       		.byte	0x5
 1270 0060 696E7400 		.ascii	"int\000"
 1271 0064 02       		.uleb128 0x2
 1272 0065 04       		.byte	0x4
 1273 0066 07       		.byte	0x7
 1274 0067 36020000 		.4byte	.LASF8
 1275 006b 04       		.uleb128 0x4
 1276 006c 49030000 		.4byte	.LASF9
 1277 0070 02       		.byte	0x2
 1278 0071 A1       		.byte	0xa1
 1279 0072 2C000000 		.4byte	0x2c
 1280 0076 04       		.uleb128 0x4
 1281 0077 0C020000 		.4byte	.LASF10
 1282 007b 02       		.byte	0x2
 1283 007c A2       		.byte	0xa2
 1284 007d 3A000000 		.4byte	0x3a
 1285 0081 04       		.uleb128 0x4
 1286 0082 1D020000 		.4byte	.LASF11
 1287 0086 02       		.byte	0x2
 1288 0087 A3       		.byte	0xa3
 1289 0088 48000000 		.4byte	0x48
 1290 008c 04       		.uleb128 0x4
 1291 008d 6D010000 		.4byte	.LASF12
 1292 0091 02       		.byte	0x2
 1293 0092 A5       		.byte	0xa5
 1294 0093 33000000 		.4byte	0x33
 1295 0097 04       		.uleb128 0x4
 1296 0098 AD010000 		.4byte	.LASF13
 1297 009c 02       		.byte	0x2
 1298 009d A6       		.byte	0xa6
 1299 009e 41000000 		.4byte	0x41
 1300 00a2 04       		.uleb128 0x4
 1301 00a3 BD000000 		.4byte	.LASF14
 1302 00a7 02       		.byte	0x2
 1303 00a8 A7       		.byte	0xa7
 1304 00a9 AD000000 		.4byte	0xad
 1305 00ad 02       		.uleb128 0x2
 1306 00ae 04       		.byte	0x4
 1307 00af 04       		.byte	0x4
 1308 00b0 3A000000 		.4byte	.LASF15
 1309 00b4 02       		.uleb128 0x2
 1310 00b5 08       		.byte	0x8
 1311 00b6 04       		.byte	0x4
 1312 00b7 E5010000 		.4byte	.LASF16
 1313 00bb 04       		.uleb128 0x4
 1314 00bc CB030000 		.4byte	.LASF17
 1315 00c0 02       		.byte	0x2
 1316 00c1 AC       		.byte	0xac
 1317 00c2 4F000000 		.4byte	0x4f
 1318 00c6 02       		.uleb128 0x2
 1319 00c7 01       		.byte	0x1
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 39


 1320 00c8 08       		.byte	0x8
 1321 00c9 68030000 		.4byte	.LASF18
 1322 00cd 05       		.uleb128 0x5
 1323 00ce 15000000 		.4byte	.LASF19
 1324 00d2 02       		.byte	0x2
 1325 00d3 4D01     		.2byte	0x14d
 1326 00d5 D9000000 		.4byte	0xd9
 1327 00d9 06       		.uleb128 0x6
 1328 00da 81000000 		.4byte	0x81
 1329 00de 02       		.uleb128 0x2
 1330 00df 04       		.byte	0x4
 1331 00e0 07       		.byte	0x7
 1332 00e1 98020000 		.4byte	.LASF20
 1333 00e5 07       		.uleb128 0x7
 1334 00e6 61020000 		.4byte	.LASF24
 1335 00ea 01       		.byte	0x1
 1336 00eb 3F       		.byte	0x3f
 1337 00ec 00000000 		.4byte	.LFB2
 1338 00f0 24000000 		.4byte	.LFE2-.LFB2
 1339 00f4 01       		.uleb128 0x1
 1340 00f5 9C       		.byte	0x9c
 1341 00f6 08       		.uleb128 0x8
 1342 00f7 79020000 		.4byte	.LASF35
 1343 00fb 01       		.byte	0x1
 1344 00fc 5E       		.byte	0x5e
 1345 00fd 00000000 		.4byte	.LFB3
 1346 0101 A8010000 		.4byte	.LFE3-.LFB3
 1347 0105 01       		.uleb128 0x1
 1348 0106 9C       		.byte	0x9c
 1349 0107 36010000 		.4byte	0x136
 1350 010b 09       		.uleb128 0x9
 1351 010c E4020000 		.4byte	.LASF21
 1352 0110 01       		.byte	0x1
 1353 0111 60       		.byte	0x60
 1354 0112 81000000 		.4byte	0x81
 1355 0116 02       		.uleb128 0x2
 1356 0117 91       		.byte	0x91
 1357 0118 6C       		.sleb128 -20
 1358 0119 09       		.uleb128 0x9
 1359 011a C5000000 		.4byte	.LASF22
 1360 011e 01       		.byte	0x1
 1361 011f 61       		.byte	0x61
 1362 0120 81000000 		.4byte	0x81
 1363 0124 02       		.uleb128 0x2
 1364 0125 91       		.byte	0x91
 1365 0126 64       		.sleb128 -28
 1366 0127 09       		.uleb128 0x9
 1367 0128 43020000 		.4byte	.LASF23
 1368 012c 01       		.byte	0x1
 1369 012d 62       		.byte	0x62
 1370 012e 97000000 		.4byte	0x97
 1371 0132 02       		.uleb128 0x2
 1372 0133 91       		.byte	0x91
 1373 0134 68       		.sleb128 -24
 1374 0135 00       		.byte	0
 1375 0136 0A       		.uleb128 0xa
 1376 0137 92000000 		.4byte	.LASF25
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 40


 1377 013b 01       		.byte	0x1
 1378 013c 2701     		.2byte	0x127
 1379 013e 00000000 		.4byte	.LFB4
 1380 0142 38000000 		.4byte	.LFE4-.LFB4
 1381 0146 01       		.uleb128 0x1
 1382 0147 9C       		.byte	0x9c
 1383 0148 0B       		.uleb128 0xb
 1384 0149 D1030000 		.4byte	.LASF26
 1385 014d 01       		.byte	0x1
 1386 014e 4A01     		.2byte	0x14a
 1387 0150 00000000 		.4byte	.LFB5
 1388 0154 18000000 		.4byte	.LFE5-.LFB5
 1389 0158 01       		.uleb128 0x1
 1390 0159 9C       		.byte	0x9c
 1391 015a 0B       		.uleb128 0xb
 1392 015b 63000000 		.4byte	.LASF27
 1393 015f 01       		.byte	0x1
 1394 0160 6401     		.2byte	0x164
 1395 0162 00000000 		.4byte	.LFB6
 1396 0166 1C000000 		.4byte	.LFE6-.LFB6
 1397 016a 01       		.uleb128 0x1
 1398 016b 9C       		.byte	0x9c
 1399 016c 0B       		.uleb128 0xb
 1400 016d 59010000 		.4byte	.LASF28
 1401 0171 01       		.byte	0x1
 1402 0172 7D01     		.2byte	0x17d
 1403 0174 00000000 		.4byte	.LFB7
 1404 0178 1C000000 		.4byte	.LFE7-.LFB7
 1405 017c 01       		.uleb128 0x1
 1406 017d 9C       		.byte	0x9c
 1407 017e 0C       		.uleb128 0xc
 1408 017f A1020000 		.4byte	.LASF30
 1409 0183 01       		.byte	0x1
 1410 0184 9F01     		.2byte	0x19f
 1411 0186 81000000 		.4byte	0x81
 1412 018a 00000000 		.4byte	.LFB8
 1413 018e 48000000 		.4byte	.LFE8-.LFB8
 1414 0192 01       		.uleb128 0x1
 1415 0193 9C       		.byte	0x9c
 1416 0194 B7010000 		.4byte	0x1b7
 1417 0198 0D       		.uleb128 0xd
 1418 0199 EA020000 		.4byte	.LASF32
 1419 019d 01       		.byte	0x1
 1420 019e 9F01     		.2byte	0x19f
 1421 01a0 81000000 		.4byte	0x81
 1422 01a4 02       		.uleb128 0x2
 1423 01a5 91       		.byte	0x91
 1424 01a6 6C       		.sleb128 -20
 1425 01a7 0E       		.uleb128 0xe
 1426 01a8 B6000000 		.4byte	.LASF29
 1427 01ac 01       		.byte	0x1
 1428 01ad A101     		.2byte	0x1a1
 1429 01af 81000000 		.4byte	0x81
 1430 01b3 02       		.uleb128 0x2
 1431 01b4 91       		.byte	0x91
 1432 01b5 74       		.sleb128 -12
 1433 01b6 00       		.byte	0
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 41


 1434 01b7 0F       		.uleb128 0xf
 1435 01b8 8B030000 		.4byte	.LASF31
 1436 01bc 01       		.byte	0x1
 1437 01bd D501     		.2byte	0x1d5
 1438 01bf 8C000000 		.4byte	0x8c
 1439 01c3 00000000 		.4byte	.LFB9
 1440 01c7 44000000 		.4byte	.LFE9-.LFB9
 1441 01cb 01       		.uleb128 0x1
 1442 01cc 9C       		.byte	0x9c
 1443 01cd F0010000 		.4byte	0x1f0
 1444 01d1 0D       		.uleb128 0xd
 1445 01d2 8C020000 		.4byte	.LASF33
 1446 01d6 01       		.byte	0x1
 1447 01d7 D501     		.2byte	0x1d5
 1448 01d9 81000000 		.4byte	0x81
 1449 01dd 02       		.uleb128 0x2
 1450 01de 91       		.byte	0x91
 1451 01df 6C       		.sleb128 -20
 1452 01e0 0E       		.uleb128 0xe
 1453 01e1 B3010000 		.4byte	.LASF34
 1454 01e5 01       		.byte	0x1
 1455 01e6 D701     		.2byte	0x1d7
 1456 01e8 81000000 		.4byte	0x81
 1457 01ec 02       		.uleb128 0x2
 1458 01ed 91       		.byte	0x91
 1459 01ee 74       		.sleb128 -12
 1460 01ef 00       		.byte	0
 1461 01f0 10       		.uleb128 0x10
 1462 01f1 B7030000 		.4byte	.LASF36
 1463 01f5 01       		.byte	0x1
 1464 01f6 0202     		.2byte	0x202
 1465 01f8 00000000 		.4byte	.LFB10
 1466 01fc 1C000000 		.4byte	.LFE10-.LFB10
 1467 0200 01       		.uleb128 0x1
 1468 0201 9C       		.byte	0x9c
 1469 0202 16020000 		.4byte	0x216
 1470 0206 0D       		.uleb128 0xd
 1471 0207 DF020000 		.4byte	.LASF37
 1472 020b 01       		.byte	0x1
 1473 020c 0202     		.2byte	0x202
 1474 020e 81000000 		.4byte	0x81
 1475 0212 02       		.uleb128 0x2
 1476 0213 91       		.byte	0x91
 1477 0214 74       		.sleb128 -12
 1478 0215 00       		.byte	0
 1479 0216 10       		.uleb128 0x10
 1480 0217 D1010000 		.4byte	.LASF38
 1481 021b 01       		.byte	0x1
 1482 021c 2E02     		.2byte	0x22e
 1483 021e 00000000 		.4byte	.LFB11
 1484 0222 30000000 		.4byte	.LFE11-.LFB11
 1485 0226 01       		.uleb128 0x1
 1486 0227 9C       		.byte	0x9c
 1487 0228 3C020000 		.4byte	0x23c
 1488 022c 0D       		.uleb128 0xd
 1489 022d FB010000 		.4byte	.LASF39
 1490 0231 01       		.byte	0x1
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 42


 1491 0232 2E02     		.2byte	0x22e
 1492 0234 81000000 		.4byte	0x81
 1493 0238 02       		.uleb128 0x2
 1494 0239 91       		.byte	0x91
 1495 023a 74       		.sleb128 -12
 1496 023b 00       		.byte	0
 1497 023c 10       		.uleb128 0x10
 1498 023d 00000000 		.4byte	.LASF40
 1499 0241 01       		.byte	0x1
 1500 0242 4302     		.2byte	0x243
 1501 0244 00000000 		.4byte	.LFB12
 1502 0248 2C000000 		.4byte	.LFE12-.LFB12
 1503 024c 01       		.uleb128 0x1
 1504 024d 9C       		.byte	0x9c
 1505 024e 62020000 		.4byte	0x262
 1506 0252 0D       		.uleb128 0xd
 1507 0253 6F020000 		.4byte	.LASF41
 1508 0257 01       		.byte	0x1
 1509 0258 4302     		.2byte	0x243
 1510 025a 81000000 		.4byte	0x81
 1511 025e 02       		.uleb128 0x2
 1512 025f 91       		.byte	0x91
 1513 0260 74       		.sleb128 -12
 1514 0261 00       		.byte	0
 1515 0262 10       		.uleb128 0x10
 1516 0263 A1000000 		.4byte	.LASF42
 1517 0267 01       		.byte	0x1
 1518 0268 5B02     		.2byte	0x25b
 1519 026a 00000000 		.4byte	.LFB13
 1520 026e 1C000000 		.4byte	.LFE13-.LFB13
 1521 0272 01       		.uleb128 0x1
 1522 0273 9C       		.byte	0x9c
 1523 0274 88020000 		.4byte	0x288
 1524 0278 0D       		.uleb128 0xd
 1525 0279 DF020000 		.4byte	.LASF37
 1526 027d 01       		.byte	0x1
 1527 027e 5B02     		.2byte	0x25b
 1528 0280 81000000 		.4byte	0x81
 1529 0284 02       		.uleb128 0x2
 1530 0285 91       		.byte	0x91
 1531 0286 74       		.sleb128 -12
 1532 0287 00       		.byte	0
 1533 0288 10       		.uleb128 0x10
 1534 0289 50000000 		.4byte	.LASF43
 1535 028d 01       		.byte	0x1
 1536 028e 7202     		.2byte	0x272
 1537 0290 00000000 		.4byte	.LFB14
 1538 0294 1C000000 		.4byte	.LFE14-.LFB14
 1539 0298 01       		.uleb128 0x1
 1540 0299 9C       		.byte	0x9c
 1541 029a AE020000 		.4byte	0x2ae
 1542 029e 0D       		.uleb128 0xd
 1543 029f DF020000 		.4byte	.LASF37
 1544 02a3 01       		.byte	0x1
 1545 02a4 7202     		.2byte	0x272
 1546 02a6 81000000 		.4byte	0x81
 1547 02aa 02       		.uleb128 0x2
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 43


 1548 02ab 91       		.byte	0x91
 1549 02ac 74       		.sleb128 -12
 1550 02ad 00       		.byte	0
 1551 02ae 11       		.uleb128 0x11
 1552 02af 6D030000 		.4byte	.LASF44
 1553 02b3 01       		.byte	0x1
 1554 02b4 8E02     		.2byte	0x28e
 1555 02b6 00000000 		.4byte	.LFB15
 1556 02ba 30000000 		.4byte	.LFE15-.LFB15
 1557 02be 01       		.uleb128 0x1
 1558 02bf 9C       		.byte	0x9c
 1559 02c0 E3020000 		.4byte	0x2e3
 1560 02c4 0D       		.uleb128 0xd
 1561 02c5 8C020000 		.4byte	.LASF33
 1562 02c9 01       		.byte	0x1
 1563 02ca 8E02     		.2byte	0x28e
 1564 02cc 81000000 		.4byte	0x81
 1565 02d0 02       		.uleb128 0x2
 1566 02d1 91       		.byte	0x91
 1567 02d2 74       		.sleb128 -12
 1568 02d3 0D       		.uleb128 0xd
 1569 02d4 33000000 		.4byte	.LASF45
 1570 02d8 01       		.byte	0x1
 1571 02d9 8E02     		.2byte	0x28e
 1572 02db 8C000000 		.4byte	0x8c
 1573 02df 02       		.uleb128 0x2
 1574 02e0 91       		.byte	0x91
 1575 02e1 72       		.sleb128 -14
 1576 02e2 00       		.byte	0
 1577 02e3 11       		.uleb128 0x11
 1578 02e4 4F030000 		.4byte	.LASF46
 1579 02e8 01       		.byte	0x1
 1580 02e9 B002     		.2byte	0x2b0
 1581 02eb 00000000 		.4byte	.LFB16
 1582 02ef 2C000000 		.4byte	.LFE16-.LFB16
 1583 02f3 01       		.uleb128 0x1
 1584 02f4 9C       		.byte	0x9c
 1585 02f5 18030000 		.4byte	0x318
 1586 02f9 0D       		.uleb128 0xd
 1587 02fa 8C020000 		.4byte	.LASF33
 1588 02fe 01       		.byte	0x1
 1589 02ff B002     		.2byte	0x2b0
 1590 0301 81000000 		.4byte	0x81
 1591 0305 02       		.uleb128 0x2
 1592 0306 91       		.byte	0x91
 1593 0307 74       		.sleb128 -12
 1594 0308 0D       		.uleb128 0xd
 1595 0309 04020000 		.4byte	.LASF47
 1596 030d 01       		.byte	0x1
 1597 030e B002     		.2byte	0x2b0
 1598 0310 97000000 		.4byte	0x97
 1599 0314 02       		.uleb128 0x2
 1600 0315 91       		.byte	0x91
 1601 0316 70       		.sleb128 -16
 1602 0317 00       		.byte	0
 1603 0318 0F       		.uleb128 0xf
 1604 0319 B9020000 		.4byte	.LASF48
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 44


 1605 031d 01       		.byte	0x1
 1606 031e D102     		.2byte	0x2d1
 1607 0320 8C000000 		.4byte	0x8c
 1608 0324 00000000 		.4byte	.LFB17
 1609 0328 A4000000 		.4byte	.LFE17-.LFB17
 1610 032c 01       		.uleb128 0x1
 1611 032d 9C       		.byte	0x9c
 1612 032e 60030000 		.4byte	0x360
 1613 0332 0D       		.uleb128 0xd
 1614 0333 8C020000 		.4byte	.LASF33
 1615 0337 01       		.byte	0x1
 1616 0338 D102     		.2byte	0x2d1
 1617 033a 81000000 		.4byte	0x81
 1618 033e 02       		.uleb128 0x2
 1619 033f 91       		.byte	0x91
 1620 0340 6C       		.sleb128 -20
 1621 0341 0D       		.uleb128 0xd
 1622 0342 13020000 		.4byte	.LASF49
 1623 0346 01       		.byte	0x1
 1624 0347 D102     		.2byte	0x2d1
 1625 0349 8C000000 		.4byte	0x8c
 1626 034d 02       		.uleb128 0x2
 1627 034e 91       		.byte	0x91
 1628 034f 6A       		.sleb128 -22
 1629 0350 0E       		.uleb128 0xe
 1630 0351 91020000 		.4byte	.LASF50
 1631 0355 01       		.byte	0x1
 1632 0356 D302     		.2byte	0x2d3
 1633 0358 8C000000 		.4byte	0x8c
 1634 035c 02       		.uleb128 0x2
 1635 035d 91       		.byte	0x91
 1636 035e 76       		.sleb128 -10
 1637 035f 00       		.byte	0
 1638 0360 0F       		.uleb128 0xf
 1639 0361 1B000000 		.4byte	.LASF51
 1640 0365 01       		.byte	0x1
 1641 0366 0703     		.2byte	0x307
 1642 0368 97000000 		.4byte	0x97
 1643 036c 00000000 		.4byte	.LFB18
 1644 0370 98000000 		.4byte	.LFE18-.LFB18
 1645 0374 01       		.uleb128 0x1
 1646 0375 9C       		.byte	0x9c
 1647 0376 A8030000 		.4byte	0x3a8
 1648 037a 0D       		.uleb128 0xd
 1649 037b 8C020000 		.4byte	.LASF33
 1650 037f 01       		.byte	0x1
 1651 0380 0703     		.2byte	0x307
 1652 0382 81000000 		.4byte	0x81
 1653 0386 02       		.uleb128 0x2
 1654 0387 91       		.byte	0x91
 1655 0388 64       		.sleb128 -28
 1656 0389 0D       		.uleb128 0xd
 1657 038a 13020000 		.4byte	.LASF49
 1658 038e 01       		.byte	0x1
 1659 038f 0703     		.2byte	0x307
 1660 0391 8C000000 		.4byte	0x8c
 1661 0395 02       		.uleb128 0x2
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 45


 1662 0396 91       		.byte	0x91
 1663 0397 62       		.sleb128 -30
 1664 0398 0E       		.uleb128 0xe
 1665 0399 78000000 		.4byte	.LASF52
 1666 039d 01       		.byte	0x1
 1667 039e 0903     		.2byte	0x309
 1668 03a0 BB000000 		.4byte	0xbb
 1669 03a4 02       		.uleb128 0x2
 1670 03a5 91       		.byte	0x91
 1671 03a6 68       		.sleb128 -24
 1672 03a7 00       		.byte	0
 1673 03a8 0F       		.uleb128 0xf
 1674 03a9 BA010000 		.4byte	.LASF53
 1675 03ad 01       		.byte	0x1
 1676 03ae 3403     		.2byte	0x334
 1677 03b0 A2000000 		.4byte	0xa2
 1678 03b4 00000000 		.4byte	.LFB19
 1679 03b8 80000000 		.4byte	.LFE19-.LFB19
 1680 03bc 01       		.uleb128 0x1
 1681 03bd 9C       		.byte	0x9c
 1682 03be F0030000 		.4byte	0x3f0
 1683 03c2 0D       		.uleb128 0xd
 1684 03c3 8C020000 		.4byte	.LASF33
 1685 03c7 01       		.byte	0x1
 1686 03c8 3403     		.2byte	0x334
 1687 03ca 81000000 		.4byte	0x81
 1688 03ce 02       		.uleb128 0x2
 1689 03cf 91       		.byte	0x91
 1690 03d0 64       		.sleb128 -28
 1691 03d1 0D       		.uleb128 0xd
 1692 03d2 13020000 		.4byte	.LASF49
 1693 03d6 01       		.byte	0x1
 1694 03d7 3403     		.2byte	0x334
 1695 03d9 8C000000 		.4byte	0x8c
 1696 03dd 02       		.uleb128 0x2
 1697 03de 91       		.byte	0x91
 1698 03df 62       		.sleb128 -30
 1699 03e0 0E       		.uleb128 0xe
 1700 03e1 86020000 		.4byte	.LASF54
 1701 03e5 01       		.byte	0x1
 1702 03e6 3603     		.2byte	0x336
 1703 03e8 A2000000 		.4byte	0xa2
 1704 03ec 02       		.uleb128 0x2
 1705 03ed 91       		.byte	0x91
 1706 03ee 6C       		.sleb128 -20
 1707 03ef 00       		.byte	0
 1708 03f0 12       		.uleb128 0x12
 1709 03f1 81000000 		.4byte	0x81
 1710 03f5 00040000 		.4byte	0x400
 1711 03f9 13       		.uleb128 0x13
 1712 03fa DE000000 		.4byte	0xde
 1713 03fe 00       		.byte	0
 1714 03ff 00       		.byte	0
 1715 0400 09       		.uleb128 0x9
 1716 0401 96010000 		.4byte	.LASF55
 1717 0405 01       		.byte	0x1
 1718 0406 21       		.byte	0x21
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 46


 1719 0407 11040000 		.4byte	0x411
 1720 040b 05       		.uleb128 0x5
 1721 040c 03       		.byte	0x3
 1722 040d 00000000 		.4byte	ADC_SAR_channelsConfig
 1723 0411 14       		.uleb128 0x14
 1724 0412 F0030000 		.4byte	0x3f0
 1725 0416 15       		.uleb128 0x15
 1726 0417 40000000 		.4byte	.LASF56
 1727 041b 01       		.byte	0x1
 1728 041c 18       		.byte	0x18
 1729 041d 6B000000 		.4byte	0x6b
 1730 0421 05       		.uleb128 0x5
 1731 0422 03       		.byte	0x3
 1732 0423 00000000 		.4byte	ADC_SAR_initVar
 1733 0427 12       		.uleb128 0x12
 1734 0428 8C000000 		.4byte	0x8c
 1735 042c 37040000 		.4byte	0x437
 1736 0430 13       		.uleb128 0x13
 1737 0431 DE000000 		.4byte	0xde
 1738 0435 00       		.byte	0
 1739 0436 00       		.byte	0
 1740 0437 15       		.uleb128 0x15
 1741 0438 EC010000 		.4byte	.LASF57
 1742 043c 01       		.byte	0x1
 1743 043d 19       		.byte	0x19
 1744 043e 48040000 		.4byte	0x448
 1745 0442 05       		.uleb128 0x5
 1746 0443 03       		.byte	0x3
 1747 0444 00000000 		.4byte	ADC_SAR_offset
 1748 0448 06       		.uleb128 0x6
 1749 0449 27040000 		.4byte	0x427
 1750 044d 12       		.uleb128 0x12
 1751 044e 97000000 		.4byte	0x97
 1752 0452 5D040000 		.4byte	0x45d
 1753 0456 13       		.uleb128 0x13
 1754 0457 DE000000 		.4byte	0xde
 1755 045b 00       		.byte	0
 1756 045c 00       		.byte	0
 1757 045d 15       		.uleb128 0x15
 1758 045e 9F030000 		.4byte	.LASF58
 1759 0462 01       		.byte	0x1
 1760 0463 1A       		.byte	0x1a
 1761 0464 6E040000 		.4byte	0x46e
 1762 0468 05       		.uleb128 0x5
 1763 0469 03       		.byte	0x3
 1764 046a 00000000 		.4byte	ADC_SAR_countsPer10Volt
 1765 046e 06       		.uleb128 0x6
 1766 046f 4D040000 		.4byte	0x44d
 1767 0473 00       		.byte	0
 1768              		.section	.debug_abbrev,"",%progbits
 1769              	.Ldebug_abbrev0:
 1770 0000 01       		.uleb128 0x1
 1771 0001 11       		.uleb128 0x11
 1772 0002 01       		.byte	0x1
 1773 0003 25       		.uleb128 0x25
 1774 0004 0E       		.uleb128 0xe
 1775 0005 13       		.uleb128 0x13
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 47


 1776 0006 0B       		.uleb128 0xb
 1777 0007 03       		.uleb128 0x3
 1778 0008 0E       		.uleb128 0xe
 1779 0009 1B       		.uleb128 0x1b
 1780 000a 0E       		.uleb128 0xe
 1781 000b 55       		.uleb128 0x55
 1782 000c 17       		.uleb128 0x17
 1783 000d 11       		.uleb128 0x11
 1784 000e 01       		.uleb128 0x1
 1785 000f 10       		.uleb128 0x10
 1786 0010 17       		.uleb128 0x17
 1787 0011 00       		.byte	0
 1788 0012 00       		.byte	0
 1789 0013 02       		.uleb128 0x2
 1790 0014 24       		.uleb128 0x24
 1791 0015 00       		.byte	0
 1792 0016 0B       		.uleb128 0xb
 1793 0017 0B       		.uleb128 0xb
 1794 0018 3E       		.uleb128 0x3e
 1795 0019 0B       		.uleb128 0xb
 1796 001a 03       		.uleb128 0x3
 1797 001b 0E       		.uleb128 0xe
 1798 001c 00       		.byte	0
 1799 001d 00       		.byte	0
 1800 001e 03       		.uleb128 0x3
 1801 001f 24       		.uleb128 0x24
 1802 0020 00       		.byte	0
 1803 0021 0B       		.uleb128 0xb
 1804 0022 0B       		.uleb128 0xb
 1805 0023 3E       		.uleb128 0x3e
 1806 0024 0B       		.uleb128 0xb
 1807 0025 03       		.uleb128 0x3
 1808 0026 08       		.uleb128 0x8
 1809 0027 00       		.byte	0
 1810 0028 00       		.byte	0
 1811 0029 04       		.uleb128 0x4
 1812 002a 16       		.uleb128 0x16
 1813 002b 00       		.byte	0
 1814 002c 03       		.uleb128 0x3
 1815 002d 0E       		.uleb128 0xe
 1816 002e 3A       		.uleb128 0x3a
 1817 002f 0B       		.uleb128 0xb
 1818 0030 3B       		.uleb128 0x3b
 1819 0031 0B       		.uleb128 0xb
 1820 0032 49       		.uleb128 0x49
 1821 0033 13       		.uleb128 0x13
 1822 0034 00       		.byte	0
 1823 0035 00       		.byte	0
 1824 0036 05       		.uleb128 0x5
 1825 0037 16       		.uleb128 0x16
 1826 0038 00       		.byte	0
 1827 0039 03       		.uleb128 0x3
 1828 003a 0E       		.uleb128 0xe
 1829 003b 3A       		.uleb128 0x3a
 1830 003c 0B       		.uleb128 0xb
 1831 003d 3B       		.uleb128 0x3b
 1832 003e 05       		.uleb128 0x5
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 48


 1833 003f 49       		.uleb128 0x49
 1834 0040 13       		.uleb128 0x13
 1835 0041 00       		.byte	0
 1836 0042 00       		.byte	0
 1837 0043 06       		.uleb128 0x6
 1838 0044 35       		.uleb128 0x35
 1839 0045 00       		.byte	0
 1840 0046 49       		.uleb128 0x49
 1841 0047 13       		.uleb128 0x13
 1842 0048 00       		.byte	0
 1843 0049 00       		.byte	0
 1844 004a 07       		.uleb128 0x7
 1845 004b 2E       		.uleb128 0x2e
 1846 004c 00       		.byte	0
 1847 004d 3F       		.uleb128 0x3f
 1848 004e 19       		.uleb128 0x19
 1849 004f 03       		.uleb128 0x3
 1850 0050 0E       		.uleb128 0xe
 1851 0051 3A       		.uleb128 0x3a
 1852 0052 0B       		.uleb128 0xb
 1853 0053 3B       		.uleb128 0x3b
 1854 0054 0B       		.uleb128 0xb
 1855 0055 27       		.uleb128 0x27
 1856 0056 19       		.uleb128 0x19
 1857 0057 11       		.uleb128 0x11
 1858 0058 01       		.uleb128 0x1
 1859 0059 12       		.uleb128 0x12
 1860 005a 06       		.uleb128 0x6
 1861 005b 40       		.uleb128 0x40
 1862 005c 18       		.uleb128 0x18
 1863 005d 9642     		.uleb128 0x2116
 1864 005f 19       		.uleb128 0x19
 1865 0060 00       		.byte	0
 1866 0061 00       		.byte	0
 1867 0062 08       		.uleb128 0x8
 1868 0063 2E       		.uleb128 0x2e
 1869 0064 01       		.byte	0x1
 1870 0065 3F       		.uleb128 0x3f
 1871 0066 19       		.uleb128 0x19
 1872 0067 03       		.uleb128 0x3
 1873 0068 0E       		.uleb128 0xe
 1874 0069 3A       		.uleb128 0x3a
 1875 006a 0B       		.uleb128 0xb
 1876 006b 3B       		.uleb128 0x3b
 1877 006c 0B       		.uleb128 0xb
 1878 006d 27       		.uleb128 0x27
 1879 006e 19       		.uleb128 0x19
 1880 006f 11       		.uleb128 0x11
 1881 0070 01       		.uleb128 0x1
 1882 0071 12       		.uleb128 0x12
 1883 0072 06       		.uleb128 0x6
 1884 0073 40       		.uleb128 0x40
 1885 0074 18       		.uleb128 0x18
 1886 0075 9642     		.uleb128 0x2116
 1887 0077 19       		.uleb128 0x19
 1888 0078 01       		.uleb128 0x1
 1889 0079 13       		.uleb128 0x13
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 49


 1890 007a 00       		.byte	0
 1891 007b 00       		.byte	0
 1892 007c 09       		.uleb128 0x9
 1893 007d 34       		.uleb128 0x34
 1894 007e 00       		.byte	0
 1895 007f 03       		.uleb128 0x3
 1896 0080 0E       		.uleb128 0xe
 1897 0081 3A       		.uleb128 0x3a
 1898 0082 0B       		.uleb128 0xb
 1899 0083 3B       		.uleb128 0x3b
 1900 0084 0B       		.uleb128 0xb
 1901 0085 49       		.uleb128 0x49
 1902 0086 13       		.uleb128 0x13
 1903 0087 02       		.uleb128 0x2
 1904 0088 18       		.uleb128 0x18
 1905 0089 00       		.byte	0
 1906 008a 00       		.byte	0
 1907 008b 0A       		.uleb128 0xa
 1908 008c 2E       		.uleb128 0x2e
 1909 008d 00       		.byte	0
 1910 008e 3F       		.uleb128 0x3f
 1911 008f 19       		.uleb128 0x19
 1912 0090 03       		.uleb128 0x3
 1913 0091 0E       		.uleb128 0xe
 1914 0092 3A       		.uleb128 0x3a
 1915 0093 0B       		.uleb128 0xb
 1916 0094 3B       		.uleb128 0x3b
 1917 0095 05       		.uleb128 0x5
 1918 0096 27       		.uleb128 0x27
 1919 0097 19       		.uleb128 0x19
 1920 0098 11       		.uleb128 0x11
 1921 0099 01       		.uleb128 0x1
 1922 009a 12       		.uleb128 0x12
 1923 009b 06       		.uleb128 0x6
 1924 009c 40       		.uleb128 0x40
 1925 009d 18       		.uleb128 0x18
 1926 009e 9642     		.uleb128 0x2116
 1927 00a0 19       		.uleb128 0x19
 1928 00a1 00       		.byte	0
 1929 00a2 00       		.byte	0
 1930 00a3 0B       		.uleb128 0xb
 1931 00a4 2E       		.uleb128 0x2e
 1932 00a5 00       		.byte	0
 1933 00a6 3F       		.uleb128 0x3f
 1934 00a7 19       		.uleb128 0x19
 1935 00a8 03       		.uleb128 0x3
 1936 00a9 0E       		.uleb128 0xe
 1937 00aa 3A       		.uleb128 0x3a
 1938 00ab 0B       		.uleb128 0xb
 1939 00ac 3B       		.uleb128 0x3b
 1940 00ad 05       		.uleb128 0x5
 1941 00ae 27       		.uleb128 0x27
 1942 00af 19       		.uleb128 0x19
 1943 00b0 11       		.uleb128 0x11
 1944 00b1 01       		.uleb128 0x1
 1945 00b2 12       		.uleb128 0x12
 1946 00b3 06       		.uleb128 0x6
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 50


 1947 00b4 40       		.uleb128 0x40
 1948 00b5 18       		.uleb128 0x18
 1949 00b6 9742     		.uleb128 0x2117
 1950 00b8 19       		.uleb128 0x19
 1951 00b9 00       		.byte	0
 1952 00ba 00       		.byte	0
 1953 00bb 0C       		.uleb128 0xc
 1954 00bc 2E       		.uleb128 0x2e
 1955 00bd 01       		.byte	0x1
 1956 00be 3F       		.uleb128 0x3f
 1957 00bf 19       		.uleb128 0x19
 1958 00c0 03       		.uleb128 0x3
 1959 00c1 0E       		.uleb128 0xe
 1960 00c2 3A       		.uleb128 0x3a
 1961 00c3 0B       		.uleb128 0xb
 1962 00c4 3B       		.uleb128 0x3b
 1963 00c5 05       		.uleb128 0x5
 1964 00c6 27       		.uleb128 0x27
 1965 00c7 19       		.uleb128 0x19
 1966 00c8 49       		.uleb128 0x49
 1967 00c9 13       		.uleb128 0x13
 1968 00ca 11       		.uleb128 0x11
 1969 00cb 01       		.uleb128 0x1
 1970 00cc 12       		.uleb128 0x12
 1971 00cd 06       		.uleb128 0x6
 1972 00ce 40       		.uleb128 0x40
 1973 00cf 18       		.uleb128 0x18
 1974 00d0 9742     		.uleb128 0x2117
 1975 00d2 19       		.uleb128 0x19
 1976 00d3 01       		.uleb128 0x1
 1977 00d4 13       		.uleb128 0x13
 1978 00d5 00       		.byte	0
 1979 00d6 00       		.byte	0
 1980 00d7 0D       		.uleb128 0xd
 1981 00d8 05       		.uleb128 0x5
 1982 00d9 00       		.byte	0
 1983 00da 03       		.uleb128 0x3
 1984 00db 0E       		.uleb128 0xe
 1985 00dc 3A       		.uleb128 0x3a
 1986 00dd 0B       		.uleb128 0xb
 1987 00de 3B       		.uleb128 0x3b
 1988 00df 05       		.uleb128 0x5
 1989 00e0 49       		.uleb128 0x49
 1990 00e1 13       		.uleb128 0x13
 1991 00e2 02       		.uleb128 0x2
 1992 00e3 18       		.uleb128 0x18
 1993 00e4 00       		.byte	0
 1994 00e5 00       		.byte	0
 1995 00e6 0E       		.uleb128 0xe
 1996 00e7 34       		.uleb128 0x34
 1997 00e8 00       		.byte	0
 1998 00e9 03       		.uleb128 0x3
 1999 00ea 0E       		.uleb128 0xe
 2000 00eb 3A       		.uleb128 0x3a
 2001 00ec 0B       		.uleb128 0xb
 2002 00ed 3B       		.uleb128 0x3b
 2003 00ee 05       		.uleb128 0x5
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 51


 2004 00ef 49       		.uleb128 0x49
 2005 00f0 13       		.uleb128 0x13
 2006 00f1 02       		.uleb128 0x2
 2007 00f2 18       		.uleb128 0x18
 2008 00f3 00       		.byte	0
 2009 00f4 00       		.byte	0
 2010 00f5 0F       		.uleb128 0xf
 2011 00f6 2E       		.uleb128 0x2e
 2012 00f7 01       		.byte	0x1
 2013 00f8 3F       		.uleb128 0x3f
 2014 00f9 19       		.uleb128 0x19
 2015 00fa 03       		.uleb128 0x3
 2016 00fb 0E       		.uleb128 0xe
 2017 00fc 3A       		.uleb128 0x3a
 2018 00fd 0B       		.uleb128 0xb
 2019 00fe 3B       		.uleb128 0x3b
 2020 00ff 05       		.uleb128 0x5
 2021 0100 27       		.uleb128 0x27
 2022 0101 19       		.uleb128 0x19
 2023 0102 49       		.uleb128 0x49
 2024 0103 13       		.uleb128 0x13
 2025 0104 11       		.uleb128 0x11
 2026 0105 01       		.uleb128 0x1
 2027 0106 12       		.uleb128 0x12
 2028 0107 06       		.uleb128 0x6
 2029 0108 40       		.uleb128 0x40
 2030 0109 18       		.uleb128 0x18
 2031 010a 9642     		.uleb128 0x2116
 2032 010c 19       		.uleb128 0x19
 2033 010d 01       		.uleb128 0x1
 2034 010e 13       		.uleb128 0x13
 2035 010f 00       		.byte	0
 2036 0110 00       		.byte	0
 2037 0111 10       		.uleb128 0x10
 2038 0112 2E       		.uleb128 0x2e
 2039 0113 01       		.byte	0x1
 2040 0114 3F       		.uleb128 0x3f
 2041 0115 19       		.uleb128 0x19
 2042 0116 03       		.uleb128 0x3
 2043 0117 0E       		.uleb128 0xe
 2044 0118 3A       		.uleb128 0x3a
 2045 0119 0B       		.uleb128 0xb
 2046 011a 3B       		.uleb128 0x3b
 2047 011b 05       		.uleb128 0x5
 2048 011c 27       		.uleb128 0x27
 2049 011d 19       		.uleb128 0x19
 2050 011e 11       		.uleb128 0x11
 2051 011f 01       		.uleb128 0x1
 2052 0120 12       		.uleb128 0x12
 2053 0121 06       		.uleb128 0x6
 2054 0122 40       		.uleb128 0x40
 2055 0123 18       		.uleb128 0x18
 2056 0124 9742     		.uleb128 0x2117
 2057 0126 19       		.uleb128 0x19
 2058 0127 01       		.uleb128 0x1
 2059 0128 13       		.uleb128 0x13
 2060 0129 00       		.byte	0
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 52


 2061 012a 00       		.byte	0
 2062 012b 11       		.uleb128 0x11
 2063 012c 2E       		.uleb128 0x2e
 2064 012d 01       		.byte	0x1
 2065 012e 3F       		.uleb128 0x3f
 2066 012f 19       		.uleb128 0x19
 2067 0130 03       		.uleb128 0x3
 2068 0131 0E       		.uleb128 0xe
 2069 0132 3A       		.uleb128 0x3a
 2070 0133 0B       		.uleb128 0xb
 2071 0134 3B       		.uleb128 0x3b
 2072 0135 05       		.uleb128 0x5
 2073 0136 27       		.uleb128 0x27
 2074 0137 19       		.uleb128 0x19
 2075 0138 11       		.uleb128 0x11
 2076 0139 01       		.uleb128 0x1
 2077 013a 12       		.uleb128 0x12
 2078 013b 06       		.uleb128 0x6
 2079 013c 40       		.uleb128 0x40
 2080 013d 18       		.uleb128 0x18
 2081 013e 9642     		.uleb128 0x2116
 2082 0140 19       		.uleb128 0x19
 2083 0141 01       		.uleb128 0x1
 2084 0142 13       		.uleb128 0x13
 2085 0143 00       		.byte	0
 2086 0144 00       		.byte	0
 2087 0145 12       		.uleb128 0x12
 2088 0146 01       		.uleb128 0x1
 2089 0147 01       		.byte	0x1
 2090 0148 49       		.uleb128 0x49
 2091 0149 13       		.uleb128 0x13
 2092 014a 01       		.uleb128 0x1
 2093 014b 13       		.uleb128 0x13
 2094 014c 00       		.byte	0
 2095 014d 00       		.byte	0
 2096 014e 13       		.uleb128 0x13
 2097 014f 21       		.uleb128 0x21
 2098 0150 00       		.byte	0
 2099 0151 49       		.uleb128 0x49
 2100 0152 13       		.uleb128 0x13
 2101 0153 2F       		.uleb128 0x2f
 2102 0154 0B       		.uleb128 0xb
 2103 0155 00       		.byte	0
 2104 0156 00       		.byte	0
 2105 0157 14       		.uleb128 0x14
 2106 0158 26       		.uleb128 0x26
 2107 0159 00       		.byte	0
 2108 015a 49       		.uleb128 0x49
 2109 015b 13       		.uleb128 0x13
 2110 015c 00       		.byte	0
 2111 015d 00       		.byte	0
 2112 015e 15       		.uleb128 0x15
 2113 015f 34       		.uleb128 0x34
 2114 0160 00       		.byte	0
 2115 0161 03       		.uleb128 0x3
 2116 0162 0E       		.uleb128 0xe
 2117 0163 3A       		.uleb128 0x3a
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 53


 2118 0164 0B       		.uleb128 0xb
 2119 0165 3B       		.uleb128 0x3b
 2120 0166 0B       		.uleb128 0xb
 2121 0167 49       		.uleb128 0x49
 2122 0168 13       		.uleb128 0x13
 2123 0169 3F       		.uleb128 0x3f
 2124 016a 19       		.uleb128 0x19
 2125 016b 02       		.uleb128 0x2
 2126 016c 18       		.uleb128 0x18
 2127 016d 00       		.byte	0
 2128 016e 00       		.byte	0
 2129 016f 00       		.byte	0
 2130              		.section	.debug_aranges,"",%progbits
 2131 0000 A4000000 		.4byte	0xa4
 2132 0004 0200     		.2byte	0x2
 2133 0006 00000000 		.4byte	.Ldebug_info0
 2134 000a 04       		.byte	0x4
 2135 000b 00       		.byte	0
 2136 000c 0000     		.2byte	0
 2137 000e 0000     		.2byte	0
 2138 0010 00000000 		.4byte	.LFB2
 2139 0014 24000000 		.4byte	.LFE2-.LFB2
 2140 0018 00000000 		.4byte	.LFB3
 2141 001c A8010000 		.4byte	.LFE3-.LFB3
 2142 0020 00000000 		.4byte	.LFB4
 2143 0024 38000000 		.4byte	.LFE4-.LFB4
 2144 0028 00000000 		.4byte	.LFB5
 2145 002c 18000000 		.4byte	.LFE5-.LFB5
 2146 0030 00000000 		.4byte	.LFB6
 2147 0034 1C000000 		.4byte	.LFE6-.LFB6
 2148 0038 00000000 		.4byte	.LFB7
 2149 003c 1C000000 		.4byte	.LFE7-.LFB7
 2150 0040 00000000 		.4byte	.LFB8
 2151 0044 48000000 		.4byte	.LFE8-.LFB8
 2152 0048 00000000 		.4byte	.LFB9
 2153 004c 44000000 		.4byte	.LFE9-.LFB9
 2154 0050 00000000 		.4byte	.LFB10
 2155 0054 1C000000 		.4byte	.LFE10-.LFB10
 2156 0058 00000000 		.4byte	.LFB11
 2157 005c 30000000 		.4byte	.LFE11-.LFB11
 2158 0060 00000000 		.4byte	.LFB12
 2159 0064 2C000000 		.4byte	.LFE12-.LFB12
 2160 0068 00000000 		.4byte	.LFB13
 2161 006c 1C000000 		.4byte	.LFE13-.LFB13
 2162 0070 00000000 		.4byte	.LFB14
 2163 0074 1C000000 		.4byte	.LFE14-.LFB14
 2164 0078 00000000 		.4byte	.LFB15
 2165 007c 30000000 		.4byte	.LFE15-.LFB15
 2166 0080 00000000 		.4byte	.LFB16
 2167 0084 2C000000 		.4byte	.LFE16-.LFB16
 2168 0088 00000000 		.4byte	.LFB17
 2169 008c A4000000 		.4byte	.LFE17-.LFB17
 2170 0090 00000000 		.4byte	.LFB18
 2171 0094 98000000 		.4byte	.LFE18-.LFB18
 2172 0098 00000000 		.4byte	.LFB19
 2173 009c 80000000 		.4byte	.LFE19-.LFB19
 2174 00a0 00000000 		.4byte	0
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 54


 2175 00a4 00000000 		.4byte	0
 2176              		.section	.debug_ranges,"",%progbits
 2177              	.Ldebug_ranges0:
 2178 0000 00000000 		.4byte	.LFB2
 2179 0004 24000000 		.4byte	.LFE2
 2180 0008 00000000 		.4byte	.LFB3
 2181 000c A8010000 		.4byte	.LFE3
 2182 0010 00000000 		.4byte	.LFB4
 2183 0014 38000000 		.4byte	.LFE4
 2184 0018 00000000 		.4byte	.LFB5
 2185 001c 18000000 		.4byte	.LFE5
 2186 0020 00000000 		.4byte	.LFB6
 2187 0024 1C000000 		.4byte	.LFE6
 2188 0028 00000000 		.4byte	.LFB7
 2189 002c 1C000000 		.4byte	.LFE7
 2190 0030 00000000 		.4byte	.LFB8
 2191 0034 48000000 		.4byte	.LFE8
 2192 0038 00000000 		.4byte	.LFB9
 2193 003c 44000000 		.4byte	.LFE9
 2194 0040 00000000 		.4byte	.LFB10
 2195 0044 1C000000 		.4byte	.LFE10
 2196 0048 00000000 		.4byte	.LFB11
 2197 004c 30000000 		.4byte	.LFE11
 2198 0050 00000000 		.4byte	.LFB12
 2199 0054 2C000000 		.4byte	.LFE12
 2200 0058 00000000 		.4byte	.LFB13
 2201 005c 1C000000 		.4byte	.LFE13
 2202 0060 00000000 		.4byte	.LFB14
 2203 0064 1C000000 		.4byte	.LFE14
 2204 0068 00000000 		.4byte	.LFB15
 2205 006c 30000000 		.4byte	.LFE15
 2206 0070 00000000 		.4byte	.LFB16
 2207 0074 2C000000 		.4byte	.LFE16
 2208 0078 00000000 		.4byte	.LFB17
 2209 007c A4000000 		.4byte	.LFE17
 2210 0080 00000000 		.4byte	.LFB18
 2211 0084 98000000 		.4byte	.LFE18
 2212 0088 00000000 		.4byte	.LFB19
 2213 008c 80000000 		.4byte	.LFE19
 2214 0090 00000000 		.4byte	0
 2215 0094 00000000 		.4byte	0
 2216              		.section	.debug_line,"",%progbits
 2217              	.Ldebug_line0:
 2218 0000 38020000 		.section	.debug_str,"MS",%progbits,1
 2218      02004600 
 2218      00000201 
 2218      FB0E0D00 
 2218      01010101 
 2219              	.LASF40:
 2220 0000 4144435F 		.ascii	"ADC_SAR_SetHighLimit\000"
 2220      5341525F 
 2220      53657448 
 2220      6967684C 
 2220      696D6974 
 2221              	.LASF19:
 2222 0015 72656733 		.ascii	"reg32\000"
 2222      3200
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 55


 2223              	.LASF51:
 2224 001b 4144435F 		.ascii	"ADC_SAR_CountsTo_uVolts\000"
 2224      5341525F 
 2224      436F756E 
 2224      7473546F 
 2224      5F75566F 
 2225              	.LASF45:
 2226 0033 6F666673 		.ascii	"offset\000"
 2226      657400
 2227              	.LASF15:
 2228 003a 666C6F61 		.ascii	"float\000"
 2228      7400
 2229              	.LASF56:
 2230 0040 4144435F 		.ascii	"ADC_SAR_initVar\000"
 2230      5341525F 
 2230      696E6974 
 2230      56617200 
 2231              	.LASF43:
 2232 0050 4144435F 		.ascii	"ADC_SAR_SetSatMask\000"
 2232      5341525F 
 2232      53657453 
 2232      61744D61 
 2232      736B00
 2233              	.LASF27:
 2234 0063 4144435F 		.ascii	"ADC_SAR_StartConvert\000"
 2234      5341525F 
 2234      53746172 
 2234      74436F6E 
 2234      76657274 
 2235              	.LASF52:
 2236 0078 75566F6C 		.ascii	"uVolts\000"
 2236      747300
 2237              	.LASF3:
 2238 007f 73686F72 		.ascii	"short unsigned int\000"
 2238      7420756E 
 2238      7369676E 
 2238      65642069 
 2238      6E7400
 2239              	.LASF25:
 2240 0092 4144435F 		.ascii	"ADC_SAR_Enable\000"
 2240      5341525F 
 2240      456E6162 
 2240      6C6500
 2241              	.LASF42:
 2242 00a1 4144435F 		.ascii	"ADC_SAR_SetLimitMask\000"
 2242      5341525F 
 2242      5365744C 
 2242      696D6974 
 2242      4D61736B 
 2243              	.LASF29:
 2244 00b6 73746174 		.ascii	"status\000"
 2244      757300
 2245              	.LASF14:
 2246 00bd 666C6F61 		.ascii	"float32\000"
 2246      74333200 
 2247              	.LASF22:
 2248 00c5 746D7052 		.ascii	"tmpRegVal\000"
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 56


 2248      65675661 
 2248      6C00
 2249              	.LASF59:
 2250 00cf 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 2250      4320342E 
 2250      382E3420 
 2250      32303134 
 2250      30353236 
 2251 0102 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 2251      20726576 
 2251      6973696F 
 2251      6E203231 
 2251      31333538 
 2252 0135 30202D66 		.ascii	"0 -ffunction-sections\000"
 2252      66756E63 
 2252      74696F6E 
 2252      2D736563 
 2252      74696F6E 
 2253              	.LASF1:
 2254 014b 756E7369 		.ascii	"unsigned char\000"
 2254      676E6564 
 2254      20636861 
 2254      7200
 2255              	.LASF28:
 2256 0159 4144435F 		.ascii	"ADC_SAR_StopConvert\000"
 2256      5341525F 
 2256      53746F70 
 2256      436F6E76 
 2256      65727400 
 2257              	.LASF12:
 2258 016d 696E7431 		.ascii	"int16\000"
 2258      3600
 2259              	.LASF60:
 2260 0173 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\ADC_SAR.c\000"
 2260      6E657261 
 2260      7465645F 
 2260      536F7572 
 2260      63655C50 
 2261              	.LASF55:
 2262 0196 4144435F 		.ascii	"ADC_SAR_channelsConfig\000"
 2262      5341525F 
 2262      6368616E 
 2262      6E656C73 
 2262      436F6E66 
 2263              	.LASF13:
 2264 01ad 696E7433 		.ascii	"int32\000"
 2264      3200
 2265              	.LASF34:
 2266 01b3 72657375 		.ascii	"result\000"
 2266      6C7400
 2267              	.LASF53:
 2268 01ba 4144435F 		.ascii	"ADC_SAR_CountsTo_Volts\000"
 2268      5341525F 
 2268      436F756E 
 2268      7473546F 
 2268      5F566F6C 
 2269              	.LASF38:
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 57


 2270 01d1 4144435F 		.ascii	"ADC_SAR_SetLowLimit\000"
 2270      5341525F 
 2270      5365744C 
 2270      6F774C69 
 2270      6D697400 
 2271              	.LASF16:
 2272 01e5 646F7562 		.ascii	"double\000"
 2272      6C6500
 2273              	.LASF57:
 2274 01ec 4144435F 		.ascii	"ADC_SAR_offset\000"
 2274      5341525F 
 2274      6F666673 
 2274      657400
 2275              	.LASF39:
 2276 01fb 6C6F774C 		.ascii	"lowLimit\000"
 2276      696D6974 
 2276      00
 2277              	.LASF47:
 2278 0204 61646347 		.ascii	"adcGain\000"
 2278      61696E00 
 2279              	.LASF10:
 2280 020c 75696E74 		.ascii	"uint16\000"
 2280      313600
 2281              	.LASF49:
 2282 0213 61646343 		.ascii	"adcCounts\000"
 2282      6F756E74 
 2282      7300
 2283              	.LASF11:
 2284 021d 75696E74 		.ascii	"uint32\000"
 2284      333200
 2285              	.LASF5:
 2286 0224 6C6F6E67 		.ascii	"long unsigned int\000"
 2286      20756E73 
 2286      69676E65 
 2286      6420696E 
 2286      7400
 2287              	.LASF8:
 2288 0236 756E7369 		.ascii	"unsigned int\000"
 2288      676E6564 
 2288      20696E74 
 2288      00
 2289              	.LASF23:
 2290 0243 636F756E 		.ascii	"counts\000"
 2290      747300
 2291              	.LASF7:
 2292 024a 6C6F6E67 		.ascii	"long long unsigned int\000"
 2292      206C6F6E 
 2292      6720756E 
 2292      7369676E 
 2292      65642069 
 2293              	.LASF24:
 2294 0261 4144435F 		.ascii	"ADC_SAR_Start\000"
 2294      5341525F 
 2294      53746172 
 2294      7400
 2295              	.LASF41:
 2296 026f 68696768 		.ascii	"highLimit\000"
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 58


 2296      4C696D69 
 2296      7400
 2297              	.LASF35:
 2298 0279 4144435F 		.ascii	"ADC_SAR_Init\000"
 2298      5341525F 
 2298      496E6974 
 2298      00
 2299              	.LASF54:
 2300 0286 766F6C74 		.ascii	"volts\000"
 2300      7300
 2301              	.LASF33:
 2302 028c 6368616E 		.ascii	"chan\000"
 2302      00
 2303              	.LASF50:
 2304 0291 6D566F6C 		.ascii	"mVolts\000"
 2304      747300
 2305              	.LASF20:
 2306 0298 73697A65 		.ascii	"sizetype\000"
 2306      74797065 
 2306      00
 2307              	.LASF30:
 2308 02a1 4144435F 		.ascii	"ADC_SAR_IsEndConversion\000"
 2308      5341525F 
 2308      4973456E 
 2308      64436F6E 
 2308      76657273 
 2309              	.LASF48:
 2310 02b9 4144435F 		.ascii	"ADC_SAR_CountsTo_mVolts\000"
 2310      5341525F 
 2310      436F756E 
 2310      7473546F 
 2310      5F6D566F 
 2311              	.LASF6:
 2312 02d1 6C6F6E67 		.ascii	"long long int\000"
 2312      206C6F6E 
 2312      6720696E 
 2312      7400
 2313              	.LASF37:
 2314 02df 6D61736B 		.ascii	"mask\000"
 2314      00
 2315              	.LASF21:
 2316 02e4 63684E75 		.ascii	"chNum\000"
 2316      6D00
 2317              	.LASF32:
 2318 02ea 7265744D 		.ascii	"retMode\000"
 2318      6F646500 
 2319              	.LASF61:
 2320 02f2 433A5C55 		.ascii	"C:\\Users\\wzh\\Desktop\\Gucose_monitor\\Gucose_mon"
 2320      73657273 
 2320      5C777A68 
 2320      5C446573 
 2320      6B746F70 
 2321 0320 69746F72 		.ascii	"itor\\BLE_Battery_Level01.cydsn\000"
 2321      5C424C45 
 2321      5F426174 
 2321      74657279 
 2321      5F4C6576 
ARM GAS  C:\Users\wzh\AppData\Local\Temp\ccuvzsof.s 			page 59


 2322              	.LASF2:
 2323 033f 73686F72 		.ascii	"short int\000"
 2323      7420696E 
 2323      7400
 2324              	.LASF9:
 2325 0349 75696E74 		.ascii	"uint8\000"
 2325      3800
 2326              	.LASF46:
 2327 034f 4144435F 		.ascii	"ADC_SAR_SetGain\000"
 2327      5341525F 
 2327      53657447 
 2327      61696E00 
 2328              	.LASF4:
 2329 035f 6C6F6E67 		.ascii	"long int\000"
 2329      20696E74 
 2329      00
 2330              	.LASF18:
 2331 0368 63686172 		.ascii	"char\000"
 2331      00
 2332              	.LASF44:
 2333 036d 4144435F 		.ascii	"ADC_SAR_SetOffset\000"
 2333      5341525F 
 2333      5365744F 
 2333      66667365 
 2333      7400
 2334              	.LASF0:
 2335 037f 7369676E 		.ascii	"signed char\000"
 2335      65642063 
 2335      68617200 
 2336              	.LASF31:
 2337 038b 4144435F 		.ascii	"ADC_SAR_GetResult16\000"
 2337      5341525F 
 2337      47657452 
 2337      6573756C 
 2337      74313600 
 2338              	.LASF58:
 2339 039f 4144435F 		.ascii	"ADC_SAR_countsPer10Volt\000"
 2339      5341525F 
 2339      636F756E 
 2339      74735065 
 2339      72313056 
 2340              	.LASF36:
 2341 03b7 4144435F 		.ascii	"ADC_SAR_SetChanMask\000"
 2341      5341525F 
 2341      53657443 
 2341      68616E4D 
 2341      61736B00 
 2342              	.LASF17:
 2343 03cb 696E7436 		.ascii	"int64\000"
 2343      3400
 2344              	.LASF26:
 2345 03d1 4144435F 		.ascii	"ADC_SAR_Stop\000"
 2345      5341525F 
 2345      53746F70 
 2345      00
 2346              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br
