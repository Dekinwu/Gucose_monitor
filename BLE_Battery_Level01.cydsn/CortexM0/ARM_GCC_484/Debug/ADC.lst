ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ADC.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	ADC_initVar
  18              		.bss
  19              		.type	ADC_initVar, %object
  20              		.size	ADC_initVar, 1
  21              	ADC_initVar:
  22 0000 00       		.space	1
  23              		.comm	ADC_offset,2,4
  24              		.comm	ADC_countsPer10Volt,4,4
  25              		.section	.rodata
  26              		.align	2
  27              		.type	ADC_channelsConfig, %object
  28              		.size	ADC_channelsConfig, 4
  29              	ADC_channelsConfig:
  30 0000 00040000 		.word	1024
  31              		.section	.text.ADC_Start,"ax",%progbits
  32              		.align	2
  33              		.global	ADC_Start
  34              		.code	16
  35              		.thumb_func
  36              		.type	ADC_Start, %function
  37              	ADC_Start:
  38              	.LFB2:
  39              		.file 1 ".\\Generated_Source\\PSoC4\\ADC.c"
   1:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/ADC.c **** * File Name: ADC.c
   3:.\Generated_Source\PSoC4/ADC.c **** * Version 2.0
   4:.\Generated_Source\PSoC4/ADC.c **** *
   5:.\Generated_Source\PSoC4/ADC.c **** * Description:
   6:.\Generated_Source\PSoC4/ADC.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:.\Generated_Source\PSoC4/ADC.c **** *  Approximation ADC Component Component.
   8:.\Generated_Source\PSoC4/ADC.c **** *
   9:.\Generated_Source\PSoC4/ADC.c **** * Note:
  10:.\Generated_Source\PSoC4/ADC.c **** *
  11:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  12:.\Generated_Source\PSoC4/ADC.c **** * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  13:.\Generated_Source\PSoC4/ADC.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:.\Generated_Source\PSoC4/ADC.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:.\Generated_Source\PSoC4/ADC.c **** * the software package with which this file was provided.
  16:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  17:.\Generated_Source\PSoC4/ADC.c **** 
  18:.\Generated_Source\PSoC4/ADC.c **** #include "ADC.h"
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 2


  19:.\Generated_Source\PSoC4/ADC.c **** 
  20:.\Generated_Source\PSoC4/ADC.c **** 
  21:.\Generated_Source\PSoC4/ADC.c **** /***************************************
  22:.\Generated_Source\PSoC4/ADC.c **** * Global data allocation
  23:.\Generated_Source\PSoC4/ADC.c **** ***************************************/
  24:.\Generated_Source\PSoC4/ADC.c **** uint8 ADC_initVar = 0u;
  25:.\Generated_Source\PSoC4/ADC.c **** volatile int16 ADC_offset[ADC_TOTAL_CHANNELS_NUM];
  26:.\Generated_Source\PSoC4/ADC.c **** volatile int32 ADC_countsPer10Volt[ADC_TOTAL_CHANNELS_NUM];   /* Gain compensation */
  27:.\Generated_Source\PSoC4/ADC.c **** 
  28:.\Generated_Source\PSoC4/ADC.c **** 
  29:.\Generated_Source\PSoC4/ADC.c **** /***************************************
  30:.\Generated_Source\PSoC4/ADC.c **** * Local data allocation
  31:.\Generated_Source\PSoC4/ADC.c **** ***************************************/
  32:.\Generated_Source\PSoC4/ADC.c **** /* Channels configuration generated by customiser */
  33:.\Generated_Source\PSoC4/ADC.c **** static const uint32 CYCODE ADC_channelsConfig[] = { 0x00000400u };
  34:.\Generated_Source\PSoC4/ADC.c **** 
  35:.\Generated_Source\PSoC4/ADC.c **** 
  36:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  37:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Start
  38:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  39:.\Generated_Source\PSoC4/ADC.c **** *
  40:.\Generated_Source\PSoC4/ADC.c **** * Summary:
  41:.\Generated_Source\PSoC4/ADC.c **** *  Performs all required initialization for this component
  42:.\Generated_Source\PSoC4/ADC.c **** *  and enables the power. The power will be set to the appropriate
  43:.\Generated_Source\PSoC4/ADC.c **** *  power based on the clock frequency.
  44:.\Generated_Source\PSoC4/ADC.c **** *
  45:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
  46:.\Generated_Source\PSoC4/ADC.c **** *  None.
  47:.\Generated_Source\PSoC4/ADC.c **** *
  48:.\Generated_Source\PSoC4/ADC.c **** * Return:
  49:.\Generated_Source\PSoC4/ADC.c **** *  None.
  50:.\Generated_Source\PSoC4/ADC.c **** *
  51:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
  52:.\Generated_Source\PSoC4/ADC.c **** *  The ADC_initVar variable is used to indicate when/if initial
  53:.\Generated_Source\PSoC4/ADC.c **** *  configuration of this component has happened. The variable is initialized to
  54:.\Generated_Source\PSoC4/ADC.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  55:.\Generated_Source\PSoC4/ADC.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  56:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  57:.\Generated_Source\PSoC4/ADC.c **** *  If re-initialization of the component is required the variable should be set
  58:.\Generated_Source\PSoC4/ADC.c **** *  to zero before call of ADC_Start() routine, or the user may call
  59:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Init() and ADC_Enable() as done in the
  60:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  61:.\Generated_Source\PSoC4/ADC.c **** *
  62:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  63:.\Generated_Source\PSoC4/ADC.c **** void ADC_Start(void)
  64:.\Generated_Source\PSoC4/ADC.c **** {
  40              		.loc 1 64 0
  41              		.cfi_startproc
  42 0000 80B5     		push	{r7, lr}
  43              		.cfi_def_cfa_offset 8
  44              		.cfi_offset 7, -8
  45              		.cfi_offset 14, -4
  46 0002 00AF     		add	r7, sp, #0
  47              		.cfi_def_cfa_register 7
  65:.\Generated_Source\PSoC4/ADC.c ****     /* If not Initialized then initialize all required hardware and software */
  66:.\Generated_Source\PSoC4/ADC.c ****     if(ADC_initVar == 0u)
  48              		.loc 1 66 0
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 3


  49 0004 064B     		ldr	r3, .L3
  50 0006 1B78     		ldrb	r3, [r3]
  51 0008 002B     		cmp	r3, #0
  52 000a 04D1     		bne	.L2
  67:.\Generated_Source\PSoC4/ADC.c ****     {
  68:.\Generated_Source\PSoC4/ADC.c ****         ADC_Init();
  53              		.loc 1 68 0
  54 000c FFF7FEFF 		bl	ADC_Init
  69:.\Generated_Source\PSoC4/ADC.c ****         ADC_initVar = 1u;
  55              		.loc 1 69 0
  56 0010 034B     		ldr	r3, .L3
  57 0012 0122     		mov	r2, #1
  58 0014 1A70     		strb	r2, [r3]
  59              	.L2:
  70:.\Generated_Source\PSoC4/ADC.c ****     }
  71:.\Generated_Source\PSoC4/ADC.c ****     ADC_Enable();
  60              		.loc 1 71 0
  61 0016 FFF7FEFF 		bl	ADC_Enable
  72:.\Generated_Source\PSoC4/ADC.c **** }
  62              		.loc 1 72 0
  63 001a BD46     		mov	sp, r7
  64              		@ sp needed
  65 001c 80BD     		pop	{r7, pc}
  66              	.L4:
  67 001e C046     		.align	2
  68              	.L3:
  69 0020 00000000 		.word	ADC_initVar
  70              		.cfi_endproc
  71              	.LFE2:
  72              		.size	ADC_Start, .-ADC_Start
  73              		.global	__aeabi_idiv
  74              		.section	.text.ADC_Init,"ax",%progbits
  75              		.align	2
  76              		.global	ADC_Init
  77              		.code	16
  78              		.thumb_func
  79              		.type	ADC_Init, %function
  80              	ADC_Init:
  81              	.LFB3:
  73:.\Generated_Source\PSoC4/ADC.c **** 
  74:.\Generated_Source\PSoC4/ADC.c **** 
  75:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  76:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Init
  77:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  78:.\Generated_Source\PSoC4/ADC.c **** *
  79:.\Generated_Source\PSoC4/ADC.c **** * Summary:
  80:.\Generated_Source\PSoC4/ADC.c **** *  Initialize component's parameters to the parameters set by user in the
  81:.\Generated_Source\PSoC4/ADC.c **** *  customizer of the component placed onto schematic. Usually called in
  82:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start().
  83:.\Generated_Source\PSoC4/ADC.c **** *
  84:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
  85:.\Generated_Source\PSoC4/ADC.c **** *  None.
  86:.\Generated_Source\PSoC4/ADC.c **** *
  87:.\Generated_Source\PSoC4/ADC.c **** * Return:
  88:.\Generated_Source\PSoC4/ADC.c **** *  None.
  89:.\Generated_Source\PSoC4/ADC.c **** *
  90:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 4


  91:.\Generated_Source\PSoC4/ADC.c **** *  The ADC_offset variable is initialized.
  92:.\Generated_Source\PSoC4/ADC.c **** *
  93:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  94:.\Generated_Source\PSoC4/ADC.c **** void ADC_Init(void)
  95:.\Generated_Source\PSoC4/ADC.c **** {
  82              		.loc 1 95 0
  83              		.cfi_startproc
  84 0000 90B5     		push	{r4, r7, lr}
  85              		.cfi_def_cfa_offset 12
  86              		.cfi_offset 4, -12
  87              		.cfi_offset 7, -8
  88              		.cfi_offset 14, -4
  89 0002 85B0     		sub	sp, sp, #20
  90              		.cfi_def_cfa_offset 32
  91 0004 00AF     		add	r7, sp, #0
  92              		.cfi_def_cfa_register 7
  96:.\Generated_Source\PSoC4/ADC.c ****     uint32 chNum;
  97:.\Generated_Source\PSoC4/ADC.c ****     uint32 tmpRegVal;
  98:.\Generated_Source\PSoC4/ADC.c ****     int32 counts;
  99:.\Generated_Source\PSoC4/ADC.c **** 
 100:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 101:.\Generated_Source\PSoC4/ADC.c ****         static const uint8 CYCODE ADC_InputsPlacement[] =
 102:.\Generated_Source\PSoC4/ADC.c ****         {
 103:.\Generated_Source\PSoC4/ADC.c ****             (uint8)(ADC_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 104:.\Generated_Source\PSoC4/ADC.c ****             (uint8)ADC_cy_psoc4_sarmux_8__CH_0_PIN
 105:.\Generated_Source\PSoC4/ADC.c ****             ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 106:.\Generated_Source\PSoC4/ADC.c ****              (uint8)ADC_cy_psoc4_sarmux_8__CH_1_PIN
 107:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 2u)
 108:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 109:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_2_PIN
 110:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 2u */
 111:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 3u)
 112:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 113:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_3_PIN
 114:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 3u */
 115:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 4u)
 116:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 117:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_4_PIN
 118:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 4u */
 119:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 5u)
 120:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 121:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_5_PIN
 122:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 5u */
 123:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 6u)
 124:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 125:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_6_PIN
 126:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 6u */
 127:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 7u)
 128:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 129:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_7_PIN
 130:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 7u */
 131:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 8u)
 132:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 133:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_8_PIN
 134:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 8u */
 135:.\Generated_Source\PSoC4/ADC.c ****         };
 136:.\Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 5


 137:.\Generated_Source\PSoC4/ADC.c **** 
 138:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_IRQ_REMOVE == 0u)
 139:.\Generated_Source\PSoC4/ADC.c ****         /* Start and set interrupt vector */
 140:.\Generated_Source\PSoC4/ADC.c ****         CyIntSetPriority(ADC_INTC_NUMBER, ADC_INTC_PRIOR_NUMBER);
  93              		.loc 1 140 0
  94 0006 0F20     		mov	r0, #15
  95 0008 0321     		mov	r1, #3
  96 000a FFF7FEFF 		bl	CyIntSetPriority
 141:.\Generated_Source\PSoC4/ADC.c ****         (void)CyIntSetVector(ADC_INTC_NUMBER, &ADC_ISR);
  97              		.loc 1 141 0
  98 000e 544B     		ldr	r3, .L15
  99 0010 0F20     		mov	r0, #15
 100 0012 191C     		mov	r1, r3
 101 0014 FFF7FEFF 		bl	CyIntSetVector
 142:.\Generated_Source\PSoC4/ADC.c ****     #endif   /* End ADC_IRQ_REMOVE */
 143:.\Generated_Source\PSoC4/ADC.c **** 
 144:.\Generated_Source\PSoC4/ADC.c ****     /* Init SAR and MUX registers */
 145:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = ADC_DEFAULT_EN_CHANNELS;
 102              		.loc 1 145 0
 103 0018 524B     		ldr	r3, .L15+4
 104 001a 0122     		mov	r2, #1
 105 001c 1A60     		str	r2, [r3]
 146:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG = ADC_DEFAULT_CTRL_REG_CFG;
 106              		.loc 1 146 0
 107 001e 524B     		ldr	r3, .L15+8
 108 0020 524A     		ldr	r2, .L15+12
 109 0022 1A60     		str	r2, [r3]
 147:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_CTRL_REG = ADC_DEFAULT_SAMPLE_CTRL_REG_CFG;
 110              		.loc 1 147 0
 111 0024 524B     		ldr	r3, .L15+16
 112 0026 534A     		ldr	r2, .L15+20
 113 0028 1A60     		str	r2, [r3]
 148:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG = ADC_DEFAULT_RANGE_THRES_REG_CFG;
 114              		.loc 1 148 0
 115 002a 534B     		ldr	r3, .L15+24
 116 002c 534A     		ldr	r2, .L15+28
 117 002e 1A60     		str	r2, [r3]
 149:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_COND_REG  = ADC_COMPARE_MODE;
 118              		.loc 1 149 0
 119 0030 534B     		ldr	r3, .L15+32
 120 0032 0022     		mov	r2, #0
 121 0034 1A60     		str	r2, [r3]
 150:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME01_REG = ADC_DEFAULT_SAMPLE_TIME01_REG_CFG;
 122              		.loc 1 150 0
 123 0036 534B     		ldr	r3, .L15+36
 124 0038 534A     		ldr	r2, .L15+40
 125 003a 1A60     		str	r2, [r3]
 151:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME23_REG = ADC_DEFAULT_SAMPLE_TIME23_REG_CFG;
 126              		.loc 1 151 0
 127 003c 534B     		ldr	r3, .L15+44
 128 003e 524A     		ldr	r2, .L15+40
 129 0040 1A60     		str	r2, [r3]
 152:.\Generated_Source\PSoC4/ADC.c ****     
 153:.\Generated_Source\PSoC4/ADC.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
 154:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_MUX_SWITCH0 != 0u)
 155:.\Generated_Source\PSoC4/ADC.c ****         ADC_MUX_SWITCH0_REG |= ADC_DEFAULT_MUX_SWITCH0;
 130              		.loc 1 155 0
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 6


 131 0042 534B     		ldr	r3, .L15+48
 132 0044 524A     		ldr	r2, .L15+48
 133 0046 1268     		ldr	r2, [r2]
 134 0048 8021     		mov	r1, #128
 135 004a 4902     		lsl	r1, r1, #9
 136 004c 0A43     		orr	r2, r1
 137 004e 1A60     		str	r2, [r3]
 156:.\Generated_Source\PSoC4/ADC.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 157:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 158:.\Generated_Source\PSoC4/ADC.c ****             ADC_MUX_SWITCH_HW_CTRL_REG |= ADC_DEFAULT_MUX_SWITCH0;
 159:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_TOTAL_CHANNELS_NUM > 1u */
 160:.\Generated_Source\PSoC4/ADC.c ****     #endif /*ADC_CHANNELS_MODE !=0 */
 161:.\Generated_Source\PSoC4/ADC.c **** 
 162:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = 0u;
 138              		.loc 1 162 0
 139 0050 504B     		ldr	r3, .L15+52
 140 0052 0022     		mov	r2, #0
 141 0054 1A60     		str	r2, [r3]
 163:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = 0u;
 142              		.loc 1 163 0
 143 0056 504B     		ldr	r3, .L15+56
 144 0058 0022     		mov	r2, #0
 145 005a 1A60     		str	r2, [r3]
 164:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_INTR_MASK_REG = ADC_SAR_INTR_MASK;
 146              		.loc 1 164 0
 147 005c 4F4B     		ldr	r3, .L15+60
 148 005e 0122     		mov	r2, #1
 149 0060 1A60     		str	r2, [r3]
 165:.\Generated_Source\PSoC4/ADC.c **** 
 166:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4)
 167:.\Generated_Source\PSoC4/ADC.c ****         ADC_ANA_TRIM_REG = ADC_TRIM_COEF;
 168:.\Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4) */
 169:.\Generated_Source\PSoC4/ADC.c **** 
 170:.\Generated_Source\PSoC4/ADC.c ****     /* Read and modify default configuration based on characterization */
 171:.\Generated_Source\PSoC4/ADC.c ****     tmpRegVal = ADC_SAR_DFT_CTRL_REG;
 150              		.loc 1 171 0
 151 0062 4F4B     		ldr	r3, .L15+64
 152 0064 1B68     		ldr	r3, [r3]
 153 0066 7B60     		str	r3, [r7, #4]
 172:.\Generated_Source\PSoC4/ADC.c ****     tmpRegVal &= (uint32)~ADC_DCEN;
 154              		.loc 1 172 0
 155 0068 7A68     		ldr	r2, [r7, #4]
 156 006a 4E4B     		ldr	r3, .L15+68
 157 006c 1340     		and	r3, r2
 158 006e 7B60     		str	r3, [r7, #4]
 173:.\Generated_Source\PSoC4/ADC.c ****     
 174:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4)
 175:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_NOMINAL_CLOCK_FREQ > (ADC_MAX_FREQUENCY / 2))
 176:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_SEL_CSEL_DFT_CHAR;
 177:.\Generated_Source\PSoC4/ADC.c ****         #else  /* clock speed < 9 Mhz */
 178:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 179:.\Generated_Source\PSoC4/ADC.c ****         #endif /* clock speed > 9 Mhz */
 180:.\Generated_Source\PSoC4/ADC.c ****     #else
 181:.\Generated_Source\PSoC4/ADC.c ****         #if ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 182:.\Generated_Source\PSoC4/ADC.c ****              (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF))
 183:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 184:.\Generated_Source\PSoC4/ADC.c ****         #else
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 7


 185:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DCEN;
 159              		.loc 1 185 0
 160 0070 7B68     		ldr	r3, [r7, #4]
 161 0072 8022     		mov	r2, #128
 162 0074 9205     		lsl	r2, r2, #22
 163 0076 1343     		orr	r3, r2
 164 0078 7B60     		str	r3, [r7, #4]
 186:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)~ADC_DLY_INC;
 165              		.loc 1 186 0
 166 007a 7B68     		ldr	r3, [r7, #4]
 167 007c 0122     		mov	r2, #1
 168 007e 9343     		bic	r3, r2
 169 0080 7B60     		str	r3, [r7, #4]
 187:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 188:.\Generated_Source\PSoC4/ADC.c ****                    (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF)) */
 189:.\Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4) */
 190:.\Generated_Source\PSoC4/ADC.c ****     
 191:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_DFT_CTRL_REG = tmpRegVal;
 170              		.loc 1 191 0
 171 0082 474B     		ldr	r3, .L15+64
 172 0084 7A68     		ldr	r2, [r7, #4]
 173 0086 1A60     		str	r2, [r3]
 192:.\Generated_Source\PSoC4/ADC.c **** 
 193:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_MAX_RESOLUTION != ADC_RESOLUTION_12)
 194:.\Generated_Source\PSoC4/ADC.c ****         ADC_WOUNDING_REG = ADC_ALT_WOUNDING;
 195:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 196:.\Generated_Source\PSoC4/ADC.c **** 
 197:.\Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 174              		.loc 1 197 0
 175 0088 0023     		mov	r3, #0
 176 008a FB60     		str	r3, [r7, #12]
 177 008c 61E0     		b	.L6
 178              	.L14:
 198:.\Generated_Source\PSoC4/ADC.c ****     {
 199:.\Generated_Source\PSoC4/ADC.c ****         tmpRegVal = (ADC_channelsConfig[chNum] & ADC_CHANNEL_CONFIG_MASK);
 179              		.loc 1 199 0
 180 008e 8023     		mov	r3, #128
 181 0090 DA00     		lsl	r2, r3, #3
 182 0092 DC23     		mov	r3, #220
 183 0094 9B01     		lsl	r3, r3, #6
 184 0096 1340     		and	r3, r2
 185 0098 7B60     		str	r3, [r7, #4]
 200:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 201:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_InputsPlacement[chNum];
 202:.\Generated_Source\PSoC4/ADC.c ****         #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 203:.\Generated_Source\PSoC4/ADC.c ****         
 204:.\Generated_Source\PSoC4/ADC.c ****         
 205:.\Generated_Source\PSoC4/ADC.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 206:.\Generated_Source\PSoC4/ADC.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 207:.\Generated_Source\PSoC4/ADC.c ****         *  (0) and 8-bit (1) resolution.
 208:.\Generated_Source\PSoC4/ADC.c ****         */
 209:.\Generated_Source\PSoC4/ADC.c ****         #if((ADC_MAX_RESOLUTION != ADC_RESOLUTION_12) && \
 210:.\Generated_Source\PSoC4/ADC.c ****             (ADC_ALT_WOUNDING == ADC_WOUNDING_10BIT))
 211:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)(~ADC_ALT_RESOLUTION_ON);
 212:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 213:.\Generated_Source\PSoC4/ADC.c **** 
 214:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 8


 215:.\Generated_Source\PSoC4/ADC.c ****         if(chNum < ADC_SEQUENCED_CHANNELS_NUM)
 216:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 217:.\Generated_Source\PSoC4/ADC.c ****         {
 218:.\Generated_Source\PSoC4/ADC.c ****             CY_SET_REG32((reg32 *)(ADC_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRegVal);
 186              		.loc 1 218 0
 187 009a FB68     		ldr	r3, [r7, #12]
 188 009c 9B00     		lsl	r3, r3, #2
 189 009e 424A     		ldr	r2, .L15+72
 190 00a0 9B18     		add	r3, r3, r2
 191 00a2 7A68     		ldr	r2, [r7, #4]
 192 00a4 1A60     		str	r2, [r3]
 219:.\Generated_Source\PSoC4/ADC.c **** 
 220:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 193              		.loc 1 220 0
 194 00a6 8023     		mov	r3, #128
 195 00a8 DA00     		lsl	r2, r3, #3
 196 00aa 0123     		mov	r3, #1
 197 00ac 1340     		and	r3, r2
 198 00ae 0AD0     		beq	.L7
 221:.\Generated_Source\PSoC4/ADC.c ****             {
 222:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 199              		.loc 1 222 0
 200 00b0 384B     		ldr	r3, .L15+52
 201 00b2 384A     		ldr	r2, .L15+52
 202 00b4 1168     		ldr	r1, [r2]
 203 00b6 FA68     		ldr	r2, [r7, #12]
 204 00b8 0120     		mov	r0, #1
 205 00ba 041C     		mov	r4, r0
 206 00bc 9440     		lsl	r4, r4, r2
 207 00be 221C     		mov	r2, r4
 208 00c0 92B2     		uxth	r2, r2
 209 00c2 0A43     		orr	r2, r1
 210 00c4 1A60     		str	r2, [r3]
 211              	.L7:
 223:.\Generated_Source\PSoC4/ADC.c ****             }
 224:.\Generated_Source\PSoC4/ADC.c **** 
 225:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 212              		.loc 1 225 0
 213 00c6 8023     		mov	r3, #128
 214 00c8 DA00     		lsl	r2, r3, #3
 215 00ca 0223     		mov	r3, #2
 216 00cc 1340     		and	r3, r2
 217 00ce 0AD0     		beq	.L8
 226:.\Generated_Source\PSoC4/ADC.c ****             {
 227:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 218              		.loc 1 227 0
 219 00d0 314B     		ldr	r3, .L15+56
 220 00d2 314A     		ldr	r2, .L15+56
 221 00d4 1168     		ldr	r1, [r2]
 222 00d6 FA68     		ldr	r2, [r7, #12]
 223 00d8 0120     		mov	r0, #1
 224 00da 041C     		mov	r4, r0
 225 00dc 9440     		lsl	r4, r4, r2
 226 00de 221C     		mov	r2, r4
 227 00e0 92B2     		uxth	r2, r2
 228 00e2 0A43     		orr	r2, r1
 229 00e4 1A60     		str	r2, [r3]
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 9


 230              	.L8:
 228:.\Generated_Source\PSoC4/ADC.c ****             }
 229:.\Generated_Source\PSoC4/ADC.c ****         }
 230:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 231:.\Generated_Source\PSoC4/ADC.c ****             else
 232:.\Generated_Source\PSoC4/ADC.c ****             {
 233:.\Generated_Source\PSoC4/ADC.c ****                 CY_SET_REG32(ADC_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | ADC_INJ_TAILGATING);
 234:.\Generated_Source\PSoC4/ADC.c **** 
 235:.\Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 236:.\Generated_Source\PSoC4/ADC.c ****                 {
 237:.\Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_SATURATE_MASK;
 238:.\Generated_Source\PSoC4/ADC.c ****                 }
 239:.\Generated_Source\PSoC4/ADC.c **** 
 240:.\Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 241:.\Generated_Source\PSoC4/ADC.c ****                 {
 242:.\Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_RANGE_MASK;
 243:.\Generated_Source\PSoC4/ADC.c ****                 }
 244:.\Generated_Source\PSoC4/ADC.c ****             }
 245:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 246:.\Generated_Source\PSoC4/ADC.c **** 
 247:.\Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_ALT_RESOLUTION_ON) != 0u)
 231              		.loc 1 247 0
 232 00e6 8023     		mov	r3, #128
 233 00e8 DA00     		lsl	r2, r3, #3
 234 00ea 8023     		mov	r3, #128
 235 00ec 9B00     		lsl	r3, r3, #2
 236 00ee 1340     		and	r3, r2
 237 00f0 03D0     		beq	.L9
 248:.\Generated_Source\PSoC4/ADC.c ****         {
 249:.\Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_DEFAULT_MAX_WRK_ALT;
 238              		.loc 1 249 0
 239 00f2 8023     		mov	r3, #128
 240 00f4 5B00     		lsl	r3, r3, #1
 241 00f6 BB60     		str	r3, [r7, #8]
 242 00f8 02E0     		b	.L10
 243              	.L9:
 250:.\Generated_Source\PSoC4/ADC.c ****         }
 251:.\Generated_Source\PSoC4/ADC.c ****         else
 252:.\Generated_Source\PSoC4/ADC.c ****         {
 253:.\Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_SAR_WRK_MAX_12BIT;
 244              		.loc 1 253 0
 245 00fa 8023     		mov	r3, #128
 246 00fc 5B01     		lsl	r3, r3, #5
 247 00fe BB60     		str	r3, [r7, #8]
 248              	.L10:
 254:.\Generated_Source\PSoC4/ADC.c ****         }
 255:.\Generated_Source\PSoC4/ADC.c **** 
 256:.\Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_DIFFERENTIAL_EN) == 0u)
 249              		.loc 1 256 0
 250 0100 8023     		mov	r3, #128
 251 0102 DA00     		lsl	r2, r3, #3
 252 0104 8023     		mov	r3, #128
 253 0106 5B00     		lsl	r3, r3, #1
 254 0108 1340     		and	r3, r2
 255 010a 05D1     		bne	.L11
 257:.\Generated_Source\PSoC4/ADC.c ****         {
 258:.\Generated_Source\PSoC4/ADC.c ****             #if((ADC_DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED) && \
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 10


 259:.\Generated_Source\PSoC4/ADC.c ****                 (ADC_DEFAULT_NEG_INPUT_SEL == ADC__VREF))
 260:.\Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 261:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / -2);
 262:.\Generated_Source\PSoC4/ADC.c ****             #else
 263:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 256              		.loc 1 263 0
 257 010c 274B     		ldr	r3, .L15+76
 258 010e FA68     		ldr	r2, [r7, #12]
 259 0110 5200     		lsl	r2, r2, #1
 260 0112 0021     		mov	r1, #0
 261 0114 D152     		strh	r1, [r2, r3]
 262 0116 09E0     		b	.L12
 263              	.L11:
 264:.\Generated_Source\PSoC4/ADC.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED */
 265:.\Generated_Source\PSoC4/ADC.c ****         }
 266:.\Generated_Source\PSoC4/ADC.c ****         else    /* Differential channel */
 267:.\Generated_Source\PSoC4/ADC.c ****         {
 268:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED)
 269:.\Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the half scale to convert results to signed format */
 270:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / 2);
 264              		.loc 1 270 0
 265 0118 BB68     		ldr	r3, [r7, #8]
 266 011a 002B     		cmp	r3, #0
 267 011c 00DA     		bge	.L13
 268 011e 0133     		add	r3, r3, #1
 269              	.L13:
 270 0120 5B10     		asr	r3, r3, #1
 271 0122 99B2     		uxth	r1, r3
 272 0124 214B     		ldr	r3, .L15+76
 273 0126 FA68     		ldr	r2, [r7, #12]
 274 0128 5200     		lsl	r2, r2, #1
 275 012a D152     		strh	r1, [r2, r3]
 276              	.L12:
 271:.\Generated_Source\PSoC4/ADC.c ****             #else
 272:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 273:.\Generated_Source\PSoC4/ADC.c ****             #endif /* end ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED */
 274:.\Generated_Source\PSoC4/ADC.c ****         }
 275:.\Generated_Source\PSoC4/ADC.c ****         /* Calculate gain in counts per 10 volts with rounding */
 276:.\Generated_Source\PSoC4/ADC.c ****         ADC_countsPer10Volt[chNum] = (int16)(((counts * ADC_10MV_COUNTS) +
 277              		.loc 1 276 0
 278 012c BB68     		ldr	r3, [r7, #8]
 279 012e 204A     		ldr	r2, .L15+80
 280 0130 5343     		mul	r3, r2
 281 0132 204A     		ldr	r2, .L15+84
 282 0134 9B18     		add	r3, r3, r2
 277:.\Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 283              		.loc 1 277 0
 284 0136 181C     		mov	r0, r3
 285 0138 1F49     		ldr	r1, .L15+88
 286 013a FFF7FEFF 		bl	__aeabi_idiv
 287 013e 031C     		mov	r3, r0
 276:.\Generated_Source\PSoC4/ADC.c ****         ADC_countsPer10Volt[chNum] = (int16)(((counts * ADC_10MV_COUNTS) +
 288              		.loc 1 276 0
 289 0140 9BB2     		uxth	r3, r3
 290 0142 19B2     		sxth	r1, r3
 291 0144 1D4B     		ldr	r3, .L15+92
 292 0146 FA68     		ldr	r2, [r7, #12]
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 11


 293 0148 9200     		lsl	r2, r2, #2
 294 014a D150     		str	r1, [r2, r3]
 197:.\Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 295              		.loc 1 197 0
 296 014c FB68     		ldr	r3, [r7, #12]
 297 014e 0133     		add	r3, r3, #1
 298 0150 FB60     		str	r3, [r7, #12]
 299              	.L6:
 197:.\Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 300              		.loc 1 197 0 is_stmt 0 discriminator 1
 301 0152 FB68     		ldr	r3, [r7, #12]
 302 0154 002B     		cmp	r3, #0
 303 0156 9AD0     		beq	.L14
 278:.\Generated_Source\PSoC4/ADC.c ****     }
 279:.\Generated_Source\PSoC4/ADC.c **** }
 304              		.loc 1 279 0 is_stmt 1
 305 0158 BD46     		mov	sp, r7
 306 015a 05B0     		add	sp, sp, #20
 307              		@ sp needed
 308 015c 90BD     		pop	{r4, r7, pc}
 309              	.L16:
 310 015e C046     		.align	2
 311              	.L15:
 312 0160 00000000 		.word	ADC_ISR
 313 0164 20003A40 		.word	1077542944
 314 0168 00003A40 		.word	1077542912
 315 016c 70020053 		.word	1392509552
 316 0170 04003A40 		.word	1077542916
 317 0174 C4000A80 		.word	-2146828092
 318 0178 18003A40 		.word	1077542936
 319 017c 0000FF07 		.word	134152192
 320 0180 1C003A40 		.word	1077542940
 321 0184 10003A40 		.word	1077542928
 322 0188 04000400 		.word	262148
 323 018c 14003A40 		.word	1077542932
 324 0190 00033A40 		.word	1077543680
 325 0194 28023A40 		.word	1077543464
 326 0198 38023A40 		.word	1077543480
 327 019c 18023A40 		.word	1077543448
 328 01a0 30003A40 		.word	1077542960
 329 01a4 FFFFFFDF 		.word	-536870913
 330 01a8 80003A40 		.word	1077543040
 331 01ac 00000000 		.word	ADC_offset
 332 01b0 10270000 		.word	10000
 333 01b4 E40C0000 		.word	3300
 334 01b8 C8190000 		.word	6600
 335 01bc 00000000 		.word	ADC_countsPer10Volt
 336              		.cfi_endproc
 337              	.LFE3:
 338              		.size	ADC_Init, .-ADC_Init
 339              		.section	.text.ADC_Enable,"ax",%progbits
 340              		.align	2
 341              		.global	ADC_Enable
 342              		.code	16
 343              		.thumb_func
 344              		.type	ADC_Enable, %function
 345              	ADC_Enable:
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 12


 346              	.LFB4:
 280:.\Generated_Source\PSoC4/ADC.c **** 
 281:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 282:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SAR_1_Enable
 283:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 284:.\Generated_Source\PSoC4/ADC.c **** *
 285:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 286:.\Generated_Source\PSoC4/ADC.c **** *  Enables the clock and analog power for SAR ADC.
 287:.\Generated_Source\PSoC4/ADC.c **** *
 288:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 289:.\Generated_Source\PSoC4/ADC.c **** *  None.
 290:.\Generated_Source\PSoC4/ADC.c **** *
 291:.\Generated_Source\PSoC4/ADC.c **** * Return:
 292:.\Generated_Source\PSoC4/ADC.c **** *  None.
 293:.\Generated_Source\PSoC4/ADC.c **** *
 294:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 295:.\Generated_Source\PSoC4/ADC.c **** void ADC_Enable(void)
 296:.\Generated_Source\PSoC4/ADC.c **** {
 347              		.loc 1 296 0
 348              		.cfi_startproc
 349 0000 80B5     		push	{r7, lr}
 350              		.cfi_def_cfa_offset 8
 351              		.cfi_offset 7, -8
 352              		.cfi_offset 14, -4
 353 0002 00AF     		add	r7, sp, #0
 354              		.cfi_def_cfa_register 7
 297:.\Generated_Source\PSoC4/ADC.c ****     if (0u == (ADC_SAR_CTRL_REG & ADC_ENABLE))
 355              		.loc 1 297 0
 356 0004 0A4B     		ldr	r3, .L20
 357 0006 1B68     		ldr	r3, [r3]
 358 0008 002B     		cmp	r3, #0
 359 000a 0EDB     		blt	.L17
 298:.\Generated_Source\PSoC4/ADC.c ****     {
 299:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_PSOC4)
 300:.\Generated_Source\PSoC4/ADC.c **** 
 301:.\Generated_Source\PSoC4/ADC.c ****             while (0u != (ADC_SAR_STATUS_REG & ADC_STATUS_BUSY))
 360              		.loc 1 301 0
 361 000c C046     		mov	r8, r8
 362              	.L19:
 363              		.loc 1 301 0 is_stmt 0 discriminator 1
 364 000e 094B     		ldr	r3, .L20+4
 365 0010 1B68     		ldr	r3, [r3]
 366 0012 002B     		cmp	r3, #0
 367 0014 FBDB     		blt	.L19
 302:.\Generated_Source\PSoC4/ADC.c ****             {
 303:.\Generated_Source\PSoC4/ADC.c ****                 /* wait for SAR to go idle for to avoid deadlock */
 304:.\Generated_Source\PSoC4/ADC.c ****             }
 305:.\Generated_Source\PSoC4/ADC.c ****         #endif /* (ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_PSOC4) */
 306:.\Generated_Source\PSoC4/ADC.c ****         
 307:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_CTRL_REG |= ADC_ENABLE;
 368              		.loc 1 307 0 is_stmt 1
 369 0016 064B     		ldr	r3, .L20
 370 0018 054A     		ldr	r2, .L20
 371 001a 1268     		ldr	r2, [r2]
 372 001c 8021     		mov	r1, #128
 373 001e 0906     		lsl	r1, r1, #24
 374 0020 0A43     		orr	r2, r1
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 13


 375 0022 1A60     		str	r2, [r3]
 308:.\Generated_Source\PSoC4/ADC.c ****         
 309:.\Generated_Source\PSoC4/ADC.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
 310:.\Generated_Source\PSoC4/ADC.c ****         CyDelayUs(ADC_10US_DELAY);         
 376              		.loc 1 310 0
 377 0024 0A20     		mov	r0, #10
 378 0026 FFF7FEFF 		bl	CyDelayUs
 379              	.L17:
 311:.\Generated_Source\PSoC4/ADC.c ****     }
 312:.\Generated_Source\PSoC4/ADC.c **** }
 380              		.loc 1 312 0
 381 002a BD46     		mov	sp, r7
 382              		@ sp needed
 383 002c 80BD     		pop	{r7, pc}
 384              	.L21:
 385 002e C046     		.align	2
 386              	.L20:
 387 0030 00003A40 		.word	1077542912
 388 0034 08023A40 		.word	1077543432
 389              		.cfi_endproc
 390              	.LFE4:
 391              		.size	ADC_Enable, .-ADC_Enable
 392              		.section	.text.ADC_Stop,"ax",%progbits
 393              		.align	2
 394              		.global	ADC_Stop
 395              		.code	16
 396              		.thumb_func
 397              		.type	ADC_Stop, %function
 398              	ADC_Stop:
 399              	.LFB5:
 313:.\Generated_Source\PSoC4/ADC.c **** 
 314:.\Generated_Source\PSoC4/ADC.c **** 
 315:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 316:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Stop
 317:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 318:.\Generated_Source\PSoC4/ADC.c **** *
 319:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 320:.\Generated_Source\PSoC4/ADC.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 321:.\Generated_Source\PSoC4/ADC.c **** *  mode.
 322:.\Generated_Source\PSoC4/ADC.c **** *
 323:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 324:.\Generated_Source\PSoC4/ADC.c **** *  None.
 325:.\Generated_Source\PSoC4/ADC.c **** *
 326:.\Generated_Source\PSoC4/ADC.c **** * Return:
 327:.\Generated_Source\PSoC4/ADC.c **** *  None.
 328:.\Generated_Source\PSoC4/ADC.c **** *
 329:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 330:.\Generated_Source\PSoC4/ADC.c **** void ADC_Stop(void)
 331:.\Generated_Source\PSoC4/ADC.c **** {
 400              		.loc 1 331 0
 401              		.cfi_startproc
 402 0000 80B5     		push	{r7, lr}
 403              		.cfi_def_cfa_offset 8
 404              		.cfi_offset 7, -8
 405              		.cfi_offset 14, -4
 406 0002 00AF     		add	r7, sp, #0
 407              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 14


 332:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG &= (uint32)~ADC_ENABLE;
 408              		.loc 1 332 0
 409 0004 034B     		ldr	r3, .L23
 410 0006 034A     		ldr	r2, .L23
 411 0008 1268     		ldr	r2, [r2]
 412 000a 5200     		lsl	r2, r2, #1
 413 000c 5208     		lsr	r2, r2, #1
 414 000e 1A60     		str	r2, [r3]
 333:.\Generated_Source\PSoC4/ADC.c **** }
 415              		.loc 1 333 0
 416 0010 BD46     		mov	sp, r7
 417              		@ sp needed
 418 0012 80BD     		pop	{r7, pc}
 419              	.L24:
 420              		.align	2
 421              	.L23:
 422 0014 00003A40 		.word	1077542912
 423              		.cfi_endproc
 424              	.LFE5:
 425              		.size	ADC_Stop, .-ADC_Stop
 426              		.section	.text.ADC_StartConvert,"ax",%progbits
 427              		.align	2
 428              		.global	ADC_StartConvert
 429              		.code	16
 430              		.thumb_func
 431              		.type	ADC_StartConvert, %function
 432              	ADC_StartConvert:
 433              	.LFB6:
 334:.\Generated_Source\PSoC4/ADC.c **** 
 335:.\Generated_Source\PSoC4/ADC.c **** 
 336:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 337:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StartConvert
 338:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 339:.\Generated_Source\PSoC4/ADC.c **** *
 340:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 341:.\Generated_Source\PSoC4/ADC.c **** *  Description:
 342:.\Generated_Source\PSoC4/ADC.c **** *  For free running mode, this API starts the conversion process and it
 343:.\Generated_Source\PSoC4/ADC.c **** *  runs continuously.
 344:.\Generated_Source\PSoC4/ADC.c **** *
 345:.\Generated_Source\PSoC4/ADC.c **** *  In a triggered mode, this routine triggers every conversion by
 346:.\Generated_Source\PSoC4/ADC.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 347:.\Generated_Source\PSoC4/ADC.c **** *  every conversion has to start by this API.
 348:.\Generated_Source\PSoC4/ADC.c **** *
 349:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 350:.\Generated_Source\PSoC4/ADC.c **** *  None.
 351:.\Generated_Source\PSoC4/ADC.c **** *
 352:.\Generated_Source\PSoC4/ADC.c **** * Return:
 353:.\Generated_Source\PSoC4/ADC.c **** *  None.
 354:.\Generated_Source\PSoC4/ADC.c **** *
 355:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 356:.\Generated_Source\PSoC4/ADC.c **** void ADC_StartConvert(void)
 357:.\Generated_Source\PSoC4/ADC.c **** {
 434              		.loc 1 357 0
 435              		.cfi_startproc
 436 0000 80B5     		push	{r7, lr}
 437              		.cfi_def_cfa_offset 8
 438              		.cfi_offset 7, -8
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 15


 439              		.cfi_offset 14, -4
 440 0002 00AF     		add	r7, sp, #0
 441              		.cfi_def_cfa_register 7
 358:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 359:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG |= ADC_CONTINUOUS_EN;
 360:.\Generated_Source\PSoC4/ADC.c ****     #else /* Firmware trigger */
 361:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_START_CTRL_REG = ADC_FW_TRIGGER;
 442              		.loc 1 361 0
 443 0004 024B     		ldr	r3, .L26
 444 0006 0122     		mov	r2, #1
 445 0008 1A60     		str	r2, [r3]
 362:.\Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 363:.\Generated_Source\PSoC4/ADC.c **** 
 364:.\Generated_Source\PSoC4/ADC.c **** }
 446              		.loc 1 364 0
 447 000a BD46     		mov	sp, r7
 448              		@ sp needed
 449 000c 80BD     		pop	{r7, pc}
 450              	.L27:
 451 000e C046     		.align	2
 452              	.L26:
 453 0010 24003A40 		.word	1077542948
 454              		.cfi_endproc
 455              	.LFE6:
 456              		.size	ADC_StartConvert, .-ADC_StartConvert
 457              		.section	.text.ADC_StopConvert,"ax",%progbits
 458              		.align	2
 459              		.global	ADC_StopConvert
 460              		.code	16
 461              		.thumb_func
 462              		.type	ADC_StopConvert, %function
 463              	ADC_StopConvert:
 464              	.LFB7:
 365:.\Generated_Source\PSoC4/ADC.c **** 
 366:.\Generated_Source\PSoC4/ADC.c **** 
 367:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 368:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StopConvert
 369:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 370:.\Generated_Source\PSoC4/ADC.c **** *
 371:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 372:.\Generated_Source\PSoC4/ADC.c **** *  Forces the ADC to stop all conversions.
 373:.\Generated_Source\PSoC4/ADC.c **** *
 374:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 375:.\Generated_Source\PSoC4/ADC.c **** *  None.
 376:.\Generated_Source\PSoC4/ADC.c **** *
 377:.\Generated_Source\PSoC4/ADC.c **** * Return:
 378:.\Generated_Source\PSoC4/ADC.c **** *  None.
 379:.\Generated_Source\PSoC4/ADC.c **** *
 380:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 381:.\Generated_Source\PSoC4/ADC.c **** void ADC_StopConvert(void)
 382:.\Generated_Source\PSoC4/ADC.c **** {
 465              		.loc 1 382 0
 466              		.cfi_startproc
 467 0000 80B5     		push	{r7, lr}
 468              		.cfi_def_cfa_offset 8
 469              		.cfi_offset 7, -8
 470              		.cfi_offset 14, -4
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 16


 471 0002 00AF     		add	r7, sp, #0
 472              		.cfi_def_cfa_register 7
 383:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 384:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG &= (uint32)(~ADC_CONTINUOUS_EN);
 385:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 386:.\Generated_Source\PSoC4/ADC.c **** }
 473              		.loc 1 386 0
 474 0004 BD46     		mov	sp, r7
 475              		@ sp needed
 476 0006 80BD     		pop	{r7, pc}
 477              		.cfi_endproc
 478              	.LFE7:
 479              		.size	ADC_StopConvert, .-ADC_StopConvert
 480              		.section	.text.ADC_IsEndConversion,"ax",%progbits
 481              		.align	2
 482              		.global	ADC_IsEndConversion
 483              		.code	16
 484              		.thumb_func
 485              		.type	ADC_IsEndConversion, %function
 486              	ADC_IsEndConversion:
 487              	.LFB8:
 387:.\Generated_Source\PSoC4/ADC.c **** 
 388:.\Generated_Source\PSoC4/ADC.c **** 
 389:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 390:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_IsEndConversion
 391:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 392:.\Generated_Source\PSoC4/ADC.c **** *
 393:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 394:.\Generated_Source\PSoC4/ADC.c **** *  Description: Checks for ADC end of conversion for the case one
 395:.\Generated_Source\PSoC4/ADC.c **** *  channel and end of scan for the case of multiple channels. It acts
 396:.\Generated_Source\PSoC4/ADC.c **** *  as a software version of the EOC. This function provides the
 397:.\Generated_Source\PSoC4/ADC.c **** *  programmer with two options. In one mode this function
 398:.\Generated_Source\PSoC4/ADC.c **** *  immediately returns with the conversion status. In the other mode,
 399:.\Generated_Source\PSoC4/ADC.c **** *  the function does not return (blocking) until the conversion has
 400:.\Generated_Source\PSoC4/ADC.c **** *  completed.
 401:.\Generated_Source\PSoC4/ADC.c **** *
 402:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 403:.\Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 404:.\Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 405:.\Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 406:.\Generated_Source\PSoC4/ADC.c **** *                              for injection channel
 407:.\Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 408:.\Generated_Source\PSoC4/ADC.c **** *                              channel conversion
 409:.\Generated_Source\PSoC4/ADC.c **** *
 410:.\Generated_Source\PSoC4/ADC.c **** * Return:
 411:.\Generated_Source\PSoC4/ADC.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 412:.\Generated_Source\PSoC4/ADC.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 413:.\Generated_Source\PSoC4/ADC.c **** *
 414:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 415:.\Generated_Source\PSoC4/ADC.c **** uint32 ADC_IsEndConversion(uint32 retMode)
 416:.\Generated_Source\PSoC4/ADC.c **** {
 488              		.loc 1 416 0
 489              		.cfi_startproc
 490 0000 80B5     		push	{r7, lr}
 491              		.cfi_def_cfa_offset 8
 492              		.cfi_offset 7, -8
 493              		.cfi_offset 14, -4
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 17


 494 0002 84B0     		sub	sp, sp, #16
 495              		.cfi_def_cfa_offset 24
 496 0004 00AF     		add	r7, sp, #0
 497              		.cfi_def_cfa_register 7
 498 0006 7860     		str	r0, [r7, #4]
 417:.\Generated_Source\PSoC4/ADC.c ****     uint32 status = 0u;
 499              		.loc 1 417 0
 500 0008 0023     		mov	r3, #0
 501 000a FB60     		str	r3, [r7, #12]
 418:.\Generated_Source\PSoC4/ADC.c **** 
 419:.\Generated_Source\PSoC4/ADC.c ****     if((retMode & (ADC_RETURN_STATUS | ADC_WAIT_FOR_RESULT)) != 0u)
 502              		.loc 1 419 0
 503 000c 7A68     		ldr	r2, [r7, #4]
 504 000e 0323     		mov	r3, #3
 505 0010 1340     		and	r3, r2
 506 0012 11D0     		beq	.L30
 507              	.L32:
 420:.\Generated_Source\PSoC4/ADC.c ****     {
 421:.\Generated_Source\PSoC4/ADC.c ****         do
 422:.\Generated_Source\PSoC4/ADC.c ****         {
 423:.\Generated_Source\PSoC4/ADC.c ****             status = ADC_SAR_INTR_REG & ADC_EOS_MASK;
 508              		.loc 1 423 0 discriminator 1
 509 0014 0B4B     		ldr	r3, .L34
 510 0016 1A68     		ldr	r2, [r3]
 511 0018 0123     		mov	r3, #1
 512 001a 1340     		and	r3, r2
 513 001c FB60     		str	r3, [r7, #12]
 424:.\Generated_Source\PSoC4/ADC.c ****         }while((status == 0u) && ((retMode & ADC_WAIT_FOR_RESULT) != 0u));
 514              		.loc 1 424 0 discriminator 1
 515 001e FB68     		ldr	r3, [r7, #12]
 516 0020 002B     		cmp	r3, #0
 517 0022 03D1     		bne	.L31
 518 0024 7A68     		ldr	r2, [r7, #4]
 519 0026 0223     		mov	r3, #2
 520 0028 1340     		and	r3, r2
 521 002a F3D1     		bne	.L32
 522              	.L31:
 425:.\Generated_Source\PSoC4/ADC.c **** 
 426:.\Generated_Source\PSoC4/ADC.c ****         if(status != 0u)
 523              		.loc 1 426 0
 524 002c FB68     		ldr	r3, [r7, #12]
 525 002e 002B     		cmp	r3, #0
 526 0030 02D0     		beq	.L30
 427:.\Generated_Source\PSoC4/ADC.c ****         {
 428:.\Generated_Source\PSoC4/ADC.c ****             /* Clear EOS bit */
 429:.\Generated_Source\PSoC4/ADC.c ****             ADC_SAR_INTR_REG = ADC_EOS_MASK;
 527              		.loc 1 429 0
 528 0032 044B     		ldr	r3, .L34
 529 0034 0122     		mov	r2, #1
 530 0036 1A60     		str	r2, [r3]
 531              	.L30:
 430:.\Generated_Source\PSoC4/ADC.c ****         }
 431:.\Generated_Source\PSoC4/ADC.c ****     }
 432:.\Generated_Source\PSoC4/ADC.c **** 
 433:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_INJ_CHANNEL_ENABLED)
 434:.\Generated_Source\PSoC4/ADC.c ****         if((retMode & (ADC_RETURN_STATUS_INJ | ADC_WAIT_FOR_RESULT_INJ)) != 0u)
 435:.\Generated_Source\PSoC4/ADC.c ****         {
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 18


 436:.\Generated_Source\PSoC4/ADC.c ****             do
 437:.\Generated_Source\PSoC4/ADC.c ****             {
 438:.\Generated_Source\PSoC4/ADC.c ****                 status |= ADC_SAR_INTR_REG & ADC_INJ_EOC_MASK;
 439:.\Generated_Source\PSoC4/ADC.c ****             }while(((status & ADC_INJ_EOC_MASK) == 0u) &&
 440:.\Generated_Source\PSoC4/ADC.c ****                    ((retMode & ADC_WAIT_FOR_RESULT_INJ) != 0u));
 441:.\Generated_Source\PSoC4/ADC.c **** 
 442:.\Generated_Source\PSoC4/ADC.c ****             if((status & ADC_INJ_EOC_MASK) != 0u)
 443:.\Generated_Source\PSoC4/ADC.c ****             {
 444:.\Generated_Source\PSoC4/ADC.c ****                 /* Clear Injection EOS bit */
 445:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_INTR_REG = ADC_INJ_EOC_MASK;
 446:.\Generated_Source\PSoC4/ADC.c ****             }
 447:.\Generated_Source\PSoC4/ADC.c ****         }
 448:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_INJ_CHANNEL_ENABLED */
 449:.\Generated_Source\PSoC4/ADC.c **** 
 450:.\Generated_Source\PSoC4/ADC.c ****     return (status);
 532              		.loc 1 450 0
 533 0038 FB68     		ldr	r3, [r7, #12]
 451:.\Generated_Source\PSoC4/ADC.c **** }
 534              		.loc 1 451 0
 535 003a 181C     		mov	r0, r3
 536 003c BD46     		mov	sp, r7
 537 003e 04B0     		add	sp, sp, #16
 538              		@ sp needed
 539 0040 80BD     		pop	{r7, pc}
 540              	.L35:
 541 0042 C046     		.align	2
 542              	.L34:
 543 0044 10023A40 		.word	1077543440
 544              		.cfi_endproc
 545              	.LFE8:
 546              		.size	ADC_IsEndConversion, .-ADC_IsEndConversion
 547              		.section	.text.ADC_GetResult16,"ax",%progbits
 548              		.align	2
 549              		.global	ADC_GetResult16
 550              		.code	16
 551              		.thumb_func
 552              		.type	ADC_GetResult16, %function
 553              	ADC_GetResult16:
 554              	.LFB9:
 452:.\Generated_Source\PSoC4/ADC.c **** 
 453:.\Generated_Source\PSoC4/ADC.c **** 
 454:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 455:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_GetResult16
 456:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 457:.\Generated_Source\PSoC4/ADC.c **** *
 458:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 459:.\Generated_Source\PSoC4/ADC.c **** *  Gets the data available in the SAR DATA register.
 460:.\Generated_Source\PSoC4/ADC.c **** *
 461:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 462:.\Generated_Source\PSoC4/ADC.c **** *  chan: The ADC channel in which to return the result. The first channel
 463:.\Generated_Source\PSoC4/ADC.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 464:.\Generated_Source\PSoC4/ADC.c **** *
 465:.\Generated_Source\PSoC4/ADC.c **** * Return:
 466:.\Generated_Source\PSoC4/ADC.c **** *  Returns converted data as a signed 16-bit integer
 467:.\Generated_Source\PSoC4/ADC.c **** *
 468:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 469:.\Generated_Source\PSoC4/ADC.c **** int16 ADC_GetResult16(uint32 chan)
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 19


 470:.\Generated_Source\PSoC4/ADC.c **** {
 555              		.loc 1 470 0
 556              		.cfi_startproc
 557 0000 80B5     		push	{r7, lr}
 558              		.cfi_def_cfa_offset 8
 559              		.cfi_offset 7, -8
 560              		.cfi_offset 14, -4
 561 0002 84B0     		sub	sp, sp, #16
 562              		.cfi_def_cfa_offset 24
 563 0004 00AF     		add	r7, sp, #0
 564              		.cfi_def_cfa_register 7
 565 0006 7860     		str	r0, [r7, #4]
 471:.\Generated_Source\PSoC4/ADC.c ****     uint32 result;
 472:.\Generated_Source\PSoC4/ADC.c **** 
 473:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 474:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 566              		.loc 1 474 0
 567 0008 7B68     		ldr	r3, [r7, #4]
 568 000a 002B     		cmp	r3, #0
 569 000c 02D0     		beq	.L37
 570              		.loc 1 474 0 is_stmt 0 discriminator 1
 571 000e 0020     		mov	r0, #0
 572 0010 FFF7FEFF 		bl	CyHalt
 573              	.L37:
 475:.\Generated_Source\PSoC4/ADC.c **** 
 476:.\Generated_Source\PSoC4/ADC.c ****     if(chan < ADC_SEQUENCED_CHANNELS_NUM)
 574              		.loc 1 476 0 is_stmt 1
 575 0014 7B68     		ldr	r3, [r7, #4]
 576 0016 002B     		cmp	r3, #0
 577 0018 08D1     		bne	.L38
 477:.\Generated_Source\PSoC4/ADC.c ****     {
 478:.\Generated_Source\PSoC4/ADC.c ****         result = CY_GET_REG32((reg32 *)(ADC_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) &
 578              		.loc 1 478 0
 579 001a 7B68     		ldr	r3, [r7, #4]
 580 001c 9B00     		lsl	r3, r3, #2
 581 001e 084A     		ldr	r2, .L41
 582 0020 9B18     		add	r3, r3, r2
 583 0022 1B68     		ldr	r3, [r3]
 584 0024 1B04     		lsl	r3, r3, #16
 585 0026 1B0C     		lsr	r3, r3, #16
 586 0028 FB60     		str	r3, [r7, #12]
 587 002a 01E0     		b	.L39
 588              	.L38:
 479:.\Generated_Source\PSoC4/ADC.c ****                 ADC_RESULT_MASK;
 480:.\Generated_Source\PSoC4/ADC.c ****     }
 481:.\Generated_Source\PSoC4/ADC.c ****     else
 482:.\Generated_Source\PSoC4/ADC.c ****     {
 483:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 484:.\Generated_Source\PSoC4/ADC.c ****             result = ADC_SAR_INJ_RESULT_REG & ADC_RESULT_MASK;
 485:.\Generated_Source\PSoC4/ADC.c ****         #else
 486:.\Generated_Source\PSoC4/ADC.c ****             result = 0u;
 589              		.loc 1 486 0
 590 002c 0023     		mov	r3, #0
 591 002e FB60     		str	r3, [r7, #12]
 592              	.L39:
 487:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 488:.\Generated_Source\PSoC4/ADC.c ****     }
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 20


 489:.\Generated_Source\PSoC4/ADC.c **** 
 490:.\Generated_Source\PSoC4/ADC.c ****     return ( (int16)result );
 593              		.loc 1 490 0
 594 0030 FB68     		ldr	r3, [r7, #12]
 595 0032 9BB2     		uxth	r3, r3
 596 0034 1BB2     		sxth	r3, r3
 491:.\Generated_Source\PSoC4/ADC.c **** }
 597              		.loc 1 491 0
 598 0036 181C     		mov	r0, r3
 599 0038 BD46     		mov	sp, r7
 600 003a 04B0     		add	sp, sp, #16
 601              		@ sp needed
 602 003c 80BD     		pop	{r7, pc}
 603              	.L42:
 604 003e C046     		.align	2
 605              	.L41:
 606 0040 80013A40 		.word	1077543296
 607              		.cfi_endproc
 608              	.LFE9:
 609              		.size	ADC_GetResult16, .-ADC_GetResult16
 610              		.section	.text.ADC_SetChanMask,"ax",%progbits
 611              		.align	2
 612              		.global	ADC_SetChanMask
 613              		.code	16
 614              		.thumb_func
 615              		.type	ADC_SetChanMask, %function
 616              	ADC_SetChanMask:
 617              	.LFB10:
 492:.\Generated_Source\PSoC4/ADC.c **** 
 493:.\Generated_Source\PSoC4/ADC.c **** 
 494:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 495:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetChanMask
 496:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 497:.\Generated_Source\PSoC4/ADC.c **** *
 498:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 499:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel enable mask.
 500:.\Generated_Source\PSoC4/ADC.c **** *
 501:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 502:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that will be
 503:.\Generated_Source\PSoC4/ADC.c **** *  scanned. Setting bits for channels that do not exist will have no
 504:.\Generated_Source\PSoC4/ADC.c **** *  effect. For example, if only 6 channels were enabled, setting a
 505:.\Generated_Source\PSoC4/ADC.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 506:.\Generated_Source\PSoC4/ADC.c **** *  This API will not enable the injection channel.
 507:.\Generated_Source\PSoC4/ADC.c **** *  Examples: If the component is setup to sequence through 8
 508:.\Generated_Source\PSoC4/ADC.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 509:.\Generated_Source\PSoC4/ADC.c **** *
 510:.\Generated_Source\PSoC4/ADC.c **** * Return:
 511:.\Generated_Source\PSoC4/ADC.c **** *  None.
 512:.\Generated_Source\PSoC4/ADC.c **** *
 513:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 514:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetChanMask(uint32 mask)
 515:.\Generated_Source\PSoC4/ADC.c **** {
 618              		.loc 1 515 0
 619              		.cfi_startproc
 620 0000 80B5     		push	{r7, lr}
 621              		.cfi_def_cfa_offset 8
 622              		.cfi_offset 7, -8
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 21


 623              		.cfi_offset 14, -4
 624 0002 82B0     		sub	sp, sp, #8
 625              		.cfi_def_cfa_offset 16
 626 0004 00AF     		add	r7, sp, #0
 627              		.cfi_def_cfa_register 7
 628 0006 7860     		str	r0, [r7, #4]
 516:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 629              		.loc 1 516 0
 630 0008 034B     		ldr	r3, .L44
 631 000a 7968     		ldr	r1, [r7, #4]
 632 000c 0122     		mov	r2, #1
 633 000e 0A40     		and	r2, r1
 634 0010 1A60     		str	r2, [r3]
 517:.\Generated_Source\PSoC4/ADC.c **** }
 635              		.loc 1 517 0
 636 0012 BD46     		mov	sp, r7
 637 0014 02B0     		add	sp, sp, #8
 638              		@ sp needed
 639 0016 80BD     		pop	{r7, pc}
 640              	.L45:
 641              		.align	2
 642              	.L44:
 643 0018 20003A40 		.word	1077542944
 644              		.cfi_endproc
 645              	.LFE10:
 646              		.size	ADC_SetChanMask, .-ADC_SetChanMask
 647              		.section	.text.ADC_SetLowLimit,"ax",%progbits
 648              		.align	2
 649              		.global	ADC_SetLowLimit
 650              		.code	16
 651              		.thumb_func
 652              		.type	ADC_SetLowLimit, %function
 653              	ADC_SetLowLimit:
 654              	.LFB11:
 518:.\Generated_Source\PSoC4/ADC.c **** 
 519:.\Generated_Source\PSoC4/ADC.c **** #if(ADC_INJ_CHANNEL_ENABLED)
 520:.\Generated_Source\PSoC4/ADC.c **** 
 521:.\Generated_Source\PSoC4/ADC.c **** 
 522:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 523:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_EnableInjection
 524:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 525:.\Generated_Source\PSoC4/ADC.c ****     *
 526:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 527:.\Generated_Source\PSoC4/ADC.c ****     *  Enables the injection channel for the next scan only.
 528:.\Generated_Source\PSoC4/ADC.c ****     *
 529:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 530:.\Generated_Source\PSoC4/ADC.c ****     *  None.
 531:.\Generated_Source\PSoC4/ADC.c ****     *
 532:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 533:.\Generated_Source\PSoC4/ADC.c ****     *  None.
 534:.\Generated_Source\PSoC4/ADC.c ****     *
 535:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 536:.\Generated_Source\PSoC4/ADC.c ****     void ADC_EnableInjection(void)
 537:.\Generated_Source\PSoC4/ADC.c ****     {
 538:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_INJ_CHAN_CONFIG_REG |= ADC_INJ_CHAN_EN;
 539:.\Generated_Source\PSoC4/ADC.c ****     }
 540:.\Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 22


 541:.\Generated_Source\PSoC4/ADC.c **** #endif /* ADC_INJ_CHANNEL_ENABLED */
 542:.\Generated_Source\PSoC4/ADC.c **** 
 543:.\Generated_Source\PSoC4/ADC.c **** 
 544:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 545:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLowLimit
 546:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 547:.\Generated_Source\PSoC4/ADC.c **** *
 548:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 549:.\Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 550:.\Generated_Source\PSoC4/ADC.c **** *
 551:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 552:.\Generated_Source\PSoC4/ADC.c **** *  lowLimit: The low limit for a limit condition.
 553:.\Generated_Source\PSoC4/ADC.c **** *
 554:.\Generated_Source\PSoC4/ADC.c **** * Return:
 555:.\Generated_Source\PSoC4/ADC.c **** *  None.
 556:.\Generated_Source\PSoC4/ADC.c **** *
 557:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 558:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetLowLimit(uint32 lowLimit)
 559:.\Generated_Source\PSoC4/ADC.c **** {
 655              		.loc 1 559 0
 656              		.cfi_startproc
 657 0000 80B5     		push	{r7, lr}
 658              		.cfi_def_cfa_offset 8
 659              		.cfi_offset 7, -8
 660              		.cfi_offset 14, -4
 661 0002 82B0     		sub	sp, sp, #8
 662              		.cfi_def_cfa_offset 16
 663 0004 00AF     		add	r7, sp, #0
 664              		.cfi_def_cfa_register 7
 665 0006 7860     		str	r0, [r7, #4]
 560:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_LOW_MASK);
 666              		.loc 1 560 0
 667 0008 084B     		ldr	r3, .L47
 668 000a 084A     		ldr	r2, .L47
 669 000c 1268     		ldr	r2, [r2]
 670 000e 120C     		lsr	r2, r2, #16
 671 0010 1204     		lsl	r2, r2, #16
 672 0012 1A60     		str	r2, [r3]
 561:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= lowLimit & ADC_RANGE_LOW_MASK;
 673              		.loc 1 561 0
 674 0014 054B     		ldr	r3, .L47
 675 0016 054A     		ldr	r2, .L47
 676 0018 1168     		ldr	r1, [r2]
 677 001a 7A68     		ldr	r2, [r7, #4]
 678 001c 1204     		lsl	r2, r2, #16
 679 001e 120C     		lsr	r2, r2, #16
 680 0020 0A43     		orr	r2, r1
 681 0022 1A60     		str	r2, [r3]
 562:.\Generated_Source\PSoC4/ADC.c **** }
 682              		.loc 1 562 0
 683 0024 BD46     		mov	sp, r7
 684 0026 02B0     		add	sp, sp, #8
 685              		@ sp needed
 686 0028 80BD     		pop	{r7, pc}
 687              	.L48:
 688 002a C046     		.align	2
 689              	.L47:
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 23


 690 002c 18003A40 		.word	1077542936
 691              		.cfi_endproc
 692              	.LFE11:
 693              		.size	ADC_SetLowLimit, .-ADC_SetLowLimit
 694              		.section	.text.ADC_SetHighLimit,"ax",%progbits
 695              		.align	2
 696              		.global	ADC_SetHighLimit
 697              		.code	16
 698              		.thumb_func
 699              		.type	ADC_SetHighLimit, %function
 700              	ADC_SetHighLimit:
 701              	.LFB12:
 563:.\Generated_Source\PSoC4/ADC.c **** 
 564:.\Generated_Source\PSoC4/ADC.c **** 
 565:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 566:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetHighLimit
 567:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 568:.\Generated_Source\PSoC4/ADC.c **** *
 569:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 570:.\Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 571:.\Generated_Source\PSoC4/ADC.c **** *
 572:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 573:.\Generated_Source\PSoC4/ADC.c **** *  highLimit: The high limit for a limit condition.
 574:.\Generated_Source\PSoC4/ADC.c **** *
 575:.\Generated_Source\PSoC4/ADC.c **** * Return:
 576:.\Generated_Source\PSoC4/ADC.c **** *  None.
 577:.\Generated_Source\PSoC4/ADC.c **** *
 578:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 579:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetHighLimit(uint32 highLimit)
 580:.\Generated_Source\PSoC4/ADC.c **** {
 702              		.loc 1 580 0
 703              		.cfi_startproc
 704 0000 80B5     		push	{r7, lr}
 705              		.cfi_def_cfa_offset 8
 706              		.cfi_offset 7, -8
 707              		.cfi_offset 14, -4
 708 0002 82B0     		sub	sp, sp, #8
 709              		.cfi_def_cfa_offset 16
 710 0004 00AF     		add	r7, sp, #0
 711              		.cfi_def_cfa_register 7
 712 0006 7860     		str	r0, [r7, #4]
 581:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_HIGH_MASK);
 713              		.loc 1 581 0
 714 0008 074B     		ldr	r3, .L50
 715 000a 074A     		ldr	r2, .L50
 716 000c 1268     		ldr	r2, [r2]
 717 000e 1204     		lsl	r2, r2, #16
 718 0010 120C     		lsr	r2, r2, #16
 719 0012 1A60     		str	r2, [r3]
 582:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_RANGE_HIGH_OFFSET);
 720              		.loc 1 582 0
 721 0014 044B     		ldr	r3, .L50
 722 0016 044A     		ldr	r2, .L50
 723 0018 1168     		ldr	r1, [r2]
 724 001a 7A68     		ldr	r2, [r7, #4]
 725 001c 1204     		lsl	r2, r2, #16
 726 001e 0A43     		orr	r2, r1
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 24


 727 0020 1A60     		str	r2, [r3]
 583:.\Generated_Source\PSoC4/ADC.c **** }
 728              		.loc 1 583 0
 729 0022 BD46     		mov	sp, r7
 730 0024 02B0     		add	sp, sp, #8
 731              		@ sp needed
 732 0026 80BD     		pop	{r7, pc}
 733              	.L51:
 734              		.align	2
 735              	.L50:
 736 0028 18003A40 		.word	1077542936
 737              		.cfi_endproc
 738              	.LFE12:
 739              		.size	ADC_SetHighLimit, .-ADC_SetHighLimit
 740              		.section	.text.ADC_SetLimitMask,"ax",%progbits
 741              		.align	2
 742              		.global	ADC_SetLimitMask
 743              		.code	16
 744              		.thumb_func
 745              		.type	ADC_SetLimitMask, %function
 746              	ADC_SetLimitMask:
 747              	.LFB13:
 584:.\Generated_Source\PSoC4/ADC.c **** 
 585:.\Generated_Source\PSoC4/ADC.c **** 
 586:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 587:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLimitMask
 588:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 589:.\Generated_Source\PSoC4/ADC.c **** *
 590:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 591:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel limit condition mask.
 592:.\Generated_Source\PSoC4/ADC.c **** *
 593:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 594:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 595:.\Generated_Source\PSoC4/ADC.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 596:.\Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 6 channels were enabled,
 597:.\Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 598:.\Generated_Source\PSoC4/ADC.c **** *
 599:.\Generated_Source\PSoC4/ADC.c **** * Return:
 600:.\Generated_Source\PSoC4/ADC.c **** *  None.
 601:.\Generated_Source\PSoC4/ADC.c **** *
 602:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 603:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetLimitMask(uint32 mask)
 604:.\Generated_Source\PSoC4/ADC.c **** {
 748              		.loc 1 604 0
 749              		.cfi_startproc
 750 0000 80B5     		push	{r7, lr}
 751              		.cfi_def_cfa_offset 8
 752              		.cfi_offset 7, -8
 753              		.cfi_offset 14, -4
 754 0002 82B0     		sub	sp, sp, #8
 755              		.cfi_def_cfa_offset 16
 756 0004 00AF     		add	r7, sp, #0
 757              		.cfi_def_cfa_register 7
 758 0006 7860     		str	r0, [r7, #4]
 605:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 759              		.loc 1 605 0
 760 0008 034B     		ldr	r3, .L53
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 25


 761 000a 7968     		ldr	r1, [r7, #4]
 762 000c 0122     		mov	r2, #1
 763 000e 0A40     		and	r2, r1
 764 0010 1A60     		str	r2, [r3]
 606:.\Generated_Source\PSoC4/ADC.c **** }
 765              		.loc 1 606 0
 766 0012 BD46     		mov	sp, r7
 767 0014 02B0     		add	sp, sp, #8
 768              		@ sp needed
 769 0016 80BD     		pop	{r7, pc}
 770              	.L54:
 771              		.align	2
 772              	.L53:
 773 0018 38023A40 		.word	1077543480
 774              		.cfi_endproc
 775              	.LFE13:
 776              		.size	ADC_SetLimitMask, .-ADC_SetLimitMask
 777              		.section	.text.ADC_SetSatMask,"ax",%progbits
 778              		.align	2
 779              		.global	ADC_SetSatMask
 780              		.code	16
 781              		.thumb_func
 782              		.type	ADC_SetSatMask, %function
 783              	ADC_SetSatMask:
 784              	.LFB14:
 607:.\Generated_Source\PSoC4/ADC.c **** 
 608:.\Generated_Source\PSoC4/ADC.c **** 
 609:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 610:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetSatMask
 611:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 612:.\Generated_Source\PSoC4/ADC.c **** *
 613:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 614:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel saturation event mask.
 615:.\Generated_Source\PSoC4/ADC.c **** *
 616:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 617:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 618:.\Generated_Source\PSoC4/ADC.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 619:.\Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 8 channels were enabled,
 620:.\Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 621:.\Generated_Source\PSoC4/ADC.c **** *
 622:.\Generated_Source\PSoC4/ADC.c **** * Return:
 623:.\Generated_Source\PSoC4/ADC.c **** *  None.
 624:.\Generated_Source\PSoC4/ADC.c **** *
 625:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 626:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetSatMask(uint32 mask)
 627:.\Generated_Source\PSoC4/ADC.c **** {
 785              		.loc 1 627 0
 786              		.cfi_startproc
 787 0000 80B5     		push	{r7, lr}
 788              		.cfi_def_cfa_offset 8
 789              		.cfi_offset 7, -8
 790              		.cfi_offset 14, -4
 791 0002 82B0     		sub	sp, sp, #8
 792              		.cfi_def_cfa_offset 16
 793 0004 00AF     		add	r7, sp, #0
 794              		.cfi_def_cfa_register 7
 795 0006 7860     		str	r0, [r7, #4]
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 26


 628:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 796              		.loc 1 628 0
 797 0008 034B     		ldr	r3, .L56
 798 000a 7968     		ldr	r1, [r7, #4]
 799 000c 0122     		mov	r2, #1
 800 000e 0A40     		and	r2, r1
 801 0010 1A60     		str	r2, [r3]
 629:.\Generated_Source\PSoC4/ADC.c **** }
 802              		.loc 1 629 0
 803 0012 BD46     		mov	sp, r7
 804 0014 02B0     		add	sp, sp, #8
 805              		@ sp needed
 806 0016 80BD     		pop	{r7, pc}
 807              	.L57:
 808              		.align	2
 809              	.L56:
 810 0018 28023A40 		.word	1077543464
 811              		.cfi_endproc
 812              	.LFE14:
 813              		.size	ADC_SetSatMask, .-ADC_SetSatMask
 814              		.section	.text.ADC_SetOffset,"ax",%progbits
 815              		.align	2
 816              		.global	ADC_SetOffset
 817              		.code	16
 818              		.thumb_func
 819              		.type	ADC_SetOffset, %function
 820              	ADC_SetOffset:
 821              	.LFB15:
 630:.\Generated_Source\PSoC4/ADC.c **** 
 631:.\Generated_Source\PSoC4/ADC.c **** 
 632:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 633:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetOffset
 634:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 635:.\Generated_Source\PSoC4/ADC.c **** *
 636:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 637:.\Generated_Source\PSoC4/ADC.c **** *   Description: Sets the ADC offset which is used by the functions
 638:.\Generated_Source\PSoC4/ADC.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 639:.\Generated_Source\PSoC4/ADC.c **** *   to substract the offset from the given reading
 640:.\Generated_Source\PSoC4/ADC.c **** *   before calculating the voltage conversion.
 641:.\Generated_Source\PSoC4/ADC.c **** *
 642:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 643:.\Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 644:.\Generated_Source\PSoC4/ADC.c **** *  offset: This value is a measured value when the
 645:.\Generated_Source\PSoC4/ADC.c **** *          inputs are shorted or connected to the same input voltage.
 646:.\Generated_Source\PSoC4/ADC.c **** *
 647:.\Generated_Source\PSoC4/ADC.c **** * Return:
 648:.\Generated_Source\PSoC4/ADC.c **** *  None.
 649:.\Generated_Source\PSoC4/ADC.c **** *
 650:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
 651:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Offset:  Modified to set the user provided offset.
 652:.\Generated_Source\PSoC4/ADC.c **** *
 653:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 654:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetOffset(uint32 chan, int16 offset)
 655:.\Generated_Source\PSoC4/ADC.c **** {
 822              		.loc 1 655 0
 823              		.cfi_startproc
 824 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 27


 825              		.cfi_def_cfa_offset 8
 826              		.cfi_offset 7, -8
 827              		.cfi_offset 14, -4
 828 0002 82B0     		sub	sp, sp, #8
 829              		.cfi_def_cfa_offset 16
 830 0004 00AF     		add	r7, sp, #0
 831              		.cfi_def_cfa_register 7
 832 0006 7860     		str	r0, [r7, #4]
 833 0008 0A1C     		mov	r2, r1
 834 000a BB1C     		add	r3, r7, #2
 835 000c 1A80     		strh	r2, [r3]
 656:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 657:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 836              		.loc 1 657 0
 837 000e 7B68     		ldr	r3, [r7, #4]
 838 0010 002B     		cmp	r3, #0
 839 0012 02D0     		beq	.L59
 840              		.loc 1 657 0 is_stmt 0 discriminator 1
 841 0014 0020     		mov	r0, #0
 842 0016 FFF7FEFF 		bl	CyHalt
 843              	.L59:
 658:.\Generated_Source\PSoC4/ADC.c **** 
 659:.\Generated_Source\PSoC4/ADC.c ****     ADC_offset[chan] = offset;
 844              		.loc 1 659 0 is_stmt 1
 845 001a 044B     		ldr	r3, .L60
 846 001c 7A68     		ldr	r2, [r7, #4]
 847 001e 5200     		lsl	r2, r2, #1
 848 0020 B91C     		add	r1, r7, #2
 849 0022 0988     		ldrh	r1, [r1]
 850 0024 D152     		strh	r1, [r2, r3]
 660:.\Generated_Source\PSoC4/ADC.c **** }
 851              		.loc 1 660 0
 852 0026 BD46     		mov	sp, r7
 853 0028 02B0     		add	sp, sp, #8
 854              		@ sp needed
 855 002a 80BD     		pop	{r7, pc}
 856              	.L61:
 857              		.align	2
 858              	.L60:
 859 002c 00000000 		.word	ADC_offset
 860              		.cfi_endproc
 861              	.LFE15:
 862              		.size	ADC_SetOffset, .-ADC_SetOffset
 863              		.section	.text.ADC_SetGain,"ax",%progbits
 864              		.align	2
 865              		.global	ADC_SetGain
 866              		.code	16
 867              		.thumb_func
 868              		.type	ADC_SetGain, %function
 869              	ADC_SetGain:
 870              	.LFB16:
 661:.\Generated_Source\PSoC4/ADC.c **** 
 662:.\Generated_Source\PSoC4/ADC.c **** 
 663:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 664:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetGain
 665:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 666:.\Generated_Source\PSoC4/ADC.c **** *
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 28


 667:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 668:.\Generated_Source\PSoC4/ADC.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 669:.\Generated_Source\PSoC4/ADC.c **** *  conversion functions below. This value is set by default by the
 670:.\Generated_Source\PSoC4/ADC.c **** *  reference and input range settings. It should only be used to further
 671:.\Generated_Source\PSoC4/ADC.c **** *  calibrate the ADC with a known input or if an external reference is
 672:.\Generated_Source\PSoC4/ADC.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 673:.\Generated_Source\PSoC4/ADC.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 674:.\Generated_Source\PSoC4/ADC.c **** *  conversion between ADC counts and voltage.
 675:.\Generated_Source\PSoC4/ADC.c **** *
 676:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 677:.\Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 678:.\Generated_Source\PSoC4/ADC.c **** *  adcGain: ADC gain in counts per 10 volts.
 679:.\Generated_Source\PSoC4/ADC.c **** *
 680:.\Generated_Source\PSoC4/ADC.c **** * Return:
 681:.\Generated_Source\PSoC4/ADC.c **** *  None.
 682:.\Generated_Source\PSoC4/ADC.c **** *
 683:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
 684:.\Generated_Source\PSoC4/ADC.c **** *  ADC_CountsPer10Volt:  modified to set the ADC gain in counts
 685:.\Generated_Source\PSoC4/ADC.c **** *   per 10 volt.
 686:.\Generated_Source\PSoC4/ADC.c **** *
 687:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 688:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetGain(uint32 chan, int32 adcGain)
 689:.\Generated_Source\PSoC4/ADC.c **** {
 871              		.loc 1 689 0
 872              		.cfi_startproc
 873 0000 80B5     		push	{r7, lr}
 874              		.cfi_def_cfa_offset 8
 875              		.cfi_offset 7, -8
 876              		.cfi_offset 14, -4
 877 0002 82B0     		sub	sp, sp, #8
 878              		.cfi_def_cfa_offset 16
 879 0004 00AF     		add	r7, sp, #0
 880              		.cfi_def_cfa_register 7
 881 0006 7860     		str	r0, [r7, #4]
 882 0008 3960     		str	r1, [r7]
 690:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 691:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 883              		.loc 1 691 0
 884 000a 7B68     		ldr	r3, [r7, #4]
 885 000c 002B     		cmp	r3, #0
 886 000e 02D0     		beq	.L63
 887              		.loc 1 691 0 is_stmt 0 discriminator 1
 888 0010 0020     		mov	r0, #0
 889 0012 FFF7FEFF 		bl	CyHalt
 890              	.L63:
 692:.\Generated_Source\PSoC4/ADC.c **** 
 693:.\Generated_Source\PSoC4/ADC.c ****     ADC_countsPer10Volt[chan] = adcGain;
 891              		.loc 1 693 0 is_stmt 1
 892 0016 044B     		ldr	r3, .L64
 893 0018 7A68     		ldr	r2, [r7, #4]
 894 001a 9200     		lsl	r2, r2, #2
 895 001c 3968     		ldr	r1, [r7]
 896 001e D150     		str	r1, [r2, r3]
 694:.\Generated_Source\PSoC4/ADC.c **** }
 897              		.loc 1 694 0
 898 0020 BD46     		mov	sp, r7
 899 0022 02B0     		add	sp, sp, #8
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 29


 900              		@ sp needed
 901 0024 80BD     		pop	{r7, pc}
 902              	.L65:
 903 0026 C046     		.align	2
 904              	.L64:
 905 0028 00000000 		.word	ADC_countsPer10Volt
 906              		.cfi_endproc
 907              	.LFE16:
 908              		.size	ADC_SetGain, .-ADC_SetGain
 909              		.section	.text.ADC_CountsTo_mVolts,"ax",%progbits
 910              		.align	2
 911              		.global	ADC_CountsTo_mVolts
 912              		.code	16
 913              		.thumb_func
 914              		.type	ADC_CountsTo_mVolts, %function
 915              	ADC_CountsTo_mVolts:
 916              	.LFB17:
 695:.\Generated_Source\PSoC4/ADC.c **** 
 696:.\Generated_Source\PSoC4/ADC.c **** 
 697:.\Generated_Source\PSoC4/ADC.c **** #if(ADC_DEFAULT_JUSTIFICATION_SEL == ADC__RIGHT)
 698:.\Generated_Source\PSoC4/ADC.c **** 
 699:.\Generated_Source\PSoC4/ADC.c **** 
 700:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 701:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_mVolts
 702:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 703:.\Generated_Source\PSoC4/ADC.c ****     *
 704:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 705:.\Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to mVolts
 706:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 707:.\Generated_Source\PSoC4/ADC.c ****     *
 708:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 709:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 710:.\Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 711:.\Generated_Source\PSoC4/ADC.c ****     *
 712:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 713:.\Generated_Source\PSoC4/ADC.c ****     *  Results in mVolts
 714:.\Generated_Source\PSoC4/ADC.c ****     *
 715:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 716:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to mVolts.
 717:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 718:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 719:.\Generated_Source\PSoC4/ADC.c ****     *
 720:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 721:.\Generated_Source\PSoC4/ADC.c ****     int16 ADC_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 722:.\Generated_Source\PSoC4/ADC.c ****     {
 917              		.loc 1 722 0
 918              		.cfi_startproc
 919 0000 80B5     		push	{r7, lr}
 920              		.cfi_def_cfa_offset 8
 921              		.cfi_offset 7, -8
 922              		.cfi_offset 14, -4
 923 0002 84B0     		sub	sp, sp, #16
 924              		.cfi_def_cfa_offset 24
 925 0004 00AF     		add	r7, sp, #0
 926              		.cfi_def_cfa_register 7
 927 0006 7860     		str	r0, [r7, #4]
 928 0008 0A1C     		mov	r2, r1
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 30


 929 000a BB1C     		add	r3, r7, #2
 930 000c 1A80     		strh	r2, [r3]
 723:.\Generated_Source\PSoC4/ADC.c ****         int16 mVolts;
 724:.\Generated_Source\PSoC4/ADC.c **** 
 725:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 726:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 931              		.loc 1 726 0
 932 000e 7B68     		ldr	r3, [r7, #4]
 933 0010 002B     		cmp	r3, #0
 934 0012 02D0     		beq	.L67
 935              		.loc 1 726 0 is_stmt 0 discriminator 1
 936 0014 0020     		mov	r0, #0
 937 0016 FFF7FEFF 		bl	CyHalt
 938              	.L67:
 727:.\Generated_Source\PSoC4/ADC.c **** 
 728:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 729:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 730:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 731:.\Generated_Source\PSoC4/ADC.c ****             {
 732:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 733:.\Generated_Source\PSoC4/ADC.c ****             }
 734:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 735:.\Generated_Source\PSoC4/ADC.c **** 
 736:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 737:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 939              		.loc 1 737 0 is_stmt 1
 940 001a BB1C     		add	r3, r7, #2
 941 001c 1A88     		ldrh	r2, [r3]
 942 001e 1E4B     		ldr	r3, .L73
 943 0020 7968     		ldr	r1, [r7, #4]
 944 0022 4900     		lsl	r1, r1, #1
 945 0024 CB5A     		ldrh	r3, [r1, r3]
 946 0026 9BB2     		uxth	r3, r3
 947 0028 9BB2     		uxth	r3, r3
 948 002a D31A     		sub	r3, r2, r3
 949 002c 9AB2     		uxth	r2, r3
 950 002e BB1C     		add	r3, r7, #2
 951 0030 1A80     		strh	r2, [r3]
 738:.\Generated_Source\PSoC4/ADC.c **** 
 739:.\Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 952              		.loc 1 739 0
 953 0032 BB1C     		add	r3, r7, #2
 954 0034 0021     		mov	r1, #0
 955 0036 5B5E     		ldrsh	r3, [r3, r1]
 956 0038 184A     		ldr	r2, .L73+4
 957 003a 5A43     		mul	r2, r3
 740:.\Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 958              		.loc 1 740 0
 959 003c BB1C     		add	r3, r7, #2
 960 003e 0021     		mov	r1, #0
 961 0040 5B5E     		ldrsh	r3, [r3, r1]
 962 0042 002B     		cmp	r3, #0
 963 0044 08DD     		ble	.L68
 964              		.loc 1 740 0 is_stmt 0 discriminator 1
 965 0046 164B     		ldr	r3, .L73+8
 966 0048 7968     		ldr	r1, [r7, #4]
 967 004a 8900     		lsl	r1, r1, #2
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 31


 968 004c CB58     		ldr	r3, [r1, r3]
 969 004e 002B     		cmp	r3, #0
 970 0050 00DA     		bge	.L69
 971 0052 0133     		add	r3, r3, #1
 972              	.L69:
 973 0054 5B10     		asr	r3, r3, #1
 974 0056 08E0     		b	.L70
 975              	.L68:
 976              		.loc 1 740 0 discriminator 2
 977 0058 114B     		ldr	r3, .L73+8
 978 005a 7968     		ldr	r1, [r7, #4]
 979 005c 8900     		lsl	r1, r1, #2
 980 005e CB58     		ldr	r3, [r1, r3]
 981 0060 002B     		cmp	r3, #0
 982 0062 00DA     		bge	.L71
 983 0064 0133     		add	r3, r3, #1
 984              	.L71:
 985 0066 5B10     		asr	r3, r3, #1
 986 0068 5B42     		neg	r3, r3
 987              	.L70:
 739:.\Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 988              		.loc 1 739 0 is_stmt 1
 989 006a D218     		add	r2, r2, r3
 741:.\Generated_Source\PSoC4/ADC.c ****                  / ADC_countsPer10Volt[chan]);
 990              		.loc 1 741 0
 991 006c 0C4B     		ldr	r3, .L73+8
 992 006e 7968     		ldr	r1, [r7, #4]
 993 0070 8900     		lsl	r1, r1, #2
 994 0072 CB58     		ldr	r3, [r1, r3]
 995 0074 101C     		mov	r0, r2
 996 0076 191C     		mov	r1, r3
 997 0078 FFF7FEFF 		bl	__aeabi_idiv
 998 007c 031C     		mov	r3, r0
 999 007e 1A1C     		mov	r2, r3
 739:.\Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 1000              		.loc 1 739 0
 1001 0080 3B1C     		mov	r3, r7
 1002 0082 0E33     		add	r3, r3, #14
 1003 0084 1A80     		strh	r2, [r3]
 742:.\Generated_Source\PSoC4/ADC.c **** 
 743:.\Generated_Source\PSoC4/ADC.c ****         return( mVolts );
 1004              		.loc 1 743 0
 1005 0086 3B1C     		mov	r3, r7
 1006 0088 0E33     		add	r3, r3, #14
 1007 008a 1B88     		ldrh	r3, [r3]
 1008 008c 1BB2     		sxth	r3, r3
 744:.\Generated_Source\PSoC4/ADC.c ****     }
 1009              		.loc 1 744 0
 1010 008e 181C     		mov	r0, r3
 1011 0090 BD46     		mov	sp, r7
 1012 0092 04B0     		add	sp, sp, #16
 1013              		@ sp needed
 1014 0094 80BD     		pop	{r7, pc}
 1015              	.L74:
 1016 0096 C046     		.align	2
 1017              	.L73:
 1018 0098 00000000 		.word	ADC_offset
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 32


 1019 009c 10270000 		.word	10000
 1020 00a0 00000000 		.word	ADC_countsPer10Volt
 1021              		.cfi_endproc
 1022              	.LFE17:
 1023              		.size	ADC_CountsTo_mVolts, .-ADC_CountsTo_mVolts
 1024              		.global	__aeabi_lmul
 1025              		.global	__aeabi_ldivmod
 1026              		.section	.text.ADC_CountsTo_uVolts,"ax",%progbits
 1027              		.align	2
 1028              		.global	ADC_CountsTo_uVolts
 1029              		.code	16
 1030              		.thumb_func
 1031              		.type	ADC_CountsTo_uVolts, %function
 1032              	ADC_CountsTo_uVolts:
 1033              	.LFB18:
 745:.\Generated_Source\PSoC4/ADC.c **** 
 746:.\Generated_Source\PSoC4/ADC.c **** 
 747:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 748:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_uVolts
 749:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 750:.\Generated_Source\PSoC4/ADC.c ****     *
 751:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 752:.\Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to micro Volts
 753:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 754:.\Generated_Source\PSoC4/ADC.c ****     *
 755:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 756:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 757:.\Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 758:.\Generated_Source\PSoC4/ADC.c ****     *
 759:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 760:.\Generated_Source\PSoC4/ADC.c ****     *  Results in uVolts
 761:.\Generated_Source\PSoC4/ADC.c ****     *
 762:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 763:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to uVolts.
 764:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 765:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 766:.\Generated_Source\PSoC4/ADC.c ****     *
 767:.\Generated_Source\PSoC4/ADC.c ****     * Theory:
 768:.\Generated_Source\PSoC4/ADC.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 769:.\Generated_Source\PSoC4/ADC.c ****     *  number in the conversion to uVolts and at the same time not loose
 770:.\Generated_Source\PSoC4/ADC.c ****     *  resolution.
 771:.\Generated_Source\PSoC4/ADC.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 772:.\Generated_Source\PSoC4/ADC.c ****     *  on 10 million and later divide on gain in counts per 10V.
 773:.\Generated_Source\PSoC4/ADC.c ****     *
 774:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 775:.\Generated_Source\PSoC4/ADC.c ****     int32 ADC_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 776:.\Generated_Source\PSoC4/ADC.c ****     {
 1034              		.loc 1 776 0
 1035              		.cfi_startproc
 1036 0000 B0B5     		push	{r4, r5, r7, lr}
 1037              		.cfi_def_cfa_offset 16
 1038              		.cfi_offset 4, -16
 1039              		.cfi_offset 5, -12
 1040              		.cfi_offset 7, -8
 1041              		.cfi_offset 14, -4
 1042 0002 86B0     		sub	sp, sp, #24
 1043              		.cfi_def_cfa_offset 40
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 33


 1044 0004 00AF     		add	r7, sp, #0
 1045              		.cfi_def_cfa_register 7
 1046 0006 F860     		str	r0, [r7, #12]
 1047 0008 0A1C     		mov	r2, r1
 1048 000a 3B1C     		mov	r3, r7
 1049 000c 0A33     		add	r3, r3, #10
 1050 000e 1A80     		strh	r2, [r3]
 777:.\Generated_Source\PSoC4/ADC.c ****         int64 uVolts;
 778:.\Generated_Source\PSoC4/ADC.c **** 
 779:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 780:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1051              		.loc 1 780 0
 1052 0010 FB68     		ldr	r3, [r7, #12]
 1053 0012 002B     		cmp	r3, #0
 1054 0014 02D0     		beq	.L76
 1055              		.loc 1 780 0 is_stmt 0 discriminator 1
 1056 0016 0020     		mov	r0, #0
 1057 0018 FFF7FEFF 		bl	CyHalt
 1058              	.L76:
 781:.\Generated_Source\PSoC4/ADC.c **** 
 782:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 783:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 784:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 785:.\Generated_Source\PSoC4/ADC.c ****             {
 786:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 787:.\Generated_Source\PSoC4/ADC.c ****             }
 788:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 789:.\Generated_Source\PSoC4/ADC.c **** 
 790:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 791:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1059              		.loc 1 791 0 is_stmt 1
 1060 001c 3B1C     		mov	r3, r7
 1061 001e 0A33     		add	r3, r3, #10
 1062 0020 1A88     		ldrh	r2, [r3]
 1063 0022 1B4B     		ldr	r3, .L78+8
 1064 0024 F968     		ldr	r1, [r7, #12]
 1065 0026 4900     		lsl	r1, r1, #1
 1066 0028 CB5A     		ldrh	r3, [r1, r3]
 1067 002a 9BB2     		uxth	r3, r3
 1068 002c 9BB2     		uxth	r3, r3
 1069 002e D31A     		sub	r3, r2, r3
 1070 0030 9AB2     		uxth	r2, r3
 1071 0032 3B1C     		mov	r3, r7
 1072 0034 0A33     		add	r3, r3, #10
 1073 0036 1A80     		strh	r2, [r3]
 792:.\Generated_Source\PSoC4/ADC.c **** 
 793:.\Generated_Source\PSoC4/ADC.c ****         uVolts = ((int64)adcCounts * ADC_10UV_COUNTS) / ADC_countsPer10Volt[chan];
 1074              		.loc 1 793 0
 1075 0038 3B1C     		mov	r3, r7
 1076 003a 0A33     		add	r3, r3, #10
 1077 003c 1B88     		ldrh	r3, [r3]
 1078 003e 1BB2     		sxth	r3, r3
 1079 0040 3B60     		str	r3, [r7]
 1080 0042 DB17     		asr	r3, r3, #31
 1081 0044 7B60     		str	r3, [r7, #4]
 1082 0046 3868     		ldr	r0, [r7]
 1083 0048 7968     		ldr	r1, [r7, #4]
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 34


 1084 004a 104B     		ldr	r3, .L78+4
 1085 004c 0E4A     		ldr	r2, .L78
 1086 004e FFF7FEFF 		bl	__aeabi_lmul
 1087 0052 021C     		mov	r2, r0
 1088 0054 0B1C     		mov	r3, r1
 1089 0056 0F49     		ldr	r1, .L78+12
 1090 0058 F868     		ldr	r0, [r7, #12]
 1091 005a 8000     		lsl	r0, r0, #2
 1092 005c 4158     		ldr	r1, [r0, r1]
 1093 005e 0C1C     		mov	r4, r1
 1094 0060 C917     		asr	r1, r1, #31
 1095 0062 0D1C     		mov	r5, r1
 1096 0064 101C     		mov	r0, r2
 1097 0066 191C     		mov	r1, r3
 1098 0068 221C     		mov	r2, r4
 1099 006a 2B1C     		mov	r3, r5
 1100 006c FFF7FEFF 		bl	__aeabi_ldivmod
 1101 0070 031C     		mov	r3, r0
 1102 0072 0C1C     		mov	r4, r1
 1103 0074 3B61     		str	r3, [r7, #16]
 1104 0076 7C61     		str	r4, [r7, #20]
 794:.\Generated_Source\PSoC4/ADC.c **** 
 795:.\Generated_Source\PSoC4/ADC.c ****         return( (int32)uVolts );
 1105              		.loc 1 795 0
 1106 0078 3B69     		ldr	r3, [r7, #16]
 796:.\Generated_Source\PSoC4/ADC.c ****     }
 1107              		.loc 1 796 0
 1108 007a 181C     		mov	r0, r3
 1109 007c BD46     		mov	sp, r7
 1110 007e 06B0     		add	sp, sp, #24
 1111              		@ sp needed
 1112 0080 B0BD     		pop	{r4, r5, r7, pc}
 1113              	.L79:
 1114 0082 C046C046 		.align	3
 1114      C046
 1115              	.L78:
 1116 0088 80969800 		.word	10000000
 1117 008c 00000000 		.word	0
 1118 0090 00000000 		.word	ADC_offset
 1119 0094 00000000 		.word	ADC_countsPer10Volt
 1120              		.cfi_endproc
 1121              	.LFE18:
 1122              		.size	ADC_CountsTo_uVolts, .-ADC_CountsTo_uVolts
 1123              		.global	__aeabi_i2f
 1124              		.global	__aeabi_fmul
 1125              		.global	__aeabi_fdiv
 1126              		.section	.text.ADC_CountsTo_Volts,"ax",%progbits
 1127              		.align	2
 1128              		.global	ADC_CountsTo_Volts
 1129              		.code	16
 1130              		.thumb_func
 1131              		.type	ADC_CountsTo_Volts, %function
 1132              	ADC_CountsTo_Volts:
 1133              	.LFB19:
 797:.\Generated_Source\PSoC4/ADC.c **** 
 798:.\Generated_Source\PSoC4/ADC.c **** 
 799:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 35


 800:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_Volts
 801:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 802:.\Generated_Source\PSoC4/ADC.c ****     *
 803:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 804:.\Generated_Source\PSoC4/ADC.c ****     *  Converts the ADC output to Volts as a floating point number.
 805:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 806:.\Generated_Source\PSoC4/ADC.c ****     *
 807:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 808:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 809:.\Generated_Source\PSoC4/ADC.c ****     *  Result from the ADC conversion
 810:.\Generated_Source\PSoC4/ADC.c ****     *
 811:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 812:.\Generated_Source\PSoC4/ADC.c ****     *  Results in Volts
 813:.\Generated_Source\PSoC4/ADC.c ****     *
 814:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 815:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to Volts.
 816:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 817:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 818:.\Generated_Source\PSoC4/ADC.c ****     *
 819:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 820:.\Generated_Source\PSoC4/ADC.c ****     float32 ADC_CountsTo_Volts(uint32 chan, int16 adcCounts)
 821:.\Generated_Source\PSoC4/ADC.c ****     {
 1134              		.loc 1 821 0
 1135              		.cfi_startproc
 1136 0000 90B5     		push	{r4, r7, lr}
 1137              		.cfi_def_cfa_offset 12
 1138              		.cfi_offset 4, -12
 1139              		.cfi_offset 7, -8
 1140              		.cfi_offset 14, -4
 1141 0002 85B0     		sub	sp, sp, #20
 1142              		.cfi_def_cfa_offset 32
 1143 0004 00AF     		add	r7, sp, #0
 1144              		.cfi_def_cfa_register 7
 1145 0006 7860     		str	r0, [r7, #4]
 1146 0008 0A1C     		mov	r2, r1
 1147 000a BB1C     		add	r3, r7, #2
 1148 000c 1A80     		strh	r2, [r3]
 822:.\Generated_Source\PSoC4/ADC.c ****         float32 volts;
 823:.\Generated_Source\PSoC4/ADC.c **** 
 824:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 825:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1149              		.loc 1 825 0
 1150 000e 7B68     		ldr	r3, [r7, #4]
 1151 0010 002B     		cmp	r3, #0
 1152 0012 02D0     		beq	.L81
 1153              		.loc 1 825 0 is_stmt 0 discriminator 1
 1154 0014 0020     		mov	r0, #0
 1155 0016 FFF7FEFF 		bl	CyHalt
 1156              	.L81:
 826:.\Generated_Source\PSoC4/ADC.c **** 
 827:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 828:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 829:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 830:.\Generated_Source\PSoC4/ADC.c ****             {
 831:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 832:.\Generated_Source\PSoC4/ADC.c ****             }
 833:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 36


 834:.\Generated_Source\PSoC4/ADC.c **** 
 835:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 836:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1157              		.loc 1 836 0 is_stmt 1
 1158 001a BB1C     		add	r3, r7, #2
 1159 001c 1A88     		ldrh	r2, [r3]
 1160 001e 154B     		ldr	r3, .L83
 1161 0020 7968     		ldr	r1, [r7, #4]
 1162 0022 4900     		lsl	r1, r1, #1
 1163 0024 CB5A     		ldrh	r3, [r1, r3]
 1164 0026 9BB2     		uxth	r3, r3
 1165 0028 9BB2     		uxth	r3, r3
 1166 002a D31A     		sub	r3, r2, r3
 1167 002c 9AB2     		uxth	r2, r3
 1168 002e BB1C     		add	r3, r7, #2
 1169 0030 1A80     		strh	r2, [r3]
 837:.\Generated_Source\PSoC4/ADC.c **** 
 838:.\Generated_Source\PSoC4/ADC.c ****         volts = ((float32)adcCounts * ADC_10V_COUNTS) / (float32)ADC_countsPer10Volt[chan];
 1170              		.loc 1 838 0
 1171 0032 BB1C     		add	r3, r7, #2
 1172 0034 0022     		mov	r2, #0
 1173 0036 9B5E     		ldrsh	r3, [r3, r2]
 1174 0038 181C     		mov	r0, r3
 1175 003a FFF7FEFF 		bl	__aeabi_i2f
 1176 003e 031C     		add	r3, r0, #0
 1177 0040 181C     		add	r0, r3, #0
 1178 0042 0D49     		ldr	r1, .L83+4
 1179 0044 FFF7FEFF 		bl	__aeabi_fmul
 1180 0048 031C     		add	r3, r0, #0
 1181 004a 1C1C     		add	r4, r3, #0
 1182 004c 0B4B     		ldr	r3, .L83+8
 1183 004e 7A68     		ldr	r2, [r7, #4]
 1184 0050 9200     		lsl	r2, r2, #2
 1185 0052 D358     		ldr	r3, [r2, r3]
 1186 0054 181C     		mov	r0, r3
 1187 0056 FFF7FEFF 		bl	__aeabi_i2f
 1188 005a 031C     		add	r3, r0, #0
 1189 005c 201C     		add	r0, r4, #0
 1190 005e 191C     		add	r1, r3, #0
 1191 0060 FFF7FEFF 		bl	__aeabi_fdiv
 1192 0064 031C     		add	r3, r0, #0
 1193 0066 FB60     		str	r3, [r7, #12]
 839:.\Generated_Source\PSoC4/ADC.c **** 
 840:.\Generated_Source\PSoC4/ADC.c ****         return( volts );
 1194              		.loc 1 840 0
 1195 0068 FB68     		ldr	r3, [r7, #12]
 841:.\Generated_Source\PSoC4/ADC.c ****     }
 1196              		.loc 1 841 0
 1197 006a 181C     		add	r0, r3, #0
 1198 006c BD46     		mov	sp, r7
 1199 006e 05B0     		add	sp, sp, #20
 1200              		@ sp needed
 1201 0070 90BD     		pop	{r4, r7, pc}
 1202              	.L84:
 1203 0072 C046     		.align	2
 1204              	.L83:
 1205 0074 00000000 		.word	ADC_offset
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 37


 1206 0078 00002041 		.word	1092616192
 1207 007c 00000000 		.word	ADC_countsPer10Volt
 1208              		.cfi_endproc
 1209              	.LFE19:
 1210              		.size	ADC_CountsTo_Volts, .-ADC_CountsTo_Volts
 1211              		.text
 1212              	.Letext0:
 1213              		.file 2 ".\\Generated_Source\\PSoC4\\cytypes.h"
 1214              		.section	.debug_info,"",%progbits
 1215              	.Ldebug_info0:
 1216 0000 70040000 		.4byte	0x470
 1217 0004 0400     		.2byte	0x4
 1218 0006 00000000 		.4byte	.Ldebug_abbrev0
 1219 000a 04       		.byte	0x4
 1220 000b 01       		.uleb128 0x1
 1221 000c AA020000 		.4byte	.LASF59
 1222 0010 01       		.byte	0x1
 1223 0011 27000000 		.4byte	.LASF60
 1224 0015 26030000 		.4byte	.LASF61
 1225 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1226 001d 00000000 		.4byte	0
 1227 0021 00000000 		.4byte	.Ldebug_line0
 1228 0025 02       		.uleb128 0x2
 1229 0026 01       		.byte	0x1
 1230 0027 06       		.byte	0x6
 1231 0028 92020000 		.4byte	.LASF0
 1232 002c 02       		.uleb128 0x2
 1233 002d 01       		.byte	0x1
 1234 002e 08       		.byte	0x8
 1235 002f E3000000 		.4byte	.LASF1
 1236 0033 02       		.uleb128 0x2
 1237 0034 02       		.byte	0x2
 1238 0035 05       		.byte	0x5
 1239 0036 8B000000 		.4byte	.LASF2
 1240 003a 02       		.uleb128 0x2
 1241 003b 02       		.byte	0x2
 1242 003c 07       		.byte	0x7
 1243 003d 78000000 		.4byte	.LASF3
 1244 0041 02       		.uleb128 0x2
 1245 0042 04       		.byte	0x4
 1246 0043 05       		.byte	0x5
 1247 0044 84020000 		.4byte	.LASF4
 1248 0048 02       		.uleb128 0x2
 1249 0049 04       		.byte	0x4
 1250 004a 07       		.byte	0x7
 1251 004b 08010000 		.4byte	.LASF5
 1252 004f 02       		.uleb128 0x2
 1253 0050 08       		.byte	0x8
 1254 0051 05       		.byte	0x5
 1255 0052 00000000 		.4byte	.LASF6
 1256 0056 02       		.uleb128 0x2
 1257 0057 08       		.byte	0x8
 1258 0058 07       		.byte	0x7
 1259 0059 C3010000 		.4byte	.LASF7
 1260 005d 03       		.uleb128 0x3
 1261 005e 04       		.byte	0x4
 1262 005f 05       		.byte	0x5
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 38


 1263 0060 696E7400 		.ascii	"int\000"
 1264 0064 02       		.uleb128 0x2
 1265 0065 04       		.byte	0x4
 1266 0066 07       		.byte	0x7
 1267 0067 A4010000 		.4byte	.LASF8
 1268 006b 04       		.uleb128 0x4
 1269 006c 6A020000 		.4byte	.LASF9
 1270 0070 02       		.byte	0x2
 1271 0071 A1       		.byte	0xa1
 1272 0072 2C000000 		.4byte	0x2c
 1273 0076 04       		.uleb128 0x4
 1274 0077 7B010000 		.4byte	.LASF10
 1275 007b 02       		.byte	0x2
 1276 007c A2       		.byte	0xa2
 1277 007d 3A000000 		.4byte	0x3a
 1278 0081 04       		.uleb128 0x4
 1279 0082 8C010000 		.4byte	.LASF11
 1280 0086 02       		.byte	0x2
 1281 0087 A3       		.byte	0xa3
 1282 0088 48000000 		.4byte	0x48
 1283 008c 04       		.uleb128 0x4
 1284 008d 02010000 		.4byte	.LASF12
 1285 0091 02       		.byte	0x2
 1286 0092 A5       		.byte	0xa5
 1287 0093 33000000 		.4byte	0x33
 1288 0097 04       		.uleb128 0x4
 1289 0098 1A010000 		.4byte	.LASF13
 1290 009c 02       		.byte	0x2
 1291 009d A6       		.byte	0xa6
 1292 009e 41000000 		.4byte	0x41
 1293 00a2 04       		.uleb128 0x4
 1294 00a3 BA000000 		.4byte	.LASF14
 1295 00a7 02       		.byte	0x2
 1296 00a8 A7       		.byte	0xa7
 1297 00a9 AD000000 		.4byte	0xad
 1298 00ad 02       		.uleb128 0x2
 1299 00ae 04       		.byte	0x4
 1300 00af 04       		.byte	0x4
 1301 00b0 4D000000 		.4byte	.LASF15
 1302 00b4 02       		.uleb128 0x2
 1303 00b5 08       		.byte	0x8
 1304 00b6 04       		.byte	0x4
 1305 00b7 63010000 		.4byte	.LASF16
 1306 00bb 04       		.uleb128 0x4
 1307 00bc 84030000 		.4byte	.LASF17
 1308 00c0 02       		.byte	0x2
 1309 00c1 AC       		.byte	0xac
 1310 00c2 4F000000 		.4byte	0x4f
 1311 00c6 02       		.uleb128 0x2
 1312 00c7 01       		.byte	0x1
 1313 00c8 08       		.byte	0x8
 1314 00c9 8D020000 		.4byte	.LASF18
 1315 00cd 05       		.uleb128 0x5
 1316 00ce 21000000 		.4byte	.LASF19
 1317 00d2 02       		.byte	0x2
 1318 00d3 4D01     		.2byte	0x14d
 1319 00d5 D9000000 		.4byte	0xd9
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 39


 1320 00d9 06       		.uleb128 0x6
 1321 00da 81000000 		.4byte	0x81
 1322 00de 02       		.uleb128 0x2
 1323 00df 04       		.byte	0x4
 1324 00e0 07       		.byte	0x7
 1325 00e1 06020000 		.4byte	.LASF20
 1326 00e5 07       		.uleb128 0x7
 1327 00e6 E1010000 		.4byte	.LASF24
 1328 00ea 01       		.byte	0x1
 1329 00eb 3F       		.byte	0x3f
 1330 00ec 00000000 		.4byte	.LFB2
 1331 00f0 24000000 		.4byte	.LFE2-.LFB2
 1332 00f4 01       		.uleb128 0x1
 1333 00f5 9C       		.byte	0x9c
 1334 00f6 08       		.uleb128 0x8
 1335 00f7 EB010000 		.4byte	.LASF35
 1336 00fb 01       		.byte	0x1
 1337 00fc 5E       		.byte	0x5e
 1338 00fd 00000000 		.4byte	.LFB3
 1339 0101 C0010000 		.4byte	.LFE3-.LFB3
 1340 0105 01       		.uleb128 0x1
 1341 0106 9C       		.byte	0x9c
 1342 0107 36010000 		.4byte	0x136
 1343 010b 09       		.uleb128 0x9
 1344 010c 4C020000 		.4byte	.LASF21
 1345 0110 01       		.byte	0x1
 1346 0111 60       		.byte	0x60
 1347 0112 81000000 		.4byte	0x81
 1348 0116 02       		.uleb128 0x2
 1349 0117 91       		.byte	0x91
 1350 0118 6C       		.sleb128 -20
 1351 0119 09       		.uleb128 0x9
 1352 011a CD000000 		.4byte	.LASF22
 1353 011e 01       		.byte	0x1
 1354 011f 61       		.byte	0x61
 1355 0120 81000000 		.4byte	0x81
 1356 0124 02       		.uleb128 0x2
 1357 0125 91       		.byte	0x91
 1358 0126 64       		.sleb128 -28
 1359 0127 09       		.uleb128 0x9
 1360 0128 BC010000 		.4byte	.LASF23
 1361 012c 01       		.byte	0x1
 1362 012d 62       		.byte	0x62
 1363 012e 97000000 		.4byte	0x97
 1364 0132 02       		.uleb128 0x2
 1365 0133 91       		.byte	0x91
 1366 0134 68       		.sleb128 -24
 1367 0135 00       		.byte	0
 1368 0136 0A       		.uleb128 0xa
 1369 0137 B1010000 		.4byte	.LASF25
 1370 013b 01       		.byte	0x1
 1371 013c 2701     		.2byte	0x127
 1372 013e 00000000 		.4byte	.LFB4
 1373 0142 38000000 		.4byte	.LFE4-.LFB4
 1374 0146 01       		.uleb128 0x1
 1375 0147 9C       		.byte	0x9c
 1376 0148 0B       		.uleb128 0xb
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 40


 1377 0149 8A030000 		.4byte	.LASF26
 1378 014d 01       		.byte	0x1
 1379 014e 4A01     		.2byte	0x14a
 1380 0150 00000000 		.4byte	.LFB5
 1381 0154 18000000 		.4byte	.LFE5-.LFB5
 1382 0158 01       		.uleb128 0x1
 1383 0159 9C       		.byte	0x9c
 1384 015a 0B       		.uleb128 0xb
 1385 015b 36020000 		.4byte	.LASF27
 1386 015f 01       		.byte	0x1
 1387 0160 6401     		.2byte	0x164
 1388 0162 00000000 		.4byte	.LFB6
 1389 0166 14000000 		.4byte	.LFE6-.LFB6
 1390 016a 01       		.uleb128 0x1
 1391 016b 9C       		.byte	0x9c
 1392 016c 0B       		.uleb128 0xb
 1393 016d 5A020000 		.4byte	.LASF28
 1394 0171 01       		.byte	0x1
 1395 0172 7D01     		.2byte	0x17d
 1396 0174 00000000 		.4byte	.LFB7
 1397 0178 08000000 		.4byte	.LFE7-.LFB7
 1398 017c 01       		.uleb128 0x1
 1399 017d 9C       		.byte	0x9c
 1400 017e 0C       		.uleb128 0xc
 1401 017f 4F010000 		.4byte	.LASF30
 1402 0183 01       		.byte	0x1
 1403 0184 9F01     		.2byte	0x19f
 1404 0186 81000000 		.4byte	0x81
 1405 018a 00000000 		.4byte	.LFB8
 1406 018e 48000000 		.4byte	.LFE8-.LFB8
 1407 0192 01       		.uleb128 0x1
 1408 0193 9C       		.byte	0x9c
 1409 0194 B7010000 		.4byte	0x1b7
 1410 0198 0D       		.uleb128 0xd
 1411 0199 52020000 		.4byte	.LASF32
 1412 019d 01       		.byte	0x1
 1413 019e 9F01     		.2byte	0x19f
 1414 01a0 81000000 		.4byte	0x81
 1415 01a4 02       		.uleb128 0x2
 1416 01a5 91       		.byte	0x91
 1417 01a6 6C       		.sleb128 -20
 1418 01a7 0E       		.uleb128 0xe
 1419 01a8 B3000000 		.4byte	.LASF29
 1420 01ac 01       		.byte	0x1
 1421 01ad A101     		.2byte	0x1a1
 1422 01af 81000000 		.4byte	0x81
 1423 01b3 02       		.uleb128 0x2
 1424 01b4 91       		.byte	0x91
 1425 01b5 74       		.sleb128 -12
 1426 01b6 00       		.byte	0
 1427 01b7 0F       		.uleb128 0xf
 1428 01b8 20010000 		.4byte	.LASF31
 1429 01bc 01       		.byte	0x1
 1430 01bd D501     		.2byte	0x1d5
 1431 01bf 8C000000 		.4byte	0x8c
 1432 01c3 00000000 		.4byte	.LFB9
 1433 01c7 44000000 		.4byte	.LFE9-.LFB9
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 41


 1434 01cb 01       		.uleb128 0x1
 1435 01cc 9C       		.byte	0x9c
 1436 01cd F0010000 		.4byte	0x1f0
 1437 01d1 0D       		.uleb128 0xd
 1438 01d2 FA010000 		.4byte	.LASF33
 1439 01d6 01       		.byte	0x1
 1440 01d7 D501     		.2byte	0x1d5
 1441 01d9 81000000 		.4byte	0x81
 1442 01dd 02       		.uleb128 0x2
 1443 01de 91       		.byte	0x91
 1444 01df 6C       		.sleb128 -20
 1445 01e0 0E       		.uleb128 0xe
 1446 01e1 DA010000 		.4byte	.LASF34
 1447 01e5 01       		.byte	0x1
 1448 01e6 D701     		.2byte	0x1d7
 1449 01e8 81000000 		.4byte	0x81
 1450 01ec 02       		.uleb128 0x2
 1451 01ed 91       		.byte	0x91
 1452 01ee 74       		.sleb128 -12
 1453 01ef 00       		.byte	0
 1454 01f0 10       		.uleb128 0x10
 1455 01f1 30010000 		.4byte	.LASF36
 1456 01f5 01       		.byte	0x1
 1457 01f6 0202     		.2byte	0x202
 1458 01f8 00000000 		.4byte	.LFB10
 1459 01fc 1C000000 		.4byte	.LFE10-.LFB10
 1460 0200 01       		.uleb128 0x1
 1461 0201 9C       		.byte	0x9c
 1462 0202 16020000 		.4byte	0x216
 1463 0206 0D       		.uleb128 0xd
 1464 0207 47020000 		.4byte	.LASF37
 1465 020b 01       		.byte	0x1
 1466 020c 0202     		.2byte	0x202
 1467 020e 81000000 		.4byte	0x81
 1468 0212 02       		.uleb128 0x2
 1469 0213 91       		.byte	0x91
 1470 0214 74       		.sleb128 -12
 1471 0215 00       		.byte	0
 1472 0216 10       		.uleb128 0x10
 1473 0217 A3000000 		.4byte	.LASF38
 1474 021b 01       		.byte	0x1
 1475 021c 2E02     		.2byte	0x22e
 1476 021e 00000000 		.4byte	.LFB11
 1477 0222 30000000 		.4byte	.LFE11-.LFB11
 1478 0226 01       		.uleb128 0x1
 1479 0227 9C       		.byte	0x9c
 1480 0228 3C020000 		.4byte	0x23c
 1481 022c 0D       		.uleb128 0xd
 1482 022d 6A010000 		.4byte	.LASF39
 1483 0231 01       		.byte	0x1
 1484 0232 2E02     		.2byte	0x22e
 1485 0234 81000000 		.4byte	0x81
 1486 0238 02       		.uleb128 0x2
 1487 0239 91       		.byte	0x91
 1488 023a 74       		.sleb128 -12
 1489 023b 00       		.byte	0
 1490 023c 10       		.uleb128 0x10
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 42


 1491 023d F1000000 		.4byte	.LASF40
 1492 0241 01       		.byte	0x1
 1493 0242 4302     		.2byte	0x243
 1494 0244 00000000 		.4byte	.LFB12
 1495 0248 2C000000 		.4byte	.LFE12-.LFB12
 1496 024c 01       		.uleb128 0x1
 1497 024d 9C       		.byte	0x9c
 1498 024e 62020000 		.4byte	0x262
 1499 0252 0D       		.uleb128 0xd
 1500 0253 53000000 		.4byte	.LASF41
 1501 0257 01       		.byte	0x1
 1502 0258 4302     		.2byte	0x243
 1503 025a 81000000 		.4byte	0x81
 1504 025e 02       		.uleb128 0x2
 1505 025f 91       		.byte	0x91
 1506 0260 74       		.sleb128 -12
 1507 0261 00       		.byte	0
 1508 0262 10       		.uleb128 0x10
 1509 0263 93010000 		.4byte	.LASF42
 1510 0267 01       		.byte	0x1
 1511 0268 5B02     		.2byte	0x25b
 1512 026a 00000000 		.4byte	.LFB13
 1513 026e 1C000000 		.4byte	.LFE13-.LFB13
 1514 0272 01       		.uleb128 0x1
 1515 0273 9C       		.byte	0x9c
 1516 0274 88020000 		.4byte	0x288
 1517 0278 0D       		.uleb128 0xd
 1518 0279 47020000 		.4byte	.LASF37
 1519 027d 01       		.byte	0x1
 1520 027e 5B02     		.2byte	0x25b
 1521 0280 81000000 		.4byte	0x81
 1522 0284 02       		.uleb128 0x2
 1523 0285 91       		.byte	0x91
 1524 0286 74       		.sleb128 -12
 1525 0287 00       		.byte	0
 1526 0288 10       		.uleb128 0x10
 1527 0289 40010000 		.4byte	.LASF43
 1528 028d 01       		.byte	0x1
 1529 028e 7202     		.2byte	0x272
 1530 0290 00000000 		.4byte	.LFB14
 1531 0294 1C000000 		.4byte	.LFE14-.LFB14
 1532 0298 01       		.uleb128 0x1
 1533 0299 9C       		.byte	0x9c
 1534 029a AE020000 		.4byte	0x2ae
 1535 029e 0D       		.uleb128 0xd
 1536 029f 47020000 		.4byte	.LASF37
 1537 02a3 01       		.byte	0x1
 1538 02a4 7202     		.2byte	0x272
 1539 02a6 81000000 		.4byte	0x81
 1540 02aa 02       		.uleb128 0x2
 1541 02ab 91       		.byte	0x91
 1542 02ac 74       		.sleb128 -12
 1543 02ad 00       		.byte	0
 1544 02ae 11       		.uleb128 0x11
 1545 02af 95000000 		.4byte	.LASF44
 1546 02b3 01       		.byte	0x1
 1547 02b4 8E02     		.2byte	0x28e
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 43


 1548 02b6 00000000 		.4byte	.LFB15
 1549 02ba 30000000 		.4byte	.LFE15-.LFB15
 1550 02be 01       		.uleb128 0x1
 1551 02bf 9C       		.byte	0x9c
 1552 02c0 E3020000 		.4byte	0x2e3
 1553 02c4 0D       		.uleb128 0xd
 1554 02c5 FA010000 		.4byte	.LASF33
 1555 02c9 01       		.byte	0x1
 1556 02ca 8E02     		.2byte	0x28e
 1557 02cc 81000000 		.4byte	0x81
 1558 02d0 02       		.uleb128 0x2
 1559 02d1 91       		.byte	0x91
 1560 02d2 74       		.sleb128 -12
 1561 02d3 0D       		.uleb128 0xd
 1562 02d4 46000000 		.4byte	.LASF45
 1563 02d8 01       		.byte	0x1
 1564 02d9 8E02     		.2byte	0x28e
 1565 02db 8C000000 		.4byte	0x8c
 1566 02df 02       		.uleb128 0x2
 1567 02e0 91       		.byte	0x91
 1568 02e1 72       		.sleb128 -14
 1569 02e2 00       		.byte	0
 1570 02e3 11       		.uleb128 0x11
 1571 02e4 D7000000 		.4byte	.LASF46
 1572 02e8 01       		.byte	0x1
 1573 02e9 B002     		.2byte	0x2b0
 1574 02eb 00000000 		.4byte	.LFB16
 1575 02ef 2C000000 		.4byte	.LFE16-.LFB16
 1576 02f3 01       		.uleb128 0x1
 1577 02f4 9C       		.byte	0x9c
 1578 02f5 18030000 		.4byte	0x318
 1579 02f9 0D       		.uleb128 0xd
 1580 02fa FA010000 		.4byte	.LASF33
 1581 02fe 01       		.byte	0x1
 1582 02ff B002     		.2byte	0x2b0
 1583 0301 81000000 		.4byte	0x81
 1584 0305 02       		.uleb128 0x2
 1585 0306 91       		.byte	0x91
 1586 0307 74       		.sleb128 -12
 1587 0308 0D       		.uleb128 0xd
 1588 0309 73010000 		.4byte	.LASF47
 1589 030d 01       		.byte	0x1
 1590 030e B002     		.2byte	0x2b0
 1591 0310 97000000 		.4byte	0x97
 1592 0314 02       		.uleb128 0x2
 1593 0315 91       		.byte	0x91
 1594 0316 70       		.sleb128 -16
 1595 0317 00       		.byte	0
 1596 0318 0F       		.uleb128 0xf
 1597 0319 5D000000 		.4byte	.LASF48
 1598 031d 01       		.byte	0x1
 1599 031e D102     		.2byte	0x2d1
 1600 0320 8C000000 		.4byte	0x8c
 1601 0324 00000000 		.4byte	.LFB17
 1602 0328 A4000000 		.4byte	.LFE17-.LFB17
 1603 032c 01       		.uleb128 0x1
 1604 032d 9C       		.byte	0x9c
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 44


 1605 032e 60030000 		.4byte	0x360
 1606 0332 0D       		.uleb128 0xd
 1607 0333 FA010000 		.4byte	.LASF33
 1608 0337 01       		.byte	0x1
 1609 0338 D102     		.2byte	0x2d1
 1610 033a 81000000 		.4byte	0x81
 1611 033e 02       		.uleb128 0x2
 1612 033f 91       		.byte	0x91
 1613 0340 6C       		.sleb128 -20
 1614 0341 0D       		.uleb128 0xd
 1615 0342 82010000 		.4byte	.LASF49
 1616 0346 01       		.byte	0x1
 1617 0347 D102     		.2byte	0x2d1
 1618 0349 8C000000 		.4byte	0x8c
 1619 034d 02       		.uleb128 0x2
 1620 034e 91       		.byte	0x91
 1621 034f 6A       		.sleb128 -22
 1622 0350 0E       		.uleb128 0xe
 1623 0351 FF010000 		.4byte	.LASF50
 1624 0355 01       		.byte	0x1
 1625 0356 D302     		.2byte	0x2d3
 1626 0358 8C000000 		.4byte	0x8c
 1627 035c 02       		.uleb128 0x2
 1628 035d 91       		.byte	0x91
 1629 035e 76       		.sleb128 -10
 1630 035f 00       		.byte	0
 1631 0360 0F       		.uleb128 0xf
 1632 0361 0F020000 		.4byte	.LASF51
 1633 0365 01       		.byte	0x1
 1634 0366 0703     		.2byte	0x307
 1635 0368 97000000 		.4byte	0x97
 1636 036c 00000000 		.4byte	.LFB18
 1637 0370 98000000 		.4byte	.LFE18-.LFB18
 1638 0374 01       		.uleb128 0x1
 1639 0375 9C       		.byte	0x9c
 1640 0376 A8030000 		.4byte	0x3a8
 1641 037a 0D       		.uleb128 0xd
 1642 037b FA010000 		.4byte	.LASF33
 1643 037f 01       		.byte	0x1
 1644 0380 0703     		.2byte	0x307
 1645 0382 81000000 		.4byte	0x81
 1646 0386 02       		.uleb128 0x2
 1647 0387 91       		.byte	0x91
 1648 0388 64       		.sleb128 -28
 1649 0389 0D       		.uleb128 0xd
 1650 038a 82010000 		.4byte	.LASF49
 1651 038e 01       		.byte	0x1
 1652 038f 0703     		.2byte	0x307
 1653 0391 8C000000 		.4byte	0x8c
 1654 0395 02       		.uleb128 0x2
 1655 0396 91       		.byte	0x91
 1656 0397 62       		.sleb128 -30
 1657 0398 0E       		.uleb128 0xe
 1658 0399 71000000 		.4byte	.LASF52
 1659 039d 01       		.byte	0x1
 1660 039e 0903     		.2byte	0x309
 1661 03a0 BB000000 		.4byte	0xbb
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 45


 1662 03a4 02       		.uleb128 0x2
 1663 03a5 91       		.byte	0x91
 1664 03a6 68       		.sleb128 -24
 1665 03a7 00       		.byte	0
 1666 03a8 0F       		.uleb128 0xf
 1667 03a9 23020000 		.4byte	.LASF53
 1668 03ad 01       		.byte	0x1
 1669 03ae 3403     		.2byte	0x334
 1670 03b0 A2000000 		.4byte	0xa2
 1671 03b4 00000000 		.4byte	.LFB19
 1672 03b8 80000000 		.4byte	.LFE19-.LFB19
 1673 03bc 01       		.uleb128 0x1
 1674 03bd 9C       		.byte	0x9c
 1675 03be F0030000 		.4byte	0x3f0
 1676 03c2 0D       		.uleb128 0xd
 1677 03c3 FA010000 		.4byte	.LASF33
 1678 03c7 01       		.byte	0x1
 1679 03c8 3403     		.2byte	0x334
 1680 03ca 81000000 		.4byte	0x81
 1681 03ce 02       		.uleb128 0x2
 1682 03cf 91       		.byte	0x91
 1683 03d0 64       		.sleb128 -28
 1684 03d1 0D       		.uleb128 0xd
 1685 03d2 82010000 		.4byte	.LASF49
 1686 03d6 01       		.byte	0x1
 1687 03d7 3403     		.2byte	0x334
 1688 03d9 8C000000 		.4byte	0x8c
 1689 03dd 02       		.uleb128 0x2
 1690 03de 91       		.byte	0x91
 1691 03df 62       		.sleb128 -30
 1692 03e0 0E       		.uleb128 0xe
 1693 03e1 F4010000 		.4byte	.LASF54
 1694 03e5 01       		.byte	0x1
 1695 03e6 3603     		.2byte	0x336
 1696 03e8 A2000000 		.4byte	0xa2
 1697 03ec 02       		.uleb128 0x2
 1698 03ed 91       		.byte	0x91
 1699 03ee 6C       		.sleb128 -20
 1700 03ef 00       		.byte	0
 1701 03f0 12       		.uleb128 0x12
 1702 03f1 81000000 		.4byte	0x81
 1703 03f5 00040000 		.4byte	0x400
 1704 03f9 13       		.uleb128 0x13
 1705 03fa DE000000 		.4byte	0xde
 1706 03fe 00       		.byte	0
 1707 03ff 00       		.byte	0
 1708 0400 09       		.uleb128 0x9
 1709 0401 0E000000 		.4byte	.LASF55
 1710 0405 01       		.byte	0x1
 1711 0406 21       		.byte	0x21
 1712 0407 11040000 		.4byte	0x411
 1713 040b 05       		.uleb128 0x5
 1714 040c 03       		.byte	0x3
 1715 040d 00000000 		.4byte	ADC_channelsConfig
 1716 0411 14       		.uleb128 0x14
 1717 0412 F0030000 		.4byte	0x3f0
 1718 0416 15       		.uleb128 0x15
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 46


 1719 0417 9E020000 		.4byte	.LASF56
 1720 041b 01       		.byte	0x1
 1721 041c 18       		.byte	0x18
 1722 041d 6B000000 		.4byte	0x6b
 1723 0421 05       		.uleb128 0x5
 1724 0422 03       		.byte	0x3
 1725 0423 00000000 		.4byte	ADC_initVar
 1726 0427 12       		.uleb128 0x12
 1727 0428 8C000000 		.4byte	0x8c
 1728 042c 37040000 		.4byte	0x437
 1729 0430 13       		.uleb128 0x13
 1730 0431 DE000000 		.4byte	0xde
 1731 0435 00       		.byte	0
 1732 0436 00       		.byte	0
 1733 0437 15       		.uleb128 0x15
 1734 0438 C2000000 		.4byte	.LASF57
 1735 043c 01       		.byte	0x1
 1736 043d 19       		.byte	0x19
 1737 043e 48040000 		.4byte	0x448
 1738 0442 05       		.uleb128 0x5
 1739 0443 03       		.byte	0x3
 1740 0444 00000000 		.4byte	ADC_offset
 1741 0448 06       		.uleb128 0x6
 1742 0449 27040000 		.4byte	0x427
 1743 044d 12       		.uleb128 0x12
 1744 044e 97000000 		.4byte	0x97
 1745 0452 5D040000 		.4byte	0x45d
 1746 0456 13       		.uleb128 0x13
 1747 0457 DE000000 		.4byte	0xde
 1748 045b 00       		.byte	0
 1749 045c 00       		.byte	0
 1750 045d 15       		.uleb128 0x15
 1751 045e 70020000 		.4byte	.LASF58
 1752 0462 01       		.byte	0x1
 1753 0463 1A       		.byte	0x1a
 1754 0464 6E040000 		.4byte	0x46e
 1755 0468 05       		.uleb128 0x5
 1756 0469 03       		.byte	0x3
 1757 046a 00000000 		.4byte	ADC_countsPer10Volt
 1758 046e 06       		.uleb128 0x6
 1759 046f 4D040000 		.4byte	0x44d
 1760 0473 00       		.byte	0
 1761              		.section	.debug_abbrev,"",%progbits
 1762              	.Ldebug_abbrev0:
 1763 0000 01       		.uleb128 0x1
 1764 0001 11       		.uleb128 0x11
 1765 0002 01       		.byte	0x1
 1766 0003 25       		.uleb128 0x25
 1767 0004 0E       		.uleb128 0xe
 1768 0005 13       		.uleb128 0x13
 1769 0006 0B       		.uleb128 0xb
 1770 0007 03       		.uleb128 0x3
 1771 0008 0E       		.uleb128 0xe
 1772 0009 1B       		.uleb128 0x1b
 1773 000a 0E       		.uleb128 0xe
 1774 000b 55       		.uleb128 0x55
 1775 000c 17       		.uleb128 0x17
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 47


 1776 000d 11       		.uleb128 0x11
 1777 000e 01       		.uleb128 0x1
 1778 000f 10       		.uleb128 0x10
 1779 0010 17       		.uleb128 0x17
 1780 0011 00       		.byte	0
 1781 0012 00       		.byte	0
 1782 0013 02       		.uleb128 0x2
 1783 0014 24       		.uleb128 0x24
 1784 0015 00       		.byte	0
 1785 0016 0B       		.uleb128 0xb
 1786 0017 0B       		.uleb128 0xb
 1787 0018 3E       		.uleb128 0x3e
 1788 0019 0B       		.uleb128 0xb
 1789 001a 03       		.uleb128 0x3
 1790 001b 0E       		.uleb128 0xe
 1791 001c 00       		.byte	0
 1792 001d 00       		.byte	0
 1793 001e 03       		.uleb128 0x3
 1794 001f 24       		.uleb128 0x24
 1795 0020 00       		.byte	0
 1796 0021 0B       		.uleb128 0xb
 1797 0022 0B       		.uleb128 0xb
 1798 0023 3E       		.uleb128 0x3e
 1799 0024 0B       		.uleb128 0xb
 1800 0025 03       		.uleb128 0x3
 1801 0026 08       		.uleb128 0x8
 1802 0027 00       		.byte	0
 1803 0028 00       		.byte	0
 1804 0029 04       		.uleb128 0x4
 1805 002a 16       		.uleb128 0x16
 1806 002b 00       		.byte	0
 1807 002c 03       		.uleb128 0x3
 1808 002d 0E       		.uleb128 0xe
 1809 002e 3A       		.uleb128 0x3a
 1810 002f 0B       		.uleb128 0xb
 1811 0030 3B       		.uleb128 0x3b
 1812 0031 0B       		.uleb128 0xb
 1813 0032 49       		.uleb128 0x49
 1814 0033 13       		.uleb128 0x13
 1815 0034 00       		.byte	0
 1816 0035 00       		.byte	0
 1817 0036 05       		.uleb128 0x5
 1818 0037 16       		.uleb128 0x16
 1819 0038 00       		.byte	0
 1820 0039 03       		.uleb128 0x3
 1821 003a 0E       		.uleb128 0xe
 1822 003b 3A       		.uleb128 0x3a
 1823 003c 0B       		.uleb128 0xb
 1824 003d 3B       		.uleb128 0x3b
 1825 003e 05       		.uleb128 0x5
 1826 003f 49       		.uleb128 0x49
 1827 0040 13       		.uleb128 0x13
 1828 0041 00       		.byte	0
 1829 0042 00       		.byte	0
 1830 0043 06       		.uleb128 0x6
 1831 0044 35       		.uleb128 0x35
 1832 0045 00       		.byte	0
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 48


 1833 0046 49       		.uleb128 0x49
 1834 0047 13       		.uleb128 0x13
 1835 0048 00       		.byte	0
 1836 0049 00       		.byte	0
 1837 004a 07       		.uleb128 0x7
 1838 004b 2E       		.uleb128 0x2e
 1839 004c 00       		.byte	0
 1840 004d 3F       		.uleb128 0x3f
 1841 004e 19       		.uleb128 0x19
 1842 004f 03       		.uleb128 0x3
 1843 0050 0E       		.uleb128 0xe
 1844 0051 3A       		.uleb128 0x3a
 1845 0052 0B       		.uleb128 0xb
 1846 0053 3B       		.uleb128 0x3b
 1847 0054 0B       		.uleb128 0xb
 1848 0055 27       		.uleb128 0x27
 1849 0056 19       		.uleb128 0x19
 1850 0057 11       		.uleb128 0x11
 1851 0058 01       		.uleb128 0x1
 1852 0059 12       		.uleb128 0x12
 1853 005a 06       		.uleb128 0x6
 1854 005b 40       		.uleb128 0x40
 1855 005c 18       		.uleb128 0x18
 1856 005d 9642     		.uleb128 0x2116
 1857 005f 19       		.uleb128 0x19
 1858 0060 00       		.byte	0
 1859 0061 00       		.byte	0
 1860 0062 08       		.uleb128 0x8
 1861 0063 2E       		.uleb128 0x2e
 1862 0064 01       		.byte	0x1
 1863 0065 3F       		.uleb128 0x3f
 1864 0066 19       		.uleb128 0x19
 1865 0067 03       		.uleb128 0x3
 1866 0068 0E       		.uleb128 0xe
 1867 0069 3A       		.uleb128 0x3a
 1868 006a 0B       		.uleb128 0xb
 1869 006b 3B       		.uleb128 0x3b
 1870 006c 0B       		.uleb128 0xb
 1871 006d 27       		.uleb128 0x27
 1872 006e 19       		.uleb128 0x19
 1873 006f 11       		.uleb128 0x11
 1874 0070 01       		.uleb128 0x1
 1875 0071 12       		.uleb128 0x12
 1876 0072 06       		.uleb128 0x6
 1877 0073 40       		.uleb128 0x40
 1878 0074 18       		.uleb128 0x18
 1879 0075 9642     		.uleb128 0x2116
 1880 0077 19       		.uleb128 0x19
 1881 0078 01       		.uleb128 0x1
 1882 0079 13       		.uleb128 0x13
 1883 007a 00       		.byte	0
 1884 007b 00       		.byte	0
 1885 007c 09       		.uleb128 0x9
 1886 007d 34       		.uleb128 0x34
 1887 007e 00       		.byte	0
 1888 007f 03       		.uleb128 0x3
 1889 0080 0E       		.uleb128 0xe
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 49


 1890 0081 3A       		.uleb128 0x3a
 1891 0082 0B       		.uleb128 0xb
 1892 0083 3B       		.uleb128 0x3b
 1893 0084 0B       		.uleb128 0xb
 1894 0085 49       		.uleb128 0x49
 1895 0086 13       		.uleb128 0x13
 1896 0087 02       		.uleb128 0x2
 1897 0088 18       		.uleb128 0x18
 1898 0089 00       		.byte	0
 1899 008a 00       		.byte	0
 1900 008b 0A       		.uleb128 0xa
 1901 008c 2E       		.uleb128 0x2e
 1902 008d 00       		.byte	0
 1903 008e 3F       		.uleb128 0x3f
 1904 008f 19       		.uleb128 0x19
 1905 0090 03       		.uleb128 0x3
 1906 0091 0E       		.uleb128 0xe
 1907 0092 3A       		.uleb128 0x3a
 1908 0093 0B       		.uleb128 0xb
 1909 0094 3B       		.uleb128 0x3b
 1910 0095 05       		.uleb128 0x5
 1911 0096 27       		.uleb128 0x27
 1912 0097 19       		.uleb128 0x19
 1913 0098 11       		.uleb128 0x11
 1914 0099 01       		.uleb128 0x1
 1915 009a 12       		.uleb128 0x12
 1916 009b 06       		.uleb128 0x6
 1917 009c 40       		.uleb128 0x40
 1918 009d 18       		.uleb128 0x18
 1919 009e 9642     		.uleb128 0x2116
 1920 00a0 19       		.uleb128 0x19
 1921 00a1 00       		.byte	0
 1922 00a2 00       		.byte	0
 1923 00a3 0B       		.uleb128 0xb
 1924 00a4 2E       		.uleb128 0x2e
 1925 00a5 00       		.byte	0
 1926 00a6 3F       		.uleb128 0x3f
 1927 00a7 19       		.uleb128 0x19
 1928 00a8 03       		.uleb128 0x3
 1929 00a9 0E       		.uleb128 0xe
 1930 00aa 3A       		.uleb128 0x3a
 1931 00ab 0B       		.uleb128 0xb
 1932 00ac 3B       		.uleb128 0x3b
 1933 00ad 05       		.uleb128 0x5
 1934 00ae 27       		.uleb128 0x27
 1935 00af 19       		.uleb128 0x19
 1936 00b0 11       		.uleb128 0x11
 1937 00b1 01       		.uleb128 0x1
 1938 00b2 12       		.uleb128 0x12
 1939 00b3 06       		.uleb128 0x6
 1940 00b4 40       		.uleb128 0x40
 1941 00b5 18       		.uleb128 0x18
 1942 00b6 9742     		.uleb128 0x2117
 1943 00b8 19       		.uleb128 0x19
 1944 00b9 00       		.byte	0
 1945 00ba 00       		.byte	0
 1946 00bb 0C       		.uleb128 0xc
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 50


 1947 00bc 2E       		.uleb128 0x2e
 1948 00bd 01       		.byte	0x1
 1949 00be 3F       		.uleb128 0x3f
 1950 00bf 19       		.uleb128 0x19
 1951 00c0 03       		.uleb128 0x3
 1952 00c1 0E       		.uleb128 0xe
 1953 00c2 3A       		.uleb128 0x3a
 1954 00c3 0B       		.uleb128 0xb
 1955 00c4 3B       		.uleb128 0x3b
 1956 00c5 05       		.uleb128 0x5
 1957 00c6 27       		.uleb128 0x27
 1958 00c7 19       		.uleb128 0x19
 1959 00c8 49       		.uleb128 0x49
 1960 00c9 13       		.uleb128 0x13
 1961 00ca 11       		.uleb128 0x11
 1962 00cb 01       		.uleb128 0x1
 1963 00cc 12       		.uleb128 0x12
 1964 00cd 06       		.uleb128 0x6
 1965 00ce 40       		.uleb128 0x40
 1966 00cf 18       		.uleb128 0x18
 1967 00d0 9742     		.uleb128 0x2117
 1968 00d2 19       		.uleb128 0x19
 1969 00d3 01       		.uleb128 0x1
 1970 00d4 13       		.uleb128 0x13
 1971 00d5 00       		.byte	0
 1972 00d6 00       		.byte	0
 1973 00d7 0D       		.uleb128 0xd
 1974 00d8 05       		.uleb128 0x5
 1975 00d9 00       		.byte	0
 1976 00da 03       		.uleb128 0x3
 1977 00db 0E       		.uleb128 0xe
 1978 00dc 3A       		.uleb128 0x3a
 1979 00dd 0B       		.uleb128 0xb
 1980 00de 3B       		.uleb128 0x3b
 1981 00df 05       		.uleb128 0x5
 1982 00e0 49       		.uleb128 0x49
 1983 00e1 13       		.uleb128 0x13
 1984 00e2 02       		.uleb128 0x2
 1985 00e3 18       		.uleb128 0x18
 1986 00e4 00       		.byte	0
 1987 00e5 00       		.byte	0
 1988 00e6 0E       		.uleb128 0xe
 1989 00e7 34       		.uleb128 0x34
 1990 00e8 00       		.byte	0
 1991 00e9 03       		.uleb128 0x3
 1992 00ea 0E       		.uleb128 0xe
 1993 00eb 3A       		.uleb128 0x3a
 1994 00ec 0B       		.uleb128 0xb
 1995 00ed 3B       		.uleb128 0x3b
 1996 00ee 05       		.uleb128 0x5
 1997 00ef 49       		.uleb128 0x49
 1998 00f0 13       		.uleb128 0x13
 1999 00f1 02       		.uleb128 0x2
 2000 00f2 18       		.uleb128 0x18
 2001 00f3 00       		.byte	0
 2002 00f4 00       		.byte	0
 2003 00f5 0F       		.uleb128 0xf
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 51


 2004 00f6 2E       		.uleb128 0x2e
 2005 00f7 01       		.byte	0x1
 2006 00f8 3F       		.uleb128 0x3f
 2007 00f9 19       		.uleb128 0x19
 2008 00fa 03       		.uleb128 0x3
 2009 00fb 0E       		.uleb128 0xe
 2010 00fc 3A       		.uleb128 0x3a
 2011 00fd 0B       		.uleb128 0xb
 2012 00fe 3B       		.uleb128 0x3b
 2013 00ff 05       		.uleb128 0x5
 2014 0100 27       		.uleb128 0x27
 2015 0101 19       		.uleb128 0x19
 2016 0102 49       		.uleb128 0x49
 2017 0103 13       		.uleb128 0x13
 2018 0104 11       		.uleb128 0x11
 2019 0105 01       		.uleb128 0x1
 2020 0106 12       		.uleb128 0x12
 2021 0107 06       		.uleb128 0x6
 2022 0108 40       		.uleb128 0x40
 2023 0109 18       		.uleb128 0x18
 2024 010a 9642     		.uleb128 0x2116
 2025 010c 19       		.uleb128 0x19
 2026 010d 01       		.uleb128 0x1
 2027 010e 13       		.uleb128 0x13
 2028 010f 00       		.byte	0
 2029 0110 00       		.byte	0
 2030 0111 10       		.uleb128 0x10
 2031 0112 2E       		.uleb128 0x2e
 2032 0113 01       		.byte	0x1
 2033 0114 3F       		.uleb128 0x3f
 2034 0115 19       		.uleb128 0x19
 2035 0116 03       		.uleb128 0x3
 2036 0117 0E       		.uleb128 0xe
 2037 0118 3A       		.uleb128 0x3a
 2038 0119 0B       		.uleb128 0xb
 2039 011a 3B       		.uleb128 0x3b
 2040 011b 05       		.uleb128 0x5
 2041 011c 27       		.uleb128 0x27
 2042 011d 19       		.uleb128 0x19
 2043 011e 11       		.uleb128 0x11
 2044 011f 01       		.uleb128 0x1
 2045 0120 12       		.uleb128 0x12
 2046 0121 06       		.uleb128 0x6
 2047 0122 40       		.uleb128 0x40
 2048 0123 18       		.uleb128 0x18
 2049 0124 9742     		.uleb128 0x2117
 2050 0126 19       		.uleb128 0x19
 2051 0127 01       		.uleb128 0x1
 2052 0128 13       		.uleb128 0x13
 2053 0129 00       		.byte	0
 2054 012a 00       		.byte	0
 2055 012b 11       		.uleb128 0x11
 2056 012c 2E       		.uleb128 0x2e
 2057 012d 01       		.byte	0x1
 2058 012e 3F       		.uleb128 0x3f
 2059 012f 19       		.uleb128 0x19
 2060 0130 03       		.uleb128 0x3
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 52


 2061 0131 0E       		.uleb128 0xe
 2062 0132 3A       		.uleb128 0x3a
 2063 0133 0B       		.uleb128 0xb
 2064 0134 3B       		.uleb128 0x3b
 2065 0135 05       		.uleb128 0x5
 2066 0136 27       		.uleb128 0x27
 2067 0137 19       		.uleb128 0x19
 2068 0138 11       		.uleb128 0x11
 2069 0139 01       		.uleb128 0x1
 2070 013a 12       		.uleb128 0x12
 2071 013b 06       		.uleb128 0x6
 2072 013c 40       		.uleb128 0x40
 2073 013d 18       		.uleb128 0x18
 2074 013e 9642     		.uleb128 0x2116
 2075 0140 19       		.uleb128 0x19
 2076 0141 01       		.uleb128 0x1
 2077 0142 13       		.uleb128 0x13
 2078 0143 00       		.byte	0
 2079 0144 00       		.byte	0
 2080 0145 12       		.uleb128 0x12
 2081 0146 01       		.uleb128 0x1
 2082 0147 01       		.byte	0x1
 2083 0148 49       		.uleb128 0x49
 2084 0149 13       		.uleb128 0x13
 2085 014a 01       		.uleb128 0x1
 2086 014b 13       		.uleb128 0x13
 2087 014c 00       		.byte	0
 2088 014d 00       		.byte	0
 2089 014e 13       		.uleb128 0x13
 2090 014f 21       		.uleb128 0x21
 2091 0150 00       		.byte	0
 2092 0151 49       		.uleb128 0x49
 2093 0152 13       		.uleb128 0x13
 2094 0153 2F       		.uleb128 0x2f
 2095 0154 0B       		.uleb128 0xb
 2096 0155 00       		.byte	0
 2097 0156 00       		.byte	0
 2098 0157 14       		.uleb128 0x14
 2099 0158 26       		.uleb128 0x26
 2100 0159 00       		.byte	0
 2101 015a 49       		.uleb128 0x49
 2102 015b 13       		.uleb128 0x13
 2103 015c 00       		.byte	0
 2104 015d 00       		.byte	0
 2105 015e 15       		.uleb128 0x15
 2106 015f 34       		.uleb128 0x34
 2107 0160 00       		.byte	0
 2108 0161 03       		.uleb128 0x3
 2109 0162 0E       		.uleb128 0xe
 2110 0163 3A       		.uleb128 0x3a
 2111 0164 0B       		.uleb128 0xb
 2112 0165 3B       		.uleb128 0x3b
 2113 0166 0B       		.uleb128 0xb
 2114 0167 49       		.uleb128 0x49
 2115 0168 13       		.uleb128 0x13
 2116 0169 3F       		.uleb128 0x3f
 2117 016a 19       		.uleb128 0x19
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 53


 2118 016b 02       		.uleb128 0x2
 2119 016c 18       		.uleb128 0x18
 2120 016d 00       		.byte	0
 2121 016e 00       		.byte	0
 2122 016f 00       		.byte	0
 2123              		.section	.debug_aranges,"",%progbits
 2124 0000 A4000000 		.4byte	0xa4
 2125 0004 0200     		.2byte	0x2
 2126 0006 00000000 		.4byte	.Ldebug_info0
 2127 000a 04       		.byte	0x4
 2128 000b 00       		.byte	0
 2129 000c 0000     		.2byte	0
 2130 000e 0000     		.2byte	0
 2131 0010 00000000 		.4byte	.LFB2
 2132 0014 24000000 		.4byte	.LFE2-.LFB2
 2133 0018 00000000 		.4byte	.LFB3
 2134 001c C0010000 		.4byte	.LFE3-.LFB3
 2135 0020 00000000 		.4byte	.LFB4
 2136 0024 38000000 		.4byte	.LFE4-.LFB4
 2137 0028 00000000 		.4byte	.LFB5
 2138 002c 18000000 		.4byte	.LFE5-.LFB5
 2139 0030 00000000 		.4byte	.LFB6
 2140 0034 14000000 		.4byte	.LFE6-.LFB6
 2141 0038 00000000 		.4byte	.LFB7
 2142 003c 08000000 		.4byte	.LFE7-.LFB7
 2143 0040 00000000 		.4byte	.LFB8
 2144 0044 48000000 		.4byte	.LFE8-.LFB8
 2145 0048 00000000 		.4byte	.LFB9
 2146 004c 44000000 		.4byte	.LFE9-.LFB9
 2147 0050 00000000 		.4byte	.LFB10
 2148 0054 1C000000 		.4byte	.LFE10-.LFB10
 2149 0058 00000000 		.4byte	.LFB11
 2150 005c 30000000 		.4byte	.LFE11-.LFB11
 2151 0060 00000000 		.4byte	.LFB12
 2152 0064 2C000000 		.4byte	.LFE12-.LFB12
 2153 0068 00000000 		.4byte	.LFB13
 2154 006c 1C000000 		.4byte	.LFE13-.LFB13
 2155 0070 00000000 		.4byte	.LFB14
 2156 0074 1C000000 		.4byte	.LFE14-.LFB14
 2157 0078 00000000 		.4byte	.LFB15
 2158 007c 30000000 		.4byte	.LFE15-.LFB15
 2159 0080 00000000 		.4byte	.LFB16
 2160 0084 2C000000 		.4byte	.LFE16-.LFB16
 2161 0088 00000000 		.4byte	.LFB17
 2162 008c A4000000 		.4byte	.LFE17-.LFB17
 2163 0090 00000000 		.4byte	.LFB18
 2164 0094 98000000 		.4byte	.LFE18-.LFB18
 2165 0098 00000000 		.4byte	.LFB19
 2166 009c 80000000 		.4byte	.LFE19-.LFB19
 2167 00a0 00000000 		.4byte	0
 2168 00a4 00000000 		.4byte	0
 2169              		.section	.debug_ranges,"",%progbits
 2170              	.Ldebug_ranges0:
 2171 0000 00000000 		.4byte	.LFB2
 2172 0004 24000000 		.4byte	.LFE2
 2173 0008 00000000 		.4byte	.LFB3
 2174 000c C0010000 		.4byte	.LFE3
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 54


 2175 0010 00000000 		.4byte	.LFB4
 2176 0014 38000000 		.4byte	.LFE4
 2177 0018 00000000 		.4byte	.LFB5
 2178 001c 18000000 		.4byte	.LFE5
 2179 0020 00000000 		.4byte	.LFB6
 2180 0024 14000000 		.4byte	.LFE6
 2181 0028 00000000 		.4byte	.LFB7
 2182 002c 08000000 		.4byte	.LFE7
 2183 0030 00000000 		.4byte	.LFB8
 2184 0034 48000000 		.4byte	.LFE8
 2185 0038 00000000 		.4byte	.LFB9
 2186 003c 44000000 		.4byte	.LFE9
 2187 0040 00000000 		.4byte	.LFB10
 2188 0044 1C000000 		.4byte	.LFE10
 2189 0048 00000000 		.4byte	.LFB11
 2190 004c 30000000 		.4byte	.LFE11
 2191 0050 00000000 		.4byte	.LFB12
 2192 0054 2C000000 		.4byte	.LFE12
 2193 0058 00000000 		.4byte	.LFB13
 2194 005c 1C000000 		.4byte	.LFE13
 2195 0060 00000000 		.4byte	.LFB14
 2196 0064 1C000000 		.4byte	.LFE14
 2197 0068 00000000 		.4byte	.LFB15
 2198 006c 30000000 		.4byte	.LFE15
 2199 0070 00000000 		.4byte	.LFB16
 2200 0074 2C000000 		.4byte	.LFE16
 2201 0078 00000000 		.4byte	.LFB17
 2202 007c A4000000 		.4byte	.LFE17
 2203 0080 00000000 		.4byte	.LFB18
 2204 0084 98000000 		.4byte	.LFE18
 2205 0088 00000000 		.4byte	.LFB19
 2206 008c 80000000 		.4byte	.LFE19
 2207 0090 00000000 		.4byte	0
 2208 0094 00000000 		.4byte	0
 2209              		.section	.debug_line,"",%progbits
 2210              	.Ldebug_line0:
 2211 0000 31020000 		.section	.debug_str,"MS",%progbits,1
 2211      02004200 
 2211      00000201 
 2211      FB0E0D00 
 2211      01010101 
 2212              	.LASF6:
 2213 0000 6C6F6E67 		.ascii	"long long int\000"
 2213      206C6F6E 
 2213      6720696E 
 2213      7400
 2214              	.LASF55:
 2215 000e 4144435F 		.ascii	"ADC_channelsConfig\000"
 2215      6368616E 
 2215      6E656C73 
 2215      436F6E66 
 2215      696700
 2216              	.LASF19:
 2217 0021 72656733 		.ascii	"reg32\000"
 2217      3200
 2218              	.LASF60:
 2219 0027 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\ADC.c\000"
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 55


 2219      6E657261 
 2219      7465645F 
 2219      536F7572 
 2219      63655C50 
 2220              	.LASF45:
 2221 0046 6F666673 		.ascii	"offset\000"
 2221      657400
 2222              	.LASF15:
 2223 004d 666C6F61 		.ascii	"float\000"
 2223      7400
 2224              	.LASF41:
 2225 0053 68696768 		.ascii	"highLimit\000"
 2225      4C696D69 
 2225      7400
 2226              	.LASF48:
 2227 005d 4144435F 		.ascii	"ADC_CountsTo_mVolts\000"
 2227      436F756E 
 2227      7473546F 
 2227      5F6D566F 
 2227      6C747300 
 2228              	.LASF52:
 2229 0071 75566F6C 		.ascii	"uVolts\000"
 2229      747300
 2230              	.LASF3:
 2231 0078 73686F72 		.ascii	"short unsigned int\000"
 2231      7420756E 
 2231      7369676E 
 2231      65642069 
 2231      6E7400
 2232              	.LASF2:
 2233 008b 73686F72 		.ascii	"short int\000"
 2233      7420696E 
 2233      7400
 2234              	.LASF44:
 2235 0095 4144435F 		.ascii	"ADC_SetOffset\000"
 2235      5365744F 
 2235      66667365 
 2235      7400
 2236              	.LASF38:
 2237 00a3 4144435F 		.ascii	"ADC_SetLowLimit\000"
 2237      5365744C 
 2237      6F774C69 
 2237      6D697400 
 2238              	.LASF29:
 2239 00b3 73746174 		.ascii	"status\000"
 2239      757300
 2240              	.LASF14:
 2241 00ba 666C6F61 		.ascii	"float32\000"
 2241      74333200 
 2242              	.LASF57:
 2243 00c2 4144435F 		.ascii	"ADC_offset\000"
 2243      6F666673 
 2243      657400
 2244              	.LASF22:
 2245 00cd 746D7052 		.ascii	"tmpRegVal\000"
 2245      65675661 
 2245      6C00
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 56


 2246              	.LASF46:
 2247 00d7 4144435F 		.ascii	"ADC_SetGain\000"
 2247      53657447 
 2247      61696E00 
 2248              	.LASF1:
 2249 00e3 756E7369 		.ascii	"unsigned char\000"
 2249      676E6564 
 2249      20636861 
 2249      7200
 2250              	.LASF40:
 2251 00f1 4144435F 		.ascii	"ADC_SetHighLimit\000"
 2251      53657448 
 2251      6967684C 
 2251      696D6974 
 2251      00
 2252              	.LASF12:
 2253 0102 696E7431 		.ascii	"int16\000"
 2253      3600
 2254              	.LASF5:
 2255 0108 6C6F6E67 		.ascii	"long unsigned int\000"
 2255      20756E73 
 2255      69676E65 
 2255      6420696E 
 2255      7400
 2256              	.LASF13:
 2257 011a 696E7433 		.ascii	"int32\000"
 2257      3200
 2258              	.LASF31:
 2259 0120 4144435F 		.ascii	"ADC_GetResult16\000"
 2259      47657452 
 2259      6573756C 
 2259      74313600 
 2260              	.LASF36:
 2261 0130 4144435F 		.ascii	"ADC_SetChanMask\000"
 2261      53657443 
 2261      68616E4D 
 2261      61736B00 
 2262              	.LASF43:
 2263 0140 4144435F 		.ascii	"ADC_SetSatMask\000"
 2263      53657453 
 2263      61744D61 
 2263      736B00
 2264              	.LASF30:
 2265 014f 4144435F 		.ascii	"ADC_IsEndConversion\000"
 2265      4973456E 
 2265      64436F6E 
 2265      76657273 
 2265      696F6E00 
 2266              	.LASF16:
 2267 0163 646F7562 		.ascii	"double\000"
 2267      6C6500
 2268              	.LASF39:
 2269 016a 6C6F774C 		.ascii	"lowLimit\000"
 2269      696D6974 
 2269      00
 2270              	.LASF47:
 2271 0173 61646347 		.ascii	"adcGain\000"
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 57


 2271      61696E00 
 2272              	.LASF10:
 2273 017b 75696E74 		.ascii	"uint16\000"
 2273      313600
 2274              	.LASF49:
 2275 0182 61646343 		.ascii	"adcCounts\000"
 2275      6F756E74 
 2275      7300
 2276              	.LASF11:
 2277 018c 75696E74 		.ascii	"uint32\000"
 2277      333200
 2278              	.LASF42:
 2279 0193 4144435F 		.ascii	"ADC_SetLimitMask\000"
 2279      5365744C 
 2279      696D6974 
 2279      4D61736B 
 2279      00
 2280              	.LASF8:
 2281 01a4 756E7369 		.ascii	"unsigned int\000"
 2281      676E6564 
 2281      20696E74 
 2281      00
 2282              	.LASF25:
 2283 01b1 4144435F 		.ascii	"ADC_Enable\000"
 2283      456E6162 
 2283      6C6500
 2284              	.LASF23:
 2285 01bc 636F756E 		.ascii	"counts\000"
 2285      747300
 2286              	.LASF7:
 2287 01c3 6C6F6E67 		.ascii	"long long unsigned int\000"
 2287      206C6F6E 
 2287      6720756E 
 2287      7369676E 
 2287      65642069 
 2288              	.LASF34:
 2289 01da 72657375 		.ascii	"result\000"
 2289      6C7400
 2290              	.LASF24:
 2291 01e1 4144435F 		.ascii	"ADC_Start\000"
 2291      53746172 
 2291      7400
 2292              	.LASF35:
 2293 01eb 4144435F 		.ascii	"ADC_Init\000"
 2293      496E6974 
 2293      00
 2294              	.LASF54:
 2295 01f4 766F6C74 		.ascii	"volts\000"
 2295      7300
 2296              	.LASF33:
 2297 01fa 6368616E 		.ascii	"chan\000"
 2297      00
 2298              	.LASF50:
 2299 01ff 6D566F6C 		.ascii	"mVolts\000"
 2299      747300
 2300              	.LASF20:
 2301 0206 73697A65 		.ascii	"sizetype\000"
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 58


 2301      74797065 
 2301      00
 2302              	.LASF51:
 2303 020f 4144435F 		.ascii	"ADC_CountsTo_uVolts\000"
 2303      436F756E 
 2303      7473546F 
 2303      5F75566F 
 2303      6C747300 
 2304              	.LASF53:
 2305 0223 4144435F 		.ascii	"ADC_CountsTo_Volts\000"
 2305      436F756E 
 2305      7473546F 
 2305      5F566F6C 
 2305      747300
 2306              	.LASF27:
 2307 0236 4144435F 		.ascii	"ADC_StartConvert\000"
 2307      53746172 
 2307      74436F6E 
 2307      76657274 
 2307      00
 2308              	.LASF37:
 2309 0247 6D61736B 		.ascii	"mask\000"
 2309      00
 2310              	.LASF21:
 2311 024c 63684E75 		.ascii	"chNum\000"
 2311      6D00
 2312              	.LASF32:
 2313 0252 7265744D 		.ascii	"retMode\000"
 2313      6F646500 
 2314              	.LASF28:
 2315 025a 4144435F 		.ascii	"ADC_StopConvert\000"
 2315      53746F70 
 2315      436F6E76 
 2315      65727400 
 2316              	.LASF9:
 2317 026a 75696E74 		.ascii	"uint8\000"
 2317      3800
 2318              	.LASF58:
 2319 0270 4144435F 		.ascii	"ADC_countsPer10Volt\000"
 2319      636F756E 
 2319      74735065 
 2319      72313056 
 2319      6F6C7400 
 2320              	.LASF4:
 2321 0284 6C6F6E67 		.ascii	"long int\000"
 2321      20696E74 
 2321      00
 2322              	.LASF18:
 2323 028d 63686172 		.ascii	"char\000"
 2323      00
 2324              	.LASF0:
 2325 0292 7369676E 		.ascii	"signed char\000"
 2325      65642063 
 2325      68617200 
 2326              	.LASF56:
 2327 029e 4144435F 		.ascii	"ADC_initVar\000"
 2327      696E6974 
ARM GAS  C:\Users\wzh\AppData\Local\Temp\cc4JJyuZ.s 			page 59


 2327      56617200 
 2328              	.LASF59:
 2329 02aa 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 2329      4320342E 
 2329      382E3420 
 2329      32303134 
 2329      30353236 
 2330 02dd 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 2330      20726576 
 2330      6973696F 
 2330      6E203231 
 2330      31333538 
 2331 0310 30202D66 		.ascii	"0 -ffunction-sections\000"
 2331      66756E63 
 2331      74696F6E 
 2331      2D736563 
 2331      74696F6E 
 2332              	.LASF61:
 2333 0326 433A5C55 		.ascii	"C:\\Users\\wzh\\Desktop\\glucose-monitoring\\exampl"
 2333      73657273 
 2333      5C777A68 
 2333      5C446573 
 2333      6B746F70 
 2334 0354 655C424C 		.ascii	"e\\BLE_Battery_Level01\\BLE_Battery_Level01.cydsn\000"
 2334      455F4261 
 2334      74746572 
 2334      795F4C65 
 2334      76656C30 
 2335              	.LASF17:
 2336 0384 696E7436 		.ascii	"int64\000"
 2336      3400
 2337              	.LASF26:
 2338 038a 4144435F 		.ascii	"ADC_Stop\000"
 2338      53746F70 
 2338      00
 2339              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br
